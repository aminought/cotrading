// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webapi_1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "webapi_1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WebAPI_1 {
class ClientMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientMsg> {};
ClientMsgDefaultTypeInternal _ClientMsg_default_instance_;
class ServerMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerMsg> {};
ServerMsgDefaultTypeInternal _ServerMsg_default_instance_;
class RealTimeCollapsingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RealTimeCollapsing> {};
RealTimeCollapsingDefaultTypeInternal _RealTimeCollapsing_default_instance_;
class LogonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Logon> {};
LogonDefaultTypeInternal _Logon_default_instance_;
class LogonResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogonResult> {};
LogonResultDefaultTypeInternal _LogonResult_default_instance_;
class RestoreSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestoreSession> {};
RestoreSessionDefaultTypeInternal _RestoreSession_default_instance_;
class RestoreSessionResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestoreSessionResult> {};
RestoreSessionResultDefaultTypeInternal _RestoreSessionResult_default_instance_;
class LogoffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Logoff> {};
LogoffDefaultTypeInternal _Logoff_default_instance_;
class LoggedOffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoggedOff> {};
LoggedOffDefaultTypeInternal _LoggedOff_default_instance_;
class PasswordChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PasswordChange> {};
PasswordChangeDefaultTypeInternal _PasswordChange_default_instance_;
class PasswordChangeResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PasswordChangeResult> {};
PasswordChangeResultDefaultTypeInternal _PasswordChangeResult_default_instance_;
class ObtainDemoCredentialsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObtainDemoCredentials> {};
ObtainDemoCredentialsDefaultTypeInternal _ObtainDemoCredentials_default_instance_;
class ObtainDemoCredentialsResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObtainDemoCredentialsResult> {};
ObtainDemoCredentialsResultDefaultTypeInternal _ObtainDemoCredentialsResult_default_instance_;
class UserMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserMessage> {};
UserMessageDefaultTypeInternal _UserMessage_default_instance_;
class UserSessionStateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserSessionStateRequest> {};
UserSessionStateRequestDefaultTypeInternal _UserSessionStateRequest_default_instance_;
class UserSessionStateResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserSessionStateResult> {};
UserSessionStateResultDefaultTypeInternal _UserSessionStateResult_default_instance_;
class ContractMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContractMetadata> {};
ContractMetadataDefaultTypeInternal _ContractMetadata_default_instance_;
class InformationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InformationRequest> {};
InformationRequestDefaultTypeInternal _InformationRequest_default_instance_;
class InformationReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InformationReport> {};
InformationReportDefaultTypeInternal _InformationReport_default_instance_;
class AccountsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccountsRequest> {};
AccountsRequestDefaultTypeInternal _AccountsRequest_default_instance_;
class AccountsReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccountsReport> {};
AccountsReportDefaultTypeInternal _AccountsReport_default_instance_;
class BrokerageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Brokerage> {};
BrokerageDefaultTypeInternal _Brokerage_default_instance_;
class SalesSeriesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SalesSeries> {};
SalesSeriesDefaultTypeInternal _SalesSeries_default_instance_;
class AccountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Account> {};
AccountDefaultTypeInternal _Account_default_instance_;
class SymbolResolutionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SymbolResolutionRequest> {};
SymbolResolutionRequestDefaultTypeInternal _SymbolResolutionRequest_default_instance_;
class SymbolResolutionReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SymbolResolutionReport> {};
SymbolResolutionReportDefaultTypeInternal _SymbolResolutionReport_default_instance_;
class LastStatementBalancesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LastStatementBalancesRequest> {};
LastStatementBalancesRequestDefaultTypeInternal _LastStatementBalancesRequest_default_instance_;
class LastStatementBalancesReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LastStatementBalancesReport> {};
LastStatementBalancesReportDefaultTypeInternal _LastStatementBalancesReport_default_instance_;
class BalanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Balance> {};
BalanceDefaultTypeInternal _Balance_default_instance_;
class CurrencyRatesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CurrencyRatesRequest> {};
CurrencyRatesRequestDefaultTypeInternal _CurrencyRatesRequest_default_instance_;
class CurrencyRatesReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CurrencyRatesReport> {};
CurrencyRatesReportDefaultTypeInternal _CurrencyRatesReport_default_instance_;
class BrokerageCurrencyRatesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BrokerageCurrencyRates> {};
BrokerageCurrencyRatesDefaultTypeInternal _BrokerageCurrencyRates_default_instance_;
class CurrencyRateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CurrencyRate> {};
CurrencyRateDefaultTypeInternal _CurrencyRate_default_instance_;
class SessionInformationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionInformationRequest> {};
SessionInformationRequestDefaultTypeInternal _SessionInformationRequest_default_instance_;
class SessionInformationReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionInformationReport> {};
SessionInformationReportDefaultTypeInternal _SessionInformationReport_default_instance_;
class SessionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionInfo> {};
SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
class SessionDayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionDay> {};
SessionDayDefaultTypeInternal _SessionDay_default_instance_;
class SessionHolidayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionHoliday> {};
SessionHolidayDefaultTypeInternal _SessionHoliday_default_instance_;
class TradeSubscriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TradeSubscription> {};
TradeSubscriptionDefaultTypeInternal _TradeSubscription_default_instance_;
class TradeSubscriptionStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TradeSubscriptionStatus> {};
TradeSubscriptionStatusDefaultTypeInternal _TradeSubscriptionStatus_default_instance_;
class TradeSnapshotCompletionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TradeSnapshotCompletion> {};
TradeSnapshotCompletionDefaultTypeInternal _TradeSnapshotCompletion_default_instance_;
class OrderRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OrderRequest> {};
OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
class OrderRequestRejectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OrderRequestReject> {};
OrderRequestRejectDefaultTypeInternal _OrderRequestReject_default_instance_;
class NewOrderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewOrder> {};
NewOrderDefaultTypeInternal _NewOrder_default_instance_;
class OrderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Order> {};
OrderDefaultTypeInternal _Order_default_instance_;
class UserAttributeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserAttribute> {};
UserAttributeDefaultTypeInternal _UserAttribute_default_instance_;
class ModifyOrderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModifyOrder> {};
ModifyOrderDefaultTypeInternal _ModifyOrder_default_instance_;
class CancelOrderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CancelOrder> {};
CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class ActivateOrderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActivateOrder> {};
ActivateOrderDefaultTypeInternal _ActivateOrder_default_instance_;
class ModifyUserAttributesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModifyUserAttributes> {};
ModifyUserAttributesDefaultTypeInternal _ModifyUserAttributes_default_instance_;
class OrderStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OrderStatus> {};
OrderStatusDefaultTypeInternal _OrderStatus_default_instance_;
class TransactionStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionStatus> {};
TransactionStatusDefaultTypeInternal _TransactionStatus_default_instance_;
class TradeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Trade> {};
TradeDefaultTypeInternal _Trade_default_instance_;
class PositionStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PositionStatus> {};
PositionStatusDefaultTypeInternal _PositionStatus_default_instance_;
class OpenPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpenPosition> {};
OpenPositionDefaultTypeInternal _OpenPosition_default_instance_;
class PurchaseAndSalesGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PurchaseAndSalesGroup> {};
PurchaseAndSalesGroupDefaultTypeInternal _PurchaseAndSalesGroup_default_instance_;
class MatchedTradeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MatchedTrade> {};
MatchedTradeDefaultTypeInternal _MatchedTrade_default_instance_;
class CollateralStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CollateralStatus> {};
CollateralStatusDefaultTypeInternal _CollateralStatus_default_instance_;
class MarketDataSubscriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarketDataSubscription> {};
MarketDataSubscriptionDefaultTypeInternal _MarketDataSubscription_default_instance_;
class MarketDataSubscriptionStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarketDataSubscriptionStatus> {};
MarketDataSubscriptionStatusDefaultTypeInternal _MarketDataSubscriptionStatus_default_instance_;
class RealTimeMarketDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RealTimeMarketData> {};
RealTimeMarketDataDefaultTypeInternal _RealTimeMarketData_default_instance_;
class QuoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Quote> {};
QuoteDefaultTypeInternal _Quote_default_instance_;
class MarketSnapshotValuesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarketSnapshotValues> {};
MarketSnapshotValuesDefaultTypeInternal _MarketSnapshotValues_default_instance_;
class ReadUserAttributeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadUserAttributeRequest> {};
ReadUserAttributeRequestDefaultTypeInternal _ReadUserAttributeRequest_default_instance_;
class ReadUserAttributeResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadUserAttributeResult> {};
ReadUserAttributeResultDefaultTypeInternal _ReadUserAttributeResult_default_instance_;
class ModifyUserAttributeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModifyUserAttributeRequest> {};
ModifyUserAttributeRequestDefaultTypeInternal _ModifyUserAttributeRequest_default_instance_;
class ModifyUserAttributeResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModifyUserAttributeResult> {};
ModifyUserAttributeResultDefaultTypeInternal _ModifyUserAttributeResult_default_instance_;
class TimeAndSalesParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeAndSalesParameters> {};
TimeAndSalesParametersDefaultTypeInternal _TimeAndSalesParameters_default_instance_;
class TimeAndSalesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeAndSalesRequest> {};
TimeAndSalesRequestDefaultTypeInternal _TimeAndSalesRequest_default_instance_;
class TimeAndSalesReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeAndSalesReport> {};
TimeAndSalesReportDefaultTypeInternal _TimeAndSalesReport_default_instance_;
class TimeBarParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeBarParameters> {};
TimeBarParametersDefaultTypeInternal _TimeBarParameters_default_instance_;
class TimeBarRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeBarRequest> {};
TimeBarRequestDefaultTypeInternal _TimeBarRequest_default_instance_;
class TimeBarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeBar> {};
TimeBarDefaultTypeInternal _TimeBar_default_instance_;
class TimeBarReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeBarReport> {};
TimeBarReportDefaultTypeInternal _TimeBarReport_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[74];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[35];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_webapi_5f1_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_webapi_5f1_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, logon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, restore_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, logoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, password_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, obtain_demo_credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, user_session_state_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, information_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, trade_subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, order_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, market_data_subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, read_user_attribute_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, modify_user_attribute_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, time_and_sales_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, time_bar_request_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, logon_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, restore_session_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, logged_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, password_change_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, user_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, obtain_demo_credentials_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, user_session_state_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, information_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, order_request_reject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, trade_subscription_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, trade_snapshot_completion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, order_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, position_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, collateral_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, market_data_subscription_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, real_time_market_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, read_user_attribute_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, modify_user_attribute_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, time_and_sales_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, time_bar_report_),
    0,
    1,
    2,
    3,
    6,
    4,
    5,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCollapsing, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCollapsing, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, one_time_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, private_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, drop_concurrent_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, collapsing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, protocol_version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, protocol_version_major_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, base_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, text_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, redirect_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, protocol_version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, protocol_version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonResult, user_id_),
    4,
    0,
    1,
    2,
    3,
    5,
    6,
    7,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSession, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSession, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSession, session_token_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSessionResult, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSessionResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSessionResult, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSessionResult, base_time_),
    1,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logoff, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logoff, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logoff, text_message_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOff, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOff, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOff, logoff_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOff, text_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOff, redirect_url_),
    2,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChange, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChange, old_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChange, new_password_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChangeResult, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChangeResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChangeResult, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasswordChangeResult, text_message_),
    1,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentials, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentials, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentials, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentials, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentials, second_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentials, e_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentials, private_label_),
    0,
    1,
    2,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentialsResult, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentialsResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentialsResult, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentialsResult, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentialsResult, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainDemoCredentialsResult, text_message_),
    3,
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, expiration_utc_time_),
    4,
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateRequest, session_token_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateResult, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateResult, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateResult, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateResult, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionStateResult, username_),
    0,
    2,
    3,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, contract_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, correct_price_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, display_price_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, tick_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, cfi_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, is_most_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, last_trading_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, first_notice_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, underlying_contract_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, margin_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, instrument_group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, session_group_id_),
    7,
    0,
    9,
    8,
    1,
    2,
    10,
    3,
    11,
    4,
    14,
    12,
    13,
    5,
    15,
    6,
    16,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, accounts_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, symbol_resolution_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, last_statement_balances_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, currency_rates_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationRequest, session_information_request_),
    5,
    6,
    0,
    1,
    2,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, is_report_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, text_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, accounts_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, symbol_resolution_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, last_statement_balances_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, currency_rates_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationReport, session_information_report_),
    6,
    8,
    7,
    0,
    1,
    2,
    3,
    4,
    5,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountsReport, brokerage_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brokerage, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brokerage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brokerage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brokerage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brokerage, sales_series_),
    1,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalesSeries, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalesSeries, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalesSeries, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalesSeries, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalesSeries, account_),
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, brokerage_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, last_statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, is_view_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, is_unauthorized_),
    3,
    0,
    1,
    2,
    4,
    5,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolResolutionRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolResolutionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolResolutionRequest, symbol_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolResolutionReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolResolutionReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolResolutionReport, contract_metadata_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastStatementBalancesRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastStatementBalancesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastStatementBalancesReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastStatementBalancesReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastStatementBalancesReport, balance_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, total_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, ote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, upl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, mvo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, cash_excess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, collateral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, initial_margin_),
    1,
    2,
    3,
    0,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRatesRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRatesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRatesReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRatesReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRatesReport, brokerage_currency_rates_),
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerageCurrencyRates, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerageCurrencyRates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerageCurrencyRates, brokerage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerageCurrencyRates, master_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerageCurrencyRates, statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerageCurrencyRates, currency_rate_),
    2,
    0,
    1,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRate, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRate, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyRate, rate_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationRequest, session_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationRequest, from_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationRequest, to_utc_time_),
    2,
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationReport, session_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInformationReport, session_info_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, from_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, to_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, session_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, session_holiday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, is_primary_),
    3,
    1,
    2,
    0,
    5,
    6,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDay, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDay, day_of_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDay, pre_open_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDay, open_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDay, close_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionDay, post_close_offset_),
    4,
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionHoliday, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionHoliday, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionHoliday, holiday_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionHoliday, holiday_name_),
    1,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, subscription_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, publication_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, sales_series_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, brokerage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, last_order_update_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscription, skip_orders_snapshot_),
    1,
    8,
    2,
    3,
    0,
    4,
    6,
    5,
    7,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscriptionStatus, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscriptionStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscriptionStatus, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscriptionStatus, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSubscriptionStatus, text_message_),
    1,
    2,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSnapshotCompletion, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSnapshotCompletion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSnapshotCompletion, subscription_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeSnapshotCompletion, subscription_scope_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, new_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, modify_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, cancel_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, activate_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, modify_user_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequest, on_behalf_of_user_),
    6,
    1,
    2,
    3,
    4,
    5,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequestReject, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequestReject, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequestReject, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequestReject, reject_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderRequestReject, text_message_),
    1,
    2,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrder, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrder, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrder, suspend_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, when_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, exec_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, good_thru_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, stop_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, min_visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, is_manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, is_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, is_aggressive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, trail_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, trailing_peg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, trigger_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, activation_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, suspension_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, user_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, good_thru_utc_time_),
    2,
    1,
    3,
    0,
    4,
    22,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    23,
    21,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttribute, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttribute, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttribute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttribute, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttribute, delete__),
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, orig_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, when_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, min_visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, stop_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, activation_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, remove_activation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, suspension_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, remove_suspension_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, good_thru_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyOrder, good_thru_utc_time_),
    0,
    3,
    1,
    2,
    5,
    4,
    6,
    7,
    8,
    9,
    10,
    12,
    11,
    13,
    14,
    15,
    16,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, orig_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOrder, when_utc_time_),
    0,
    4,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateOrder, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateOrder, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateOrder, orig_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateOrder, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateOrder, when_utc_time_),
    0,
    4,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributes, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributes, chain_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributes, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributes, user_attribute_),
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, subscription_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, is_snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, chain_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, exec_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, status_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, submission_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, fill_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, fill_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, avg_fill_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, active_at_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, remaining_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, transaction_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, entered_by_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, first_statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, last_statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, contract_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatus, account_id_),
    17,
    5,
    6,
    0,
    1,
    2,
    7,
    8,
    9,
    10,
    12,
    11,
    13,
    4,
    18,
    3,
    14,
    15,
    19,
    16,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, trans_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, ref_trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, orig_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, fill_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, fill_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, trade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_stop_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, stop_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_min_visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, min_visible_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_fill_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_fill_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_exec_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, exec_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_good_thru_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, good_thru_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, reject_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, fill_counterparty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, route_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, text_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, prev_good_thru_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatus, good_thru_utc_time_),
    8,
    5,
    6,
    7,
    0,
    1,
    9,
    10,
    32,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    33,
    34,
    25,
    27,
    26,
    29,
    28,
    2,
    3,
    4,
    30,
    31,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, trade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, trade_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, trade_counterparty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trade, is_aggressive_),
    0,
    4,
    2,
    3,
    6,
    5,
    7,
    8,
    1,
    9,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, subscription_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, is_snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, is_short_open_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, open_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, purchase_and_sales_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionStatus, contract_metadata_),
    5,
    2,
    1,
    4,
    3,
    6,
    7,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPosition, trade_utc_time_),
    0,
    1,
    2,
    3,
    4,
    5,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseAndSalesGroup, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseAndSalesGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseAndSalesGroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseAndSalesGroup, realized_profit_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseAndSalesGroup, matched_trade_),
    1,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, is_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, statement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedTrade, trade_utc_time_),
    0,
    1,
    2,
    3,
    4,
    5,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, subscription_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, is_snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, total_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollateralStatus, purchasing_power_),
    5,
    1,
    2,
    0,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscription, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscription, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscription, level_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscriptionStatus, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscriptionStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscriptionStatus, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscriptionStatus, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscriptionStatus, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSubscriptionStatus, text_message_),
    1,
    2,
    3,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeMarketData, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeMarketData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeMarketData, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeMarketData, quote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeMarketData, is_snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeMarketData, collapsing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeMarketData, snapshot_values_),
    1,
    4,
    2,
    3,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, quote_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quote, session_ohlc_indicator_),
    1,
    0,
    2,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, high_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, low_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, yesterday_settlement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, total_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSnapshotValues, yesterday_close_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeRequest, attribute_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeRequest, is_regexp_),
    0,
    2,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeResult, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeResult, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeResult, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeResult, user_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadUserAttributeResult, text_message_),
    1,
    2,
    3,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeRequest, user_attribute_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeResult, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeResult, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeResult, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyUserAttributeResult, text_message_),
    1,
    2,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesParameters, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesParameters, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesParameters, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesParameters, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesParameters, from_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesParameters, to_utc_time_),
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesRequest, time_and_sales_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesRequest, request_type_),
    1,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, quote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, up_to_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, is_report_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndSalesReport, text_message_),
    1,
    2,
    5,
    3,
    4,
    0,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarParameters, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarParameters, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarParameters, contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarParameters, bar_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarParameters, units_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarParameters, from_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarParameters, to_utc_time_),
    0,
    1,
    4,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarRequest, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarRequest, time_bar_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarRequest, request_type_),
    1,
    0,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, bar_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, high_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, low_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, commodity_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, open_interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBar, commodity_open_interest_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, time_bar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, up_to_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, is_report_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBarReport, text_message_),
    1,
    2,
    5,
    3,
    4,
    0,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(ClientMsg)},
  { 32, 56, sizeof(ServerMsg)},
  { 76, 80, sizeof(RealTimeCollapsing)},
  { 80, 94, sizeof(Logon)},
  { 104, 116, sizeof(LogonResult)},
  { 124, 129, sizeof(RestoreSession)},
  { 130, 136, sizeof(RestoreSessionResult)},
  { 138, 143, sizeof(Logoff)},
  { 144, 151, sizeof(LoggedOff)},
  { 154, 160, sizeof(PasswordChange)},
  { 162, 168, sizeof(PasswordChangeResult)},
  { 170, 179, sizeof(ObtainDemoCredentials)},
  { 184, 192, sizeof(ObtainDemoCredentialsResult)},
  { 196, 205, sizeof(UserMessage)},
  { 210, 215, sizeof(UserSessionStateRequest)},
  { 216, 224, sizeof(UserSessionStateResult)},
  { 228, 249, sizeof(ContractMetadata)},
  { 266, 277, sizeof(InformationRequest)},
  { 284, 297, sizeof(InformationReport)},
  { 306, 310, sizeof(AccountsRequest)},
  { 310, 315, sizeof(AccountsReport)},
  { 316, 323, sizeof(Brokerage)},
  { 326, 333, sizeof(SalesSeries)},
  { 336, 346, sizeof(Account)},
  { 352, 357, sizeof(SymbolResolutionRequest)},
  { 358, 363, sizeof(SymbolResolutionReport)},
  { 364, 368, sizeof(LastStatementBalancesRequest)},
  { 368, 373, sizeof(LastStatementBalancesReport)},
  { 374, 390, sizeof(Balance)},
  { 402, 406, sizeof(CurrencyRatesRequest)},
  { 406, 411, sizeof(CurrencyRatesReport)},
  { 412, 420, sizeof(BrokerageCurrencyRates)},
  { 424, 430, sizeof(CurrencyRate)},
  { 432, 439, sizeof(SessionInformationRequest)},
  { 442, 448, sizeof(SessionInformationReport)},
  { 450, 461, sizeof(SessionInfo)},
  { 468, 477, sizeof(SessionDay)},
  { 482, 488, sizeof(SessionHoliday)},
  { 490, 503, sizeof(TradeSubscription)},
  { 512, 519, sizeof(TradeSubscriptionStatus)},
  { 522, 528, sizeof(TradeSnapshotCompletion)},
  { 530, 541, sizeof(OrderRequest)},
  { 548, 555, sizeof(OrderRequestReject)},
  { 558, 564, sizeof(NewOrder)},
  { 566, 594, sizeof(Order)},
  { 618, 625, sizeof(UserAttribute)},
  { 628, 649, sizeof(ModifyOrder)},
  { 666, 675, sizeof(CancelOrder)},
  { 680, 689, sizeof(ActivateOrder)},
  { 694, 701, sizeof(ModifyUserAttributes)},
  { 704, 728, sizeof(OrderStatus)},
  { 748, 787, sizeof(TransactionStatus)},
  { 822, 836, sizeof(Trade)},
  { 846, 858, sizeof(PositionStatus)},
  { 866, 876, sizeof(OpenPosition)},
  { 882, 889, sizeof(PurchaseAndSalesGroup)},
  { 892, 902, sizeof(MatchedTrade)},
  { 908, 918, sizeof(CollateralStatus)},
  { 924, 930, sizeof(MarketDataSubscription)},
  { 932, 940, sizeof(MarketDataSubscriptionStatus)},
  { 944, 953, sizeof(RealTimeMarketData)},
  { 958, 967, sizeof(Quote)},
  { 972, 983, sizeof(MarketSnapshotValues)},
  { 990, 997, sizeof(ReadUserAttributeRequest)},
  { 1000, 1008, sizeof(ReadUserAttributeResult)},
  { 1012, 1018, sizeof(ModifyUserAttributeRequest)},
  { 1020, 1027, sizeof(ModifyUserAttributeResult)},
  { 1030, 1038, sizeof(TimeAndSalesParameters)},
  { 1042, 1049, sizeof(TimeAndSalesRequest)},
  { 1052, 1062, sizeof(TimeAndSalesReport)},
  { 1068, 1077, sizeof(TimeBarParameters)},
  { 1082, 1089, sizeof(TimeBarRequest)},
  { 1092, 1106, sizeof(TimeBar)},
  { 1116, 1126, sizeof(TimeBarReport)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ClientMsg_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ServerMsg_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_RealTimeCollapsing_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Logon_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LogonResult_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_RestoreSession_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_RestoreSessionResult_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Logoff_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LoggedOff_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PasswordChange_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PasswordChangeResult_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ObtainDemoCredentials_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ObtainDemoCredentialsResult_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_UserMessage_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_UserSessionStateRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_UserSessionStateResult_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ContractMetadata_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_InformationRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_InformationReport_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_AccountsRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_AccountsReport_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Brokerage_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SalesSeries_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Account_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolResolutionRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SymbolResolutionReport_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LastStatementBalancesRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_LastStatementBalancesReport_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Balance_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CurrencyRatesRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CurrencyRatesReport_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BrokerageCurrencyRates_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CurrencyRate_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionInformationRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionInformationReport_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionInfo_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionDay_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionHoliday_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TradeSubscription_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TradeSubscriptionStatus_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TradeSnapshotCompletion_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_OrderRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_OrderRequestReject_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_NewOrder_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Order_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_UserAttribute_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ModifyOrder_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CancelOrder_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ActivateOrder_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ModifyUserAttributes_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_OrderStatus_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionStatus_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Trade_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PositionStatus_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_OpenPosition_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PurchaseAndSalesGroup_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_MatchedTrade_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CollateralStatus_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_MarketDataSubscription_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_MarketDataSubscriptionStatus_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_RealTimeMarketData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Quote_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_MarketSnapshotValues_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReadUserAttributeRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ReadUserAttributeResult_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ModifyUserAttributeRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ModifyUserAttributeResult_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TimeAndSalesParameters_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TimeAndSalesRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TimeAndSalesReport_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TimeBarParameters_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TimeBarRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TimeBar_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_TimeBarReport_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_webapi_5f1_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "webapi_1.proto", schemas, file_default_instances, protobuf_Offsets_webapi_5f1_2eproto(), factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 74);
}

}  // namespace

void protobuf_ShutdownFile_webapi_5f1_2eproto() {
  _ClientMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ServerMsg_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RealTimeCollapsing_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Logon_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LogonResult_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RestoreSession_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _RestoreSessionResult_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Logoff_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _LoggedOff_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PasswordChange_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PasswordChangeResult_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ObtainDemoCredentials_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ObtainDemoCredentialsResult_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _UserMessage_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _UserSessionStateRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _UserSessionStateResult_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _ContractMetadata_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _InformationRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _InformationReport_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _AccountsRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _AccountsReport_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _Brokerage_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SalesSeries_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _Account_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SymbolResolutionRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SymbolResolutionReport_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _LastStatementBalancesRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _LastStatementBalancesReport_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _Balance_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CurrencyRatesRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CurrencyRatesReport_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _BrokerageCurrencyRates_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CurrencyRate_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _SessionInformationRequest_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _SessionInformationReport_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _SessionInfo_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _SessionDay_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _SessionHoliday_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _TradeSubscription_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _TradeSubscriptionStatus_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _TradeSnapshotCompletion_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _OrderRequest_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _OrderRequestReject_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _NewOrder_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _Order_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _UserAttribute_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _ModifyOrder_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CancelOrder_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _ActivateOrder_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _ModifyUserAttributes_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _OrderStatus_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _TransactionStatus_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _Trade_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _PositionStatus_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _OpenPosition_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _PurchaseAndSalesGroup_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _MatchedTrade_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CollateralStatus_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _MarketDataSubscription_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _MarketDataSubscriptionStatus_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _RealTimeMarketData_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _Quote_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _MarketSnapshotValues_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _ReadUserAttributeRequest_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _ReadUserAttributeResult_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _ModifyUserAttributeRequest_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _ModifyUserAttributeResult_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _TimeAndSalesParameters_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _TimeAndSalesRequest_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _TimeAndSalesReport_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _TimeBarParameters_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _TimeBarRequest_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _TimeBar_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _TimeBarReport_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
}

void protobuf_InitDefaults_webapi_5f1_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ClientMsg_default_instance_.DefaultConstruct();
  _ServerMsg_default_instance_.DefaultConstruct();
  _RealTimeCollapsing_default_instance_.DefaultConstruct();
  _Logon_default_instance_.DefaultConstruct();
  _LogonResult_default_instance_.DefaultConstruct();
  _RestoreSession_default_instance_.DefaultConstruct();
  _RestoreSessionResult_default_instance_.DefaultConstruct();
  _Logoff_default_instance_.DefaultConstruct();
  _LoggedOff_default_instance_.DefaultConstruct();
  _PasswordChange_default_instance_.DefaultConstruct();
  _PasswordChangeResult_default_instance_.DefaultConstruct();
  _ObtainDemoCredentials_default_instance_.DefaultConstruct();
  _ObtainDemoCredentialsResult_default_instance_.DefaultConstruct();
  _UserMessage_default_instance_.DefaultConstruct();
  _UserSessionStateRequest_default_instance_.DefaultConstruct();
  _UserSessionStateResult_default_instance_.DefaultConstruct();
  _ContractMetadata_default_instance_.DefaultConstruct();
  _InformationRequest_default_instance_.DefaultConstruct();
  _InformationReport_default_instance_.DefaultConstruct();
  _AccountsRequest_default_instance_.DefaultConstruct();
  _AccountsReport_default_instance_.DefaultConstruct();
  _Brokerage_default_instance_.DefaultConstruct();
  _SalesSeries_default_instance_.DefaultConstruct();
  _Account_default_instance_.DefaultConstruct();
  _SymbolResolutionRequest_default_instance_.DefaultConstruct();
  _SymbolResolutionReport_default_instance_.DefaultConstruct();
  _LastStatementBalancesRequest_default_instance_.DefaultConstruct();
  _LastStatementBalancesReport_default_instance_.DefaultConstruct();
  _Balance_default_instance_.DefaultConstruct();
  _CurrencyRatesRequest_default_instance_.DefaultConstruct();
  _CurrencyRatesReport_default_instance_.DefaultConstruct();
  _BrokerageCurrencyRates_default_instance_.DefaultConstruct();
  _CurrencyRate_default_instance_.DefaultConstruct();
  _SessionInformationRequest_default_instance_.DefaultConstruct();
  _SessionInformationReport_default_instance_.DefaultConstruct();
  _SessionInfo_default_instance_.DefaultConstruct();
  _SessionDay_default_instance_.DefaultConstruct();
  _SessionHoliday_default_instance_.DefaultConstruct();
  _TradeSubscription_default_instance_.DefaultConstruct();
  _TradeSubscriptionStatus_default_instance_.DefaultConstruct();
  _TradeSnapshotCompletion_default_instance_.DefaultConstruct();
  _OrderRequest_default_instance_.DefaultConstruct();
  _OrderRequestReject_default_instance_.DefaultConstruct();
  _NewOrder_default_instance_.DefaultConstruct();
  _Order_default_instance_.DefaultConstruct();
  _UserAttribute_default_instance_.DefaultConstruct();
  _ModifyOrder_default_instance_.DefaultConstruct();
  _CancelOrder_default_instance_.DefaultConstruct();
  _ActivateOrder_default_instance_.DefaultConstruct();
  _ModifyUserAttributes_default_instance_.DefaultConstruct();
  _OrderStatus_default_instance_.DefaultConstruct();
  _TransactionStatus_default_instance_.DefaultConstruct();
  _Trade_default_instance_.DefaultConstruct();
  _PositionStatus_default_instance_.DefaultConstruct();
  _OpenPosition_default_instance_.DefaultConstruct();
  _PurchaseAndSalesGroup_default_instance_.DefaultConstruct();
  _MatchedTrade_default_instance_.DefaultConstruct();
  _CollateralStatus_default_instance_.DefaultConstruct();
  _MarketDataSubscription_default_instance_.DefaultConstruct();
  _MarketDataSubscriptionStatus_default_instance_.DefaultConstruct();
  _RealTimeMarketData_default_instance_.DefaultConstruct();
  _Quote_default_instance_.DefaultConstruct();
  _MarketSnapshotValues_default_instance_.DefaultConstruct();
  _ReadUserAttributeRequest_default_instance_.DefaultConstruct();
  _ReadUserAttributeResult_default_instance_.DefaultConstruct();
  _ModifyUserAttributeRequest_default_instance_.DefaultConstruct();
  _ModifyUserAttributeResult_default_instance_.DefaultConstruct();
  _TimeAndSalesParameters_default_instance_.DefaultConstruct();
  _TimeAndSalesRequest_default_instance_.DefaultConstruct();
  _TimeAndSalesReport_default_instance_.DefaultConstruct();
  _TimeBarParameters_default_instance_.DefaultConstruct();
  _TimeBarRequest_default_instance_.DefaultConstruct();
  _TimeBar_default_instance_.DefaultConstruct();
  _TimeBarReport_default_instance_.DefaultConstruct();
  _ClientMsg_default_instance_.get_mutable()->logon_ = const_cast< ::WebAPI_1::Logon*>(
      ::WebAPI_1::Logon::internal_default_instance());
  _ClientMsg_default_instance_.get_mutable()->restore_session_ = const_cast< ::WebAPI_1::RestoreSession*>(
      ::WebAPI_1::RestoreSession::internal_default_instance());
  _ClientMsg_default_instance_.get_mutable()->logoff_ = const_cast< ::WebAPI_1::Logoff*>(
      ::WebAPI_1::Logoff::internal_default_instance());
  _ClientMsg_default_instance_.get_mutable()->password_change_ = const_cast< ::WebAPI_1::PasswordChange*>(
      ::WebAPI_1::PasswordChange::internal_default_instance());
  _ClientMsg_default_instance_.get_mutable()->obtain_demo_credentials_ = const_cast< ::WebAPI_1::ObtainDemoCredentials*>(
      ::WebAPI_1::ObtainDemoCredentials::internal_default_instance());
  _ClientMsg_default_instance_.get_mutable()->user_session_state_request_ = const_cast< ::WebAPI_1::UserSessionStateRequest*>(
      ::WebAPI_1::UserSessionStateRequest::internal_default_instance());
  _ServerMsg_default_instance_.get_mutable()->logon_result_ = const_cast< ::WebAPI_1::LogonResult*>(
      ::WebAPI_1::LogonResult::internal_default_instance());
  _ServerMsg_default_instance_.get_mutable()->restore_session_result_ = const_cast< ::WebAPI_1::RestoreSessionResult*>(
      ::WebAPI_1::RestoreSessionResult::internal_default_instance());
  _ServerMsg_default_instance_.get_mutable()->logged_off_ = const_cast< ::WebAPI_1::LoggedOff*>(
      ::WebAPI_1::LoggedOff::internal_default_instance());
  _ServerMsg_default_instance_.get_mutable()->password_change_result_ = const_cast< ::WebAPI_1::PasswordChangeResult*>(
      ::WebAPI_1::PasswordChangeResult::internal_default_instance());
  _ServerMsg_default_instance_.get_mutable()->obtain_demo_credentials_result_ = const_cast< ::WebAPI_1::ObtainDemoCredentialsResult*>(
      ::WebAPI_1::ObtainDemoCredentialsResult::internal_default_instance());
  _ServerMsg_default_instance_.get_mutable()->user_session_state_result_ = const_cast< ::WebAPI_1::UserSessionStateResult*>(
      ::WebAPI_1::UserSessionStateResult::internal_default_instance());
  _InformationRequest_default_instance_.get_mutable()->accounts_request_ = const_cast< ::WebAPI_1::AccountsRequest*>(
      ::WebAPI_1::AccountsRequest::internal_default_instance());
  _InformationRequest_default_instance_.get_mutable()->symbol_resolution_request_ = const_cast< ::WebAPI_1::SymbolResolutionRequest*>(
      ::WebAPI_1::SymbolResolutionRequest::internal_default_instance());
  _InformationRequest_default_instance_.get_mutable()->last_statement_balances_request_ = const_cast< ::WebAPI_1::LastStatementBalancesRequest*>(
      ::WebAPI_1::LastStatementBalancesRequest::internal_default_instance());
  _InformationRequest_default_instance_.get_mutable()->currency_rates_request_ = const_cast< ::WebAPI_1::CurrencyRatesRequest*>(
      ::WebAPI_1::CurrencyRatesRequest::internal_default_instance());
  _InformationRequest_default_instance_.get_mutable()->session_information_request_ = const_cast< ::WebAPI_1::SessionInformationRequest*>(
      ::WebAPI_1::SessionInformationRequest::internal_default_instance());
  _InformationReport_default_instance_.get_mutable()->accounts_report_ = const_cast< ::WebAPI_1::AccountsReport*>(
      ::WebAPI_1::AccountsReport::internal_default_instance());
  _InformationReport_default_instance_.get_mutable()->symbol_resolution_report_ = const_cast< ::WebAPI_1::SymbolResolutionReport*>(
      ::WebAPI_1::SymbolResolutionReport::internal_default_instance());
  _InformationReport_default_instance_.get_mutable()->last_statement_balances_report_ = const_cast< ::WebAPI_1::LastStatementBalancesReport*>(
      ::WebAPI_1::LastStatementBalancesReport::internal_default_instance());
  _InformationReport_default_instance_.get_mutable()->currency_rates_report_ = const_cast< ::WebAPI_1::CurrencyRatesReport*>(
      ::WebAPI_1::CurrencyRatesReport::internal_default_instance());
  _InformationReport_default_instance_.get_mutable()->session_information_report_ = const_cast< ::WebAPI_1::SessionInformationReport*>(
      ::WebAPI_1::SessionInformationReport::internal_default_instance());
  _SymbolResolutionReport_default_instance_.get_mutable()->contract_metadata_ = const_cast< ::WebAPI_1::ContractMetadata*>(
      ::WebAPI_1::ContractMetadata::internal_default_instance());
  _OrderRequest_default_instance_.get_mutable()->new_order_ = const_cast< ::WebAPI_1::NewOrder*>(
      ::WebAPI_1::NewOrder::internal_default_instance());
  _OrderRequest_default_instance_.get_mutable()->modify_order_ = const_cast< ::WebAPI_1::ModifyOrder*>(
      ::WebAPI_1::ModifyOrder::internal_default_instance());
  _OrderRequest_default_instance_.get_mutable()->cancel_order_ = const_cast< ::WebAPI_1::CancelOrder*>(
      ::WebAPI_1::CancelOrder::internal_default_instance());
  _OrderRequest_default_instance_.get_mutable()->activate_order_ = const_cast< ::WebAPI_1::ActivateOrder*>(
      ::WebAPI_1::ActivateOrder::internal_default_instance());
  _OrderRequest_default_instance_.get_mutable()->modify_user_attributes_ = const_cast< ::WebAPI_1::ModifyUserAttributes*>(
      ::WebAPI_1::ModifyUserAttributes::internal_default_instance());
  _NewOrder_default_instance_.get_mutable()->order_ = const_cast< ::WebAPI_1::Order*>(
      ::WebAPI_1::Order::internal_default_instance());
  _OrderStatus_default_instance_.get_mutable()->order_ = const_cast< ::WebAPI_1::Order*>(
      ::WebAPI_1::Order::internal_default_instance());
  _PositionStatus_default_instance_.get_mutable()->contract_metadata_ = const_cast< ::WebAPI_1::ContractMetadata*>(
      ::WebAPI_1::ContractMetadata::internal_default_instance());
  _RealTimeMarketData_default_instance_.get_mutable()->snapshot_values_ = const_cast< ::WebAPI_1::MarketSnapshotValues*>(
      ::WebAPI_1::MarketSnapshotValues::internal_default_instance());
  _TimeAndSalesRequest_default_instance_.get_mutable()->time_and_sales_parameters_ = const_cast< ::WebAPI_1::TimeAndSalesParameters*>(
      ::WebAPI_1::TimeAndSalesParameters::internal_default_instance());
  _TimeBarRequest_default_instance_.get_mutable()->time_bar_parameters_ = const_cast< ::WebAPI_1::TimeBarParameters*>(
      ::WebAPI_1::TimeBarParameters::internal_default_instance());
}

void protobuf_InitDefaults_webapi_5f1_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_webapi_5f1_2eproto_impl);
}
void protobuf_AddDesc_webapi_5f1_2eproto_impl() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  static const char descriptor[] = {
      "\n\016webapi_1.proto\022\010WebAPI_1\"\254\006\n\tClientMsg"
      "\022\036\n\005logon\030d \001(\0132\017.WebAPI_1.Logon\0221\n\017rest"
      "ore_session\030e \001(\0132\030.WebAPI_1.RestoreSess"
      "ion\022 \n\006logoff\030f \001(\0132\020.WebAPI_1.Logoff\0221\n"
      "\017password_change\030g \001(\0132\030.WebAPI_1.Passwo"
      "rdChange\022@\n\027obtain_demo_credentials\030h \001("
      "\0132\037.WebAPI_1.ObtainDemoCredentials\022E\n\032us"
      "er_session_state_request\030i \001(\0132!.WebAPI_"
      "1.UserSessionStateRequest\0229\n\023information"
      "_request\030\001 \003(\0132\034.WebAPI_1.InformationReq"
      "uest\0227\n\022trade_subscription\030\002 \003(\0132\033.WebAP"
      "I_1.TradeSubscription\022-\n\rorder_request\030\003"
      " \003(\0132\026.WebAPI_1.OrderRequest\022B\n\030market_d"
      "ata_subscription\030\004 \003(\0132 .WebAPI_1.Market"
      "DataSubscription\022G\n\033read_user_attribute_"
      "request\030\005 \003(\0132\".WebAPI_1.ReadUserAttribu"
      "teRequest\022K\n\035modify_user_attribute_reque"
      "st\030\006 \003(\0132$.WebAPI_1.ModifyUserAttributeR"
      "equest\022=\n\026time_and_sales_request\030\007 \003(\0132\035"
      ".WebAPI_1.TimeAndSalesRequest\0222\n\020time_ba"
      "r_request\030\010 \003(\0132\030.WebAPI_1.TimeBarReques"
      "t\"\311\t\n\tServerMsg\022+\n\014logon_result\030d \001(\0132\025."
      "WebAPI_1.LogonResult\022>\n\026restore_session_"
      "result\030e \001(\0132\036.WebAPI_1.RestoreSessionRe"
      "sult\022\'\n\nlogged_off\030f \001(\0132\023.WebAPI_1.Logg"
      "edOff\022>\n\026password_change_result\030g \001(\0132\036."
      "WebAPI_1.PasswordChangeResult\022+\n\014user_me"
      "ssage\030h \003(\0132\025.WebAPI_1.UserMessage\022M\n\036ob"
      "tain_demo_credentials_result\030i \001(\0132%.Web"
      "API_1.ObtainDemoCredentialsResult\022C\n\031use"
      "r_session_state_result\030j \001(\0132 .WebAPI_1."
      "UserSessionStateResult\0227\n\022information_re"
      "port\030\001 \003(\0132\033.WebAPI_1.InformationReport\022"
      ":\n\024order_request_reject\030\002 \003(\0132\034.WebAPI_1"
      ".OrderRequestReject\022D\n\031trade_subscriptio"
      "n_status\030\003 \003(\0132!.WebAPI_1.TradeSubscript"
      "ionStatus\022D\n\031trade_snapshot_completion\030\004"
      " \003(\0132!.WebAPI_1.TradeSnapshotCompletion\022"
      "+\n\014order_status\030\005 \003(\0132\025.WebAPI_1.OrderSt"
      "atus\0221\n\017position_status\030\006 \003(\0132\030.WebAPI_1"
      ".PositionStatus\0225\n\021collateral_status\030\007 \003"
      "(\0132\032.WebAPI_1.CollateralStatus\022O\n\037market"
      "_data_subscription_status\030\010 \003(\0132&.WebAPI"
      "_1.MarketDataSubscriptionStatus\022;\n\025real_"
      "time_market_data\030\t \003(\0132\034.WebAPI_1.RealTi"
      "meMarketData\022E\n\032read_user_attribute_resu"
      "lt\030\n \003(\0132!.WebAPI_1.ReadUserAttributeRes"
      "ult\022I\n\034modify_user_attribute_result\030\013 \003("
      "\0132#.WebAPI_1.ModifyUserAttributeResult\022;"
      "\n\025time_and_sales_report\030\014 \003(\0132\034.WebAPI_1"
      ".TimeAndSalesReport\0220\n\017time_bar_report\030\r"
      " \003(\0132\027.WebAPI_1.TimeBarReport\"Q\n\022RealTim"
      "eCollapsing\";\n\005Level\022\010\n\004NONE\020\000\022\007\n\003DOM\020\001\022"
      "\013\n\007DOM_BBA\020\002\022\022\n\016DOM_BBA_TRADES\020\003\"\204\002\n\005Log"
      "on\022\021\n\tuser_name\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022"
      "\031\n\021one_time_password\030\003 \001(\t\022\025\n\rprivate_la"
      "bel\030\004 \001(\t\022\021\n\tclient_id\030\005 \002(\t\022\026\n\016client_v"
      "ersion\030\006 \002(\t\022\037\n\027drop_concurrent_session\030"
      "\007 \001(\010\022\030\n\020collapsing_level\030\010 \001(\r\022\036\n\026proto"
      "col_version_minor\030\t \001(\r\022\036\n\026protocol_vers"
      "ion_major\030\n \001(\r\"\310\002\n\013LogonResult\022\023\n\013resul"
      "t_code\030\001 \002(\r\022\021\n\tbase_time\030\002 \002(\t\022\025\n\rsessi"
      "on_token\030\003 \001(\t\022\024\n\014text_message\030\004 \001(\t\022\024\n\014"
      "redirect_url\030\005 \001(\t\022\036\n\026protocol_version_m"
      "inor\030\006 \002(\r\022\036\n\026protocol_version_major\030\007 \002"
      "(\r\022\017\n\007user_id\030\010 \001(\021\"}\n\nResultCode\022\013\n\007SUC"
      "CESS\020\000\022\013\n\007FAILURE\020e\022\027\n\023NO_ONETIME_PASSWO"
      "RD\020g\022\024\n\020PASSWORD_EXPIRED\020h\022\026\n\022CONCURRENT"
      "_SESSION\020i\022\016\n\nREDIRECTED\020j\"\'\n\016RestoreSes"
      "sion\022\025\n\rsession_token\030\001 \002(\t\"n\n\024RestoreSe"
      "ssionResult\022\023\n\013result_code\030\001 \002(\r\022\021\n\tbase"
      "_time\030\002 \002(\t\".\n\nResultCode\022\013\n\007SUCCESS\020\000\022\023"
      "\n\017UNKNOWN_SESSION\020e\"\036\n\006Logoff\022\024\n\014text_me"
      "ssage\030\001 \001(\t\"\232\001\n\tLoggedOff\022\025\n\rlogoff_reas"
      "on\030\001 \002(\r\022\024\n\014text_message\030\002 \001(\t\022\024\n\014redire"
      "ct_url\030\003 \001(\t\"J\n\014LogoffReason\022\016\n\nBY_REQUE"
      "ST\020\001\022\016\n\nREDIRECTED\020\002\022\n\n\006FORCED\020\003\022\016\n\nREAS"
      "SIGNED\020\004\"<\n\016PasswordChange\022\024\n\014old_passwo"
      "rd\030\001 \002(\t\022\024\n\014new_password\030\002 \002(\t\"i\n\024Passwo"
      "rdChangeResult\022\023\n\013result_code\030\001 \002(\r\022\024\n\014t"
      "ext_message\030\002 \001(\t\"&\n\nResultCode\022\013\n\007SUCCE"
      "SS\020\000\022\013\n\007FAILURE\020e\"z\n\025ObtainDemoCredentia"
      "ls\022\021\n\tclient_id\030\001 \002(\t\022\022\n\nfirst_name\030\002 \002("
      "\t\022\023\n\013second_name\030\003 \002(\t\022\016\n\006e_mail\030\004 \002(\t\022\025"
      "\n\rprivate_label\030\005 \001(\t\"\225\001\n\033ObtainDemoCred"
      "entialsResult\022\023\n\013result_code\030\001 \002(\r\022\021\n\tus"
      "er_name\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\024\n\014text_"
      "message\030\004 \001(\t\"&\n\nResultCode\022\013\n\007SUCCESS\020\000"
      "\022\013\n\007FAILURE\020e\"\262\001\n\013UserMessage\022\024\n\014message"
      "_type\030\001 \002(\r\022\016\n\006source\030\002 \002(\t\022\017\n\007subject\030\003"
      " \001(\t\022\014\n\004text\030\004 \002(\t\022\033\n\023expiration_utc_tim"
      "e\030\005 \001(\022\"A\n\013MessageType\022\022\n\016CRITICAL_ERROR"
      "\020\001\022\013\n\007WARNING\020\002\022\010\n\004INFO\020\003\022\007\n\003LOG\020\004\"0\n\027Us"
      "erSessionStateRequest\022\025\n\rsession_token\030\001"
      " \002(\t\"\267\001\n\026UserSessionStateResult\022\025\n\rsessi"
      "on_token\030\001 \002(\t\022\023\n\013result_code\030\002 \002(\r\022\017\n\007u"
      "ser_id\030\003 \001(\021\022\020\n\010username\030\004 \001(\t\"N\n\nResult"
      "Code\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020e\022\023\n\017UNKNOW"
      "N_SESSION\020f\022\021\n\rACCESS_DENIED\020g\"\322\003\n\020Contr"
      "actMetadata\022\023\n\013contract_id\030\001 \002(\r\022\027\n\017cont"
      "ract_symbol\030\002 \002(\t\022\033\n\023correct_price_scale"
      "\030\003 \002(\001\022\033\n\023display_price_scale\030\004 \002(\r\022\023\n\013d"
      "escription\030\005 \002(\t\022\r\n\005title\030\006 \002(\t\022\021\n\ttick_"
      "size\030\007 \002(\001\022\020\n\010currency\030\010 \002(\t\022\022\n\ntick_val"
      "ue\030\t \002(\001\022\020\n\010cfi_code\030\n \002(\t\022\026\n\016is_most_ac"
      "tive\030\013 \001(\010\022\031\n\021last_trading_date\030\014 \001(\022\022\031\n"
      "\021first_notice_date\030\r \001(\022\022\"\n\032underlying_c"
      "ontract_symbol\030\016 \001(\t\022\024\n\014margin_style\030\017 \001"
      "(\r\022\035\n\025instrument_group_name\030\020 \002(\t\022\030\n\020ses"
      "sion_group_id\030\021 \002(\021\"&\n\013MarginStyle\022\n\n\006FU"
      "TURE\020\001\022\013\n\007PREMIUM\020\002\"\211\003\n\022InformationReque"
      "st\022\n\n\002id\030\001 \002(\r\022\021\n\tsubscribe\030\002 \001(\010\0223\n\020acc"
      "ounts_request\030\003 \001(\0132\031.WebAPI_1.AccountsR"
      "equest\022D\n\031symbol_resolution_request\030\004 \001("
      "\0132!.WebAPI_1.SymbolResolutionRequest\022O\n\037"
      "last_statement_balances_request\030\005 \001(\0132&."
      "WebAPI_1.LastStatementBalancesRequest\022>\n"
      "\026currency_rates_request\030\006 \001(\0132\036.WebAPI_1"
      ".CurrencyRatesRequest\022H\n\033session_informa"
      "tion_request\030\007 \001(\0132#.WebAPI_1.SessionInf"
      "ormationRequest\"\252\004\n\021InformationReport\022\n\n"
      "\002id\030\001 \002(\r\022 \n\022is_report_complete\030\002 \001(\010:\004t"
      "rue\022\023\n\013status_code\030\003 \002(\r\022\024\n\014text_message"
      "\030\004 \001(\t\0221\n\017accounts_report\030\005 \001(\0132\030.WebAPI"
      "_1.AccountsReport\022B\n\030symbol_resolution_r"
      "eport\030\006 \001(\0132 .WebAPI_1.SymbolResolutionR"
      "eport\022M\n\036last_statement_balances_report\030"
      "\007 \001(\0132%.WebAPI_1.LastStatementBalancesRe"
      "port\022<\n\025currency_rates_report\030\010 \001(\0132\035.We"
      "bAPI_1.CurrencyRatesReport\022F\n\032session_in"
      "formation_report\030\t \001(\0132\".WebAPI_1.Sessio"
      "nInformationReport\"p\n\nStatusCode\022\013\n\007SUCC"
      "ESS\020\000\022\016\n\nSUBSCRIBED\020\001\022\013\n\007DROPPED\020\002\022\n\n\006UP"
      "DATE\020\003\022\020\n\014DISCONNECTED\020\004\022\013\n\007FAILURE\020e\022\r\n"
      "\tNOT_FOUND\020h\"\021\n\017AccountsRequest\"8\n\016Accou"
      "ntsReport\022&\n\tbrokerage\030\001 \003(\0132\023.WebAPI_1."
      "Brokerage\"R\n\tBrokerage\022\n\n\002id\030\001 \002(\r\022\014\n\004na"
      "me\030\002 \002(\t\022+\n\014sales_series\030\003 \003(\0132\025.WebAPI_"
      "1.SalesSeries\"O\n\013SalesSeries\022\016\n\006number\030\001"
      " \002(\t\022\014\n\004name\030\002 \002(\t\022\"\n\007account\030\003 \003(\0132\021.We"
      "bAPI_1.Account\"\225\001\n\007Account\022\022\n\naccount_id"
      "\030\001 \002(\021\022\034\n\024brokerage_account_id\030\002 \002(\t\022\014\n\004"
      "name\030\003 \002(\t\022\033\n\023last_statement_date\030\004 \002(\022\022"
      "\024\n\014is_view_only\030\005 \001(\010\022\027\n\017is_unauthorized"
      "\030\006 \001(\010\")\n\027SymbolResolutionRequest\022\016\n\006sym"
      "bol\030\001 \002(\t\"O\n\026SymbolResolutionReport\0225\n\021c"
      "ontract_metadata\030\001 \002(\0132\032.WebAPI_1.Contra"
      "ctMetadata\"\036\n\034LastStatementBalancesReque"
      "st\"A\n\033LastStatementBalancesReport\022\"\n\007bal"
      "ance\030\001 \003(\0132\021.WebAPI_1.Balance\"\341\001\n\007Balanc"
      "e\022\n\n\002id\030\001 \002(\021\022\022\n\naccount_id\030\002 \002(\021\022\026\n\016sta"
      "tement_date\030\003 \002(\022\022\020\n\010currency\030\004 \002(\t\022\017\n\007b"
      "alance\030\005 \002(\001\022\023\n\013total_value\030\006 \002(\001\022\013\n\003ote"
      "\030\007 \002(\001\022\013\n\003upl\030\010 \002(\001\022\013\n\003mvo\030\t \002(\001\022\023\n\013cash"
      "_excess\030\n \002(\001\022\022\n\ncollateral\030\013 \002(\001\022\026\n\016ini"
      "tial_margin\030\014 \002(\001\"\026\n\024CurrencyRatesReques"
      "t\"Y\n\023CurrencyRatesReport\022B\n\030brokerage_cu"
      "rrency_rates\030\001 \003(\0132 .WebAPI_1.BrokerageC"
      "urrencyRates\"\216\001\n\026BrokerageCurrencyRates\022"
      "\024\n\014brokerage_id\030\001 \002(\r\022\027\n\017master_currency"
      "\030\002 \002(\t\022\026\n\016statement_date\030\003 \002(\022\022-\n\rcurren"
      "cy_rate\030\004 \003(\0132\026.WebAPI_1.CurrencyRate\".\n"
      "\014CurrencyRate\022\020\n\010currency\030\002 \002(\t\022\014\n\004rate\030"
      "\003 \002(\001\"a\n\031SessionInformationRequest\022\030\n\020se"
      "ssion_group_id\030\001 \002(\021\022\025\n\rfrom_utc_time\030\002 "
      "\001(\022\022\023\n\013to_utc_time\030\003 \001(\022\"a\n\030SessionInfor"
      "mationReport\022\030\n\020session_group_id\030\001 \002(\021\022+"
      "\n\014session_info\030\002 \003(\0132\025.WebAPI_1.SessionI"
      "nfo\"\315\001\n\013SessionInfo\022\022\n\nsession_id\030\001 \002(\r\022"
      "\025\n\rfrom_utc_time\030\002 \001(\022\022\023\n\013to_utc_time\030\003 "
      "\001(\022\022\014\n\004name\030\004 \002(\t\022)\n\013session_day\030\005 \003(\0132\024"
      ".WebAPI_1.SessionDay\0221\n\017session_holiday\030"
      "\006 \003(\0132\030.WebAPI_1.SessionHoliday\022\022\n\nis_pr"
      "imary\030\007 \001(\010\"\225\001\n\nSessionDay\022(\n\013day_of_wee"
      "k\030\001 \003(\0162\023.WebAPI_1.DayOfWeek\022\027\n\017pre_open"
      "_offset\030\002 \001(\022\022\023\n\013open_offset\030\003 \001(\022\022\024\n\014cl"
      "ose_offset\030\004 \001(\022\022\031\n\021post_close_offset\030\005 "
      "\001(\022\"<\n\016SessionHoliday\022\024\n\014holiday_date\030\001 "
      "\002(\022\022\024\n\014holiday_name\030\002 \002(\t\"\206\003\n\021TradeSubsc"
      "ription\022\n\n\002id\030\001 \002(\r\022\032\n\022subscription_scop"
      "e\030\002 \003(\r\022\030\n\020publication_type\030\003 \001(\r\022\022\n\nacc"
      "ount_id\030\004 \001(\r\022\033\n\023sales_series_number\030\005 \001"
      "(\t\022\024\n\014brokerage_id\030\006 \001(\r\022\021\n\tsubscribe\030\007 "
      "\002(\010\022\"\n\032last_order_update_utc_time\030\010 \001(\022\022"
      "\034\n\024skip_orders_snapshot\030\t \001(\010\">\n\021Subscri"
      "ptionScope\022\n\n\006ORDERS\020\001\022\r\n\tPOSITIONS\020\002\022\016\n"
      "\nCOLLATERAL\020\003\"S\n\017PublicationType\022\013\n\007ACCO"
      "UNT\020\001\022\020\n\014SALES_SERIES\020\002\022\r\n\tBROKERAGE\020\003\022\022"
      "\n\016ALL_AUTHORIZED\020\004\"\212\001\n\027TradeSubscription"
      "Status\022\n\n\002id\030\001 \002(\r\022\023\n\013status_code\030\002 \002(\r\022"
      "\024\n\014text_message\030\003 \001(\t\"8\n\nStatusCode\022\013\n\007S"
      "UCCESS\020\000\022\020\n\014DISCONNECTED\020\001\022\013\n\007FAILURE\020e\""
      "N\n\027TradeSnapshotCompletion\022\027\n\017subscripti"
      "on_id\030\001 \002(\r\022\032\n\022subscription_scope\030\002 \003(\r\""
      "\257\002\n\014OrderRequest\022\022\n\nrequest_id\030\001 \002(\r\022%\n\t"
      "new_order\030\002 \001(\0132\022.WebAPI_1.NewOrder\022+\n\014m"
      "odify_order\030\003 \001(\0132\025.WebAPI_1.ModifyOrder"
      "\022+\n\014cancel_order\030\004 \001(\0132\025.WebAPI_1.Cancel"
      "Order\022/\n\016activate_order\030\005 \001(\0132\027.WebAPI_1"
      ".ActivateOrder\022>\n\026modify_user_attributes"
      "\030\006 \001(\0132\036.WebAPI_1.ModifyUserAttributes\022\031"
      "\n\021on_behalf_of_user\030\007 \001(\t\"S\n\022OrderReques"
      "tReject\022\022\n\nrequest_id\030\001 \002(\r\022\023\n\013reject_co"
      "de\030\002 \002(\r\022\024\n\014text_message\030\003 \001(\t\";\n\010NewOrd"
      "er\022\036\n\005order\030\001 \002(\0132\017.WebAPI_1.Order\022\017\n\007su"
      "spend\030\002 \001(\010\"\334\006\n\005Order\022\022\n\naccount_id\030\001 \002("
      "\021\022\025\n\rwhen_utc_time\030\002 \002(\022\022\023\n\013contract_id\030"
      "\003 \002(\r\022\023\n\013cl_order_id\030\004 \002(\t\022\022\n\norder_type"
      "\030\005 \002(\r\022\030\n\020exec_instruction\030\006 \003(\r\022\020\n\010dura"
      "tion\030\007 \002(\r\022\026\n\016good_thru_date\030\010 \001(\022\022\014\n\004si"
      "de\030\t \002(\r\022\023\n\013limit_price\030\n \001(\021\022\022\n\nstop_pr"
      "ice\030\013 \001(\021\022\013\n\003qty\030\014 \002(\r\022\023\n\013visible_qty\030\r "
      "\001(\r\022\027\n\017min_visible_qty\030\016 \001(\r\022\021\n\tis_manua"
      "l\030\017 \002(\010\022\020\n\010is_close\030\020 \001(\010\022\025\n\ris_aggressi"
      "ve\030\021 \001(\010\022\024\n\014trail_offset\030\022 \001(\021\022\024\n\014traili"
      "ng_peg\030\023 \001(\r\022\023\n\013trigger_qty\030\024 \001(\r\022\033\n\023act"
      "ivation_utc_time\030\025 \001(\022\022\033\n\023suspension_utc"
      "_time\030\026 \001(\022\022/\n\016user_attribute\030\027 \003(\0132\027.We"
      "bAPI_1.UserAttribute\022\032\n\022good_thru_utc_ti"
      "me\030\030 \001(\022\"\031\n\004Side\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002\"/\n\tO"
      "rderType\022\007\n\003MKT\020\001\022\007\n\003LMT\020\002\022\007\n\003STP\020\003\022\007\n\003S"
      "TL\020\004\"X\n\017ExecInstruction\022\007\n\003AON\020\001\022\013\n\007ICEB"
      "ERG\020\002\022\006\n\002QT\020\003\022\t\n\005TRAIL\020\004\022\n\n\006FUNARI\020\005\022\007\n\003"
      "MIT\020\006\022\007\n\003MLM\020\007\"R\n\010Duration\022\007\n\003DAY\020\001\022\007\n\003G"
      "TC\020\002\022\007\n\003GTD\020\003\022\007\n\003GTT\020\004\022\007\n\003FAK\020\005\022\007\n\003FOK\020\006"
      "\022\007\n\003ATO\020\007\022\007\n\003ATC\020\010\"6\n\013TrailingPeg\022\013\n\007BES"
      "TBID\020\001\022\013\n\007BESTASK\020\002\022\r\n\tLASTTRADE\020\003\"<\n\rUs"
      "erAttribute\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \001(\t"
      "\022\016\n\006delete\030\003 \001(\010\"\241\003\n\013ModifyOrder\022\020\n\010orde"
      "r_id\030\001 \002(\t\022\022\n\naccount_id\030\002 \002(\021\022\030\n\020orig_c"
      "l_order_id\030\003 \002(\t\022\023\n\013cl_order_id\030\004 \002(\t\022\025\n"
      "\rwhen_utc_time\030\005 \002(\022\022\013\n\003qty\030\006 \001(\r\022\023\n\013vis"
      "ible_qty\030\007 \001(\r\022\027\n\017min_visible_qty\030\010 \001(\r\022"
      "\023\n\013limit_price\030\t \001(\021\022\022\n\nstop_price\030\n \001(\021"
      "\022\033\n\023activation_utc_time\030\013 \001(\022\022\036\n\026remove_"
      "activation_time\030\014 \001(\010\022\033\n\023suspension_utc_"
      "time\030\r \001(\022\022\"\n\032remove_suspension_utc_time"
      "\030\016 \001(\010\022\020\n\010duration\030\017 \001(\r\022\026\n\016good_thru_da"
      "te\030\020 \001(\022\022\032\n\022good_thru_utc_time\030\021 \001(\022\"y\n\013"
      "CancelOrder\022\020\n\010order_id\030\001 \002(\t\022\022\n\naccount"
      "_id\030\002 \002(\021\022\030\n\020orig_cl_order_id\030\003 \002(\t\022\023\n\013c"
      "l_order_id\030\004 \002(\t\022\025\n\rwhen_utc_time\030\005 \002(\022\""
      "{\n\rActivateOrder\022\020\n\010order_id\030\001 \002(\t\022\022\n\nac"
      "count_id\030\002 \002(\021\022\030\n\020orig_cl_order_id\030\003 \002(\t"
      "\022\023\n\013cl_order_id\030\004 \002(\t\022\025\n\rwhen_utc_time\030\005"
      " \002(\022\"s\n\024ModifyUserAttributes\022\026\n\016chain_or"
      "der_id\030\001 \002(\t\022\022\n\naccount_id\030\002 \002(\021\022/\n\016user"
      "_attribute\030\003 \003(\0132\027.WebAPI_1.UserAttribut"
      "e\"\324\005\n\013OrderStatus\022\027\n\017subscription_id\030\001 \003"
      "(\r\022\023\n\013is_snapshot\030\002 \001(\010\022\016\n\006status\030\003 \002(\r\022"
      "\020\n\010order_id\030\004 \002(\t\022\026\n\016chain_order_id\030\005 \002("
      "\t\022\025\n\rexec_order_id\030\006 \001(\t\022\027\n\017status_utc_t"
      "ime\030\007 \002(\022\022\033\n\023submission_utc_time\030\010 \002(\022\022\020"
      "\n\010fill_qty\030\t \002(\r\022\020\n\010fill_cnt\030\n \002(\r\022\026\n\016av"
      "g_fill_price\030\013 \002(\021\022\032\n\022active_at_utc_time"
      "\030\014 \001(\022\022\025\n\rremaining_qty\030\r \002(\r\022\036\n\005order\030\016"
      " \001(\0132\017.WebAPI_1.Order\0227\n\022transaction_sta"
      "tus\030\017 \003(\0132\033.WebAPI_1.TransactionStatus\022\027"
      "\n\017entered_by_user\030\020 \002(\t\022\034\n\024first_stateme"
      "nt_date\030\021 \002(\022\022\033\n\023last_statement_date\030\022 \001"
      "(\022\0225\n\021contract_metadata\030\023 \003(\0132\032.WebAPI_1"
      ".ContractMetadata\022\022\n\naccount_id\030\024 \002(\021\"\250\001"
      "\n\006Status\022\016\n\nIN_TRANSIT\020\001\022\014\n\010REJECTED\020\002\022\013"
      "\n\007WORKING\020\003\022\013\n\007EXPIRED\020\004\022\r\n\tIN_CANCEL\020\005\022"
      "\r\n\tIN_MODIFY\020\006\022\r\n\tCANCELLED\020\007\022\n\n\006FILLED\020"
      "\010\022\r\n\tSUSPENDED\020\t\022\020\n\014DISCONNECTED\020\n\022\014\n\010AC"
      "TIVEAT\020\013\"\214\t\n\021TransactionStatus\022\016\n\006status"
      "\030\001 \002(\r\022\020\n\010trans_id\030\002 \002(\004\022\026\n\016trans_utc_ti"
      "me\030\003 \002(\022\022\024\n\014ref_trans_id\030\004 \001(\004\022\030\n\020orig_c"
      "l_order_id\030\005 \001(\t\022\023\n\013cl_order_id\030\006 \002(\t\022\020\n"
      "\010fill_qty\030\007 \001(\r\022\022\n\nfill_price\030\010 \001(\021\022\036\n\005t"
      "rade\030\t \003(\0132\017.WebAPI_1.Trade\022\026\n\016prev_orde"
      "r_qty\030\n \001(\r\022\021\n\torder_qty\030\013 \001(\r\022\030\n\020prev_l"
      "imit_price\030\014 \001(\021\022\023\n\013limit_price\030\r \001(\021\022\027\n"
      "\017prev_stop_price\030\016 \001(\021\022\022\n\nstop_price\030\017 \001"
      "(\021\022\030\n\020prev_visible_qty\030\020 \001(\r\022\023\n\013visible_"
      "qty\030\021 \001(\r\022\034\n\024prev_min_visible_qty\030\022 \001(\r\022"
      "\027\n\017min_visible_qty\030\023 \001(\r\022\025\n\rprev_fill_qt"
      "y\030\024 \001(\r\022\027\n\017prev_fill_price\030\025 \001(\021\022\027\n\017prev"
      "_order_type\030\026 \001(\r\022\022\n\norder_type\030\027 \001(\r\022\035\n"
      "\025prev_exec_instruction\030\030 \003(\r\022\030\n\020exec_ins"
      "truction\030\031 \003(\r\022\025\n\rprev_duration\030\032 \001(\r\022\020\n"
      "\010duration\030\033 \001(\r\022\033\n\023prev_good_thru_date\030\034"
      " \001(\022\022\026\n\016good_thru_date\030\035 \001(\022\022\023\n\013reject_c"
      "ode\030\036 \001(\r\022\031\n\021fill_counterparty\030\037 \001(\t\022\031\n\021"
      "route_cl_order_id\030  \001(\t\022\024\n\014text_message\030"
      "! \001(\t\022\037\n\027prev_good_thru_utc_time\030\" \001(\022\022\032"
      "\n\022good_thru_utc_time\030# \001(\022\"\262\002\n\006Status\022\016\n"
      "\nIN_TRANSIT\020\001\022\014\n\010REJECTED\020\002\022\r\n\tACK_PLACE"
      "\020\003\022\013\n\007EXPIRED\020\004\022\r\n\tIN_CANCEL\020\005\022\016\n\nACK_CA"
      "NCEL\020\006\022\021\n\rREJECT_CANCEL\020\007\022\r\n\tIN_MODIFY\020\010"
      "\022\016\n\nACK_MODIFY\020\t\022\021\n\rREJECT_MODIFY\020\n\022\010\n\004F"
      "ILL\020\013\022\013\n\007SUSPEND\020\014\022\020\n\014FILL_CORRECT\020\r\022\017\n\013"
      "FILL_CANCEL\020\016\022\r\n\tFILL_BUST\020\017\022\014\n\010ACTIVEAT"
      "\020\020\022\016\n\nDISCONNECT\020\021\022\027\n\023SYNTHETIC_ACTIVATE"
      "D\020\022\022\n\n\006UPDATE\020\023\"\317\001\n\005Trade\022\020\n\010trade_id\030\001 "
      "\002(\t\022\023\n\013contract_id\030\002 \002(\r\022\026\n\016statement_da"
      "te\030\003 \002(\022\022\026\n\016trade_utc_time\030\004 \002(\022\022\022\n\ntrad"
      "e_date\030\005 \002(\022\022\r\n\005price\030\006 \002(\021\022\014\n\004side\030\007 \002("
      "\r\022\013\n\003qty\030\010 \002(\r\022\032\n\022trade_counterparty\030\t \001"
      "(\t\022\025\n\ris_aggressive\030\n \001(\010\"\260\002\n\016PositionSt"
      "atus\022\027\n\017subscription_id\030\001 \003(\r\022\023\n\013is_snap"
      "shot\030\002 \001(\010\022\022\n\naccount_id\030\003 \002(\021\022\023\n\013contra"
      "ct_id\030\004 \002(\r\022\036\n\026is_short_open_position\030\005 "
      "\002(\010\022-\n\ropen_position\030\006 \003(\0132\026.WebAPI_1.Op"
      "enPosition\022A\n\030purchase_and_sales_group\030\007"
      " \003(\0132\037.WebAPI_1.PurchaseAndSalesGroup\0225\n"
      "\021contract_metadata\030\010 \001(\0132\032.WebAPI_1.Cont"
      "ractMetadata\"z\n\014OpenPosition\022\n\n\002id\030\001 \002(\021"
      "\022\013\n\003qty\030\002 \002(\r\022\r\n\005price\030\003 \002(\001\022\022\n\ntrade_da"
      "te\030\004 \002(\022\022\026\n\016statement_date\030\005 \002(\022\022\026\n\016trad"
      "e_utc_time\030\006 \001(\022\"p\n\025PurchaseAndSalesGrou"
      "p\022\n\n\002id\030\001 \002(\021\022\034\n\024realized_profit_loss\030\002 "
      "\002(\001\022-\n\rmatched_trade\030\003 \003(\0132\026.WebAPI_1.Ma"
      "tchedTrade\"\200\001\n\014MatchedTrade\022\013\n\003qty\030\001 \002(\r"
      "\022\020\n\010is_short\030\002 \001(\010\022\r\n\005price\030\003 \002(\001\022\022\n\ntra"
      "de_date\030\004 \002(\022\022\026\n\016statement_date\030\005 \002(\022\022\026\n"
      "\016trade_utc_time\030\006 \001(\022\"\226\001\n\020CollateralStat"
      "us\022\027\n\017subscription_id\030\001 \003(\r\022\023\n\013is_snapsh"
      "ot\030\002 \001(\010\022\022\n\naccount_id\030\003 \002(\021\022\020\n\010currency"
      "\030\004 \002(\t\022\024\n\014total_margin\030\005 \002(\001\022\030\n\020purchasi"
      "ng_power\030\006 \002(\001\"\227\001\n\026MarketDataSubscriptio"
      "n\022\023\n\013contract_id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"Y\n"
      "\005Level\022\010\n\004NONE\020\000\022\n\n\006TRADES\020\001\022\016\n\nTRADES_B"
      "BA\020\002\022\026\n\022TRADES_BBA_VOLUMES\020\003\022\022\n\016TRADES_B"
      "BA_DOM\020\004\"\333\001\n\034MarketDataSubscriptionStatu"
      "s\022\023\n\013contract_id\030\001 \002(\r\022\023\n\013status_code\030\002 "
      "\002(\r\022\r\n\005level\030\003 \002(\r\022\024\n\014text_message\030\004 \001(\t"
      "\"l\n\nStatusCode\022\013\n\007SUCCESS\020\000\022\020\n\014DISCONNEC"
      "TED\020\001\022\013\n\007FAILURE\020e\022\022\n\016INVALID_PARAMS\020f\022\021"
      "\n\rACCESS_DENIED\020g\022\013\n\007DELETED\020h\"\261\001\n\022RealT"
      "imeMarketData\022\023\n\013contract_id\030\001 \002(\r\022\036\n\005qu"
      "ote\030\002 \003(\0132\017.WebAPI_1.Quote\022\023\n\013is_snapsho"
      "t\030\003 \001(\010\022\030\n\020collapsing_level\030\004 \001(\r\0227\n\017sna"
      "pshot_values\030\005 \001(\0132\036.WebAPI_1.MarketSnap"
      "shotValues\"\373\001\n\005Quote\022\014\n\004type\030\001 \002(\r\022\026\n\016qu"
      "ote_utc_time\030\002 \001(\022\022\r\n\005price\030\003 \002(\021\022\016\n\006vol"
      "ume\030\004 \001(\004\022\036\n\026session_ohlc_indicator\030\005 \003("
      "\r\"M\n\004Type\022\t\n\005TRADE\020\000\022\013\n\007BESTBID\020\001\022\013\n\007BES"
      "TASK\020\002\022\007\n\003BID\020\003\022\007\n\003ASK\020\004\022\016\n\nSETTLEMENT\020\005"
      "\">\n\024SessionOhlcIndicator\022\010\n\004OPEN\020\001\022\010\n\004HI"
      "GH\020\002\022\007\n\003LOW\020\003\022\t\n\005CLOSE\020\004\"\263\001\n\024MarketSnaps"
      "hotValues\022\022\n\nopen_price\030\001 \001(\021\022\022\n\nhigh_pr"
      "ice\030\002 \001(\021\022\021\n\tlow_price\030\003 \001(\021\022\023\n\013close_pr"
      "ice\030\004 \001(\021\022\034\n\024yesterday_settlement\030\005 \001(\021\022"
      "\024\n\014total_volume\030\006 \001(\r\022\027\n\017yesterday_close"
      "\030\007 \001(\021\"Y\n\030ReadUserAttributeRequest\022\022\n\nre"
      "quest_id\030\001 \002(\r\022\026\n\016attribute_name\030\002 \003(\t\022\021"
      "\n\tis_regexp\030\003 \001(\010\"\261\001\n\027ReadUserAttributeR"
      "esult\022\022\n\nrequest_id\030\001 \002(\r\022\023\n\013result_code"
      "\030\002 \002(\r\022/\n\016user_attribute\030\003 \003(\0132\027.WebAPI_"
      "1.UserAttribute\022\024\n\014text_message\030\004 \001(\t\"&\n"
      "\nResultCode\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020e\"a\n"
      "\032ModifyUserAttributeRequest\022\022\n\nrequest_i"
      "d\030\001 \002(\r\022/\n\016user_attribute\030\002 \003(\0132\027.WebAPI"
      "_1.UserAttribute\"\202\001\n\031ModifyUserAttribute"
      "Result\022\022\n\nrequest_id\030\001 \002(\r\022\023\n\013result_cod"
      "e\030\002 \002(\r\022\024\n\014text_message\030\003 \001(\t\"&\n\nResultC"
      "ode\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020e\"\225\001\n\026TimeAn"
      "dSalesParameters\022\023\n\013contract_id\030\001 \002(\r\022\r\n"
      "\005level\030\002 \002(\r\022\025\n\rfrom_utc_time\030\003 \002(\022\022\023\n\013t"
      "o_utc_time\030\004 \001(\022\"+\n\005Level\022\n\n\006TRADES\020\001\022\026\n"
      "\022TRADES_BBA_VOLUMES\020\003\"\246\001\n\023TimeAndSalesRe"
      "quest\022\022\n\nrequest_id\030\001 \002(\r\022C\n\031time_and_sa"
      "les_parameters\030\002 \001(\0132 .WebAPI_1.TimeAndS"
      "alesParameters\022\024\n\014request_type\030\003 \001(\r\" \n\013"
      "RequestType\022\007\n\003GET\020\001\022\010\n\004DROP\020\003\"\301\002\n\022TimeA"
      "ndSalesReport\022\022\n\nrequest_id\030\001 \002(\r\022\023\n\013res"
      "ult_code\030\002 \002(\r\022\036\n\005quote\030\003 \003(\0132\017.WebAPI_1"
      ".Quote\022\026\n\016up_to_utc_time\030\004 \001(\003\022 \n\022is_rep"
      "ort_complete\030\005 \001(\010:\004true\022\024\n\014text_message"
      "\030\006 \001(\t\"\221\001\n\nResultCode\022\013\n\007SUCCESS\020\000\022\013\n\007DR"
      "OPPED\020\002\022\020\n\014DISCONNECTED\020\004\022\r\n\tTRUNCATED\020\005"
      "\022\013\n\007FAILURE\020e\022\021\n\rACCESS_DENIED\020g\022\r\n\tNOT_"
      "FOUND\020h\022\031\n\025OUTSIDE_ALLOWED_RANGE\020i\"\340\001\n\021T"
      "imeBarParameters\022\023\n\013contract_id\030\001 \002(\r\022\020\n"
      "\010bar_unit\030\002 \002(\r\022\024\n\014units_number\030\003 \001(\r\022\025\n"
      "\rfrom_utc_time\030\004 \002(\022\022\023\n\013to_utc_time\030\005 \001("
      "\022\"b\n\007BarUnit\022\010\n\004YEAR\020\001\022\017\n\013SEMI_ANNUAL\020\002\022"
      "\013\n\007QUARTER\020\003\022\t\n\005MONTH\020\004\022\010\n\004WEEK\020\005\022\007\n\003DAY"
      "\020\006\022\010\n\004HOUR\020\007\022\007\n\003MIN\020\010\"\245\001\n\016TimeBarRequest"
      "\022\022\n\nrequest_id\030\001 \002(\r\0228\n\023time_bar_paramet"
      "ers\030\002 \001(\0132\033.WebAPI_1.TimeBarParameters\022\024"
      "\n\014request_type\030\003 \001(\r\"/\n\013RequestType\022\007\n\003G"
      "ET\020\001\022\r\n\tSUBSCRIBE\020\002\022\010\n\004DROP\020\003\"\345\001\n\007TimeBa"
      "r\022\024\n\014bar_utc_time\030\001 \002(\022\022\022\n\nopen_price\030\002 "
      "\001(\021\022\022\n\nhigh_price\030\003 \001(\021\022\021\n\tlow_price\030\004 \001"
      "(\021\022\023\n\013close_price\030\005 \001(\021\022\016\n\006volume\030\006 \001(\004\022"
      "\022\n\ntrade_date\030\007 \001(\022\022\030\n\020commodity_volume\030"
      "\010 \001(\004\022\025\n\ropen_interest\030\t \001(\r\022\037\n\027commodit"
      "y_open_interest\030\n \001(\r\"\335\002\n\rTimeBarReport\022"
      "\022\n\nrequest_id\030\001 \002(\r\022\023\n\013status_code\030\002 \002(\r"
      "\022#\n\010time_bar\030\003 \003(\0132\021.WebAPI_1.TimeBar\022\026\n"
      "\016up_to_utc_time\030\004 \001(\003\022 \n\022is_report_compl"
      "ete\030\005 \001(\010:\004true\022\024\n\014text_message\030\006 \001(\t\"\255\001"
      "\n\nStatusCode\022\013\n\007SUCCESS\020\000\022\016\n\nSUBSCRIBED\020"
      "\001\022\013\n\007DROPPED\020\002\022\n\n\006UPDATE\020\003\022\020\n\014DISCONNECT"
      "ED\020\004\022\r\n\tTRUNCATED\020\005\022\013\n\007FAILURE\020e\022\021\n\rACCE"
      "SS_DENIED\020g\022\r\n\tNOT_FOUND\020h\022\031\n\025OUTSIDE_AL"
      "LOWED_RANGE\020i*2\n\024ProtocolVersionMajor\022\032\n"
      "\026PROTOCOL_VERSION_MAJOR\020\001*2\n\024ProtocolVer"
      "sionMinor\022\032\n\026PROTOCOL_VERSION_MINOR\020\000*g\n"
      "\tDayOfWeek\022\n\n\006Sunday\020\000\022\n\n\006Monday\020\001\022\013\n\007Tu"
      "esday\020\002\022\r\n\tWednesday\020\003\022\014\n\010Thursday\020\004\022\n\n\006"
      "Friday\020\005\022\014\n\010Saturday\020\006"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 16182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "webapi_1.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_webapi_5f1_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_webapi_5f1_2eproto_once_);
void protobuf_AddDesc_webapi_5f1_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_webapi_5f1_2eproto_once_,
                 &protobuf_AddDesc_webapi_5f1_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_webapi_5f1_2eproto {
  StaticDescriptorInitializer_webapi_5f1_2eproto() {
    protobuf_AddDesc_webapi_5f1_2eproto();
  }
} static_descriptor_initializer_webapi_5f1_2eproto_;
const ::google::protobuf::EnumDescriptor* RealTimeCollapsing_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[0];
}
bool RealTimeCollapsing_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RealTimeCollapsing_Level RealTimeCollapsing::NONE;
const RealTimeCollapsing_Level RealTimeCollapsing::DOM;
const RealTimeCollapsing_Level RealTimeCollapsing::DOM_BBA;
const RealTimeCollapsing_Level RealTimeCollapsing::DOM_BBA_TRADES;
const RealTimeCollapsing_Level RealTimeCollapsing::Level_MIN;
const RealTimeCollapsing_Level RealTimeCollapsing::Level_MAX;
const int RealTimeCollapsing::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LogonResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[1];
}
bool LogonResult_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 103:
    case 104:
    case 105:
    case 106:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogonResult_ResultCode LogonResult::SUCCESS;
const LogonResult_ResultCode LogonResult::FAILURE;
const LogonResult_ResultCode LogonResult::NO_ONETIME_PASSWORD;
const LogonResult_ResultCode LogonResult::PASSWORD_EXPIRED;
const LogonResult_ResultCode LogonResult::CONCURRENT_SESSION;
const LogonResult_ResultCode LogonResult::REDIRECTED;
const LogonResult_ResultCode LogonResult::ResultCode_MIN;
const LogonResult_ResultCode LogonResult::ResultCode_MAX;
const int LogonResult::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RestoreSessionResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[2];
}
bool RestoreSessionResult_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RestoreSessionResult_ResultCode RestoreSessionResult::SUCCESS;
const RestoreSessionResult_ResultCode RestoreSessionResult::UNKNOWN_SESSION;
const RestoreSessionResult_ResultCode RestoreSessionResult::ResultCode_MIN;
const RestoreSessionResult_ResultCode RestoreSessionResult::ResultCode_MAX;
const int RestoreSessionResult::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LoggedOff_LogoffReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[3];
}
bool LoggedOff_LogoffReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoggedOff_LogoffReason LoggedOff::BY_REQUEST;
const LoggedOff_LogoffReason LoggedOff::REDIRECTED;
const LoggedOff_LogoffReason LoggedOff::FORCED;
const LoggedOff_LogoffReason LoggedOff::REASSIGNED;
const LoggedOff_LogoffReason LoggedOff::LogoffReason_MIN;
const LoggedOff_LogoffReason LoggedOff::LogoffReason_MAX;
const int LoggedOff::LogoffReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PasswordChangeResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[4];
}
bool PasswordChangeResult_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PasswordChangeResult_ResultCode PasswordChangeResult::SUCCESS;
const PasswordChangeResult_ResultCode PasswordChangeResult::FAILURE;
const PasswordChangeResult_ResultCode PasswordChangeResult::ResultCode_MIN;
const PasswordChangeResult_ResultCode PasswordChangeResult::ResultCode_MAX;
const int PasswordChangeResult::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObtainDemoCredentialsResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[5];
}
bool ObtainDemoCredentialsResult_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObtainDemoCredentialsResult_ResultCode ObtainDemoCredentialsResult::SUCCESS;
const ObtainDemoCredentialsResult_ResultCode ObtainDemoCredentialsResult::FAILURE;
const ObtainDemoCredentialsResult_ResultCode ObtainDemoCredentialsResult::ResultCode_MIN;
const ObtainDemoCredentialsResult_ResultCode ObtainDemoCredentialsResult::ResultCode_MAX;
const int ObtainDemoCredentialsResult::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[6];
}
bool UserMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserMessage_MessageType UserMessage::CRITICAL_ERROR;
const UserMessage_MessageType UserMessage::WARNING;
const UserMessage_MessageType UserMessage::INFO;
const UserMessage_MessageType UserMessage::LOG;
const UserMessage_MessageType UserMessage::MessageType_MIN;
const UserMessage_MessageType UserMessage::MessageType_MAX;
const int UserMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserSessionStateResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[7];
}
bool UserSessionStateResult_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserSessionStateResult_ResultCode UserSessionStateResult::SUCCESS;
const UserSessionStateResult_ResultCode UserSessionStateResult::FAILURE;
const UserSessionStateResult_ResultCode UserSessionStateResult::UNKNOWN_SESSION;
const UserSessionStateResult_ResultCode UserSessionStateResult::ACCESS_DENIED;
const UserSessionStateResult_ResultCode UserSessionStateResult::ResultCode_MIN;
const UserSessionStateResult_ResultCode UserSessionStateResult::ResultCode_MAX;
const int UserSessionStateResult::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ContractMetadata_MarginStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[8];
}
bool ContractMetadata_MarginStyle_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContractMetadata_MarginStyle ContractMetadata::FUTURE;
const ContractMetadata_MarginStyle ContractMetadata::PREMIUM;
const ContractMetadata_MarginStyle ContractMetadata::MarginStyle_MIN;
const ContractMetadata_MarginStyle ContractMetadata::MarginStyle_MAX;
const int ContractMetadata::MarginStyle_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InformationReport_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[9];
}
bool InformationReport_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 104:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InformationReport_StatusCode InformationReport::SUCCESS;
const InformationReport_StatusCode InformationReport::SUBSCRIBED;
const InformationReport_StatusCode InformationReport::DROPPED;
const InformationReport_StatusCode InformationReport::UPDATE;
const InformationReport_StatusCode InformationReport::DISCONNECTED;
const InformationReport_StatusCode InformationReport::FAILURE;
const InformationReport_StatusCode InformationReport::NOT_FOUND;
const InformationReport_StatusCode InformationReport::StatusCode_MIN;
const InformationReport_StatusCode InformationReport::StatusCode_MAX;
const int InformationReport::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TradeSubscription_SubscriptionScope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[10];
}
bool TradeSubscription_SubscriptionScope_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TradeSubscription_SubscriptionScope TradeSubscription::ORDERS;
const TradeSubscription_SubscriptionScope TradeSubscription::POSITIONS;
const TradeSubscription_SubscriptionScope TradeSubscription::COLLATERAL;
const TradeSubscription_SubscriptionScope TradeSubscription::SubscriptionScope_MIN;
const TradeSubscription_SubscriptionScope TradeSubscription::SubscriptionScope_MAX;
const int TradeSubscription::SubscriptionScope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TradeSubscription_PublicationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[11];
}
bool TradeSubscription_PublicationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TradeSubscription_PublicationType TradeSubscription::ACCOUNT;
const TradeSubscription_PublicationType TradeSubscription::SALES_SERIES;
const TradeSubscription_PublicationType TradeSubscription::BROKERAGE;
const TradeSubscription_PublicationType TradeSubscription::ALL_AUTHORIZED;
const TradeSubscription_PublicationType TradeSubscription::PublicationType_MIN;
const TradeSubscription_PublicationType TradeSubscription::PublicationType_MAX;
const int TradeSubscription::PublicationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TradeSubscriptionStatus_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[12];
}
bool TradeSubscriptionStatus_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TradeSubscriptionStatus_StatusCode TradeSubscriptionStatus::SUCCESS;
const TradeSubscriptionStatus_StatusCode TradeSubscriptionStatus::DISCONNECTED;
const TradeSubscriptionStatus_StatusCode TradeSubscriptionStatus::FAILURE;
const TradeSubscriptionStatus_StatusCode TradeSubscriptionStatus::StatusCode_MIN;
const TradeSubscriptionStatus_StatusCode TradeSubscriptionStatus::StatusCode_MAX;
const int TradeSubscriptionStatus::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Order_Side_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[13];
}
bool Order_Side_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_Side Order::BUY;
const Order_Side Order::SELL;
const Order_Side Order::Side_MIN;
const Order_Side Order::Side_MAX;
const int Order::Side_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Order_OrderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[14];
}
bool Order_OrderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_OrderType Order::MKT;
const Order_OrderType Order::LMT;
const Order_OrderType Order::STP;
const Order_OrderType Order::STL;
const Order_OrderType Order::OrderType_MIN;
const Order_OrderType Order::OrderType_MAX;
const int Order::OrderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Order_ExecInstruction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[15];
}
bool Order_ExecInstruction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_ExecInstruction Order::AON;
const Order_ExecInstruction Order::ICEBERG;
const Order_ExecInstruction Order::QT;
const Order_ExecInstruction Order::TRAIL;
const Order_ExecInstruction Order::FUNARI;
const Order_ExecInstruction Order::MIT;
const Order_ExecInstruction Order::MLM;
const Order_ExecInstruction Order::ExecInstruction_MIN;
const Order_ExecInstruction Order::ExecInstruction_MAX;
const int Order::ExecInstruction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Order_Duration_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[16];
}
bool Order_Duration_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_Duration Order::DAY;
const Order_Duration Order::GTC;
const Order_Duration Order::GTD;
const Order_Duration Order::GTT;
const Order_Duration Order::FAK;
const Order_Duration Order::FOK;
const Order_Duration Order::ATO;
const Order_Duration Order::ATC;
const Order_Duration Order::Duration_MIN;
const Order_Duration Order::Duration_MAX;
const int Order::Duration_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Order_TrailingPeg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[17];
}
bool Order_TrailingPeg_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_TrailingPeg Order::BESTBID;
const Order_TrailingPeg Order::BESTASK;
const Order_TrailingPeg Order::LASTTRADE;
const Order_TrailingPeg Order::TrailingPeg_MIN;
const Order_TrailingPeg Order::TrailingPeg_MAX;
const int Order::TrailingPeg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OrderStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[18];
}
bool OrderStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OrderStatus_Status OrderStatus::IN_TRANSIT;
const OrderStatus_Status OrderStatus::REJECTED;
const OrderStatus_Status OrderStatus::WORKING;
const OrderStatus_Status OrderStatus::EXPIRED;
const OrderStatus_Status OrderStatus::IN_CANCEL;
const OrderStatus_Status OrderStatus::IN_MODIFY;
const OrderStatus_Status OrderStatus::CANCELLED;
const OrderStatus_Status OrderStatus::FILLED;
const OrderStatus_Status OrderStatus::SUSPENDED;
const OrderStatus_Status OrderStatus::DISCONNECTED;
const OrderStatus_Status OrderStatus::ACTIVEAT;
const OrderStatus_Status OrderStatus::Status_MIN;
const OrderStatus_Status OrderStatus::Status_MAX;
const int OrderStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TransactionStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[19];
}
bool TransactionStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransactionStatus_Status TransactionStatus::IN_TRANSIT;
const TransactionStatus_Status TransactionStatus::REJECTED;
const TransactionStatus_Status TransactionStatus::ACK_PLACE;
const TransactionStatus_Status TransactionStatus::EXPIRED;
const TransactionStatus_Status TransactionStatus::IN_CANCEL;
const TransactionStatus_Status TransactionStatus::ACK_CANCEL;
const TransactionStatus_Status TransactionStatus::REJECT_CANCEL;
const TransactionStatus_Status TransactionStatus::IN_MODIFY;
const TransactionStatus_Status TransactionStatus::ACK_MODIFY;
const TransactionStatus_Status TransactionStatus::REJECT_MODIFY;
const TransactionStatus_Status TransactionStatus::FILL;
const TransactionStatus_Status TransactionStatus::SUSPEND;
const TransactionStatus_Status TransactionStatus::FILL_CORRECT;
const TransactionStatus_Status TransactionStatus::FILL_CANCEL;
const TransactionStatus_Status TransactionStatus::FILL_BUST;
const TransactionStatus_Status TransactionStatus::ACTIVEAT;
const TransactionStatus_Status TransactionStatus::DISCONNECT;
const TransactionStatus_Status TransactionStatus::SYNTHETIC_ACTIVATED;
const TransactionStatus_Status TransactionStatus::UPDATE;
const TransactionStatus_Status TransactionStatus::Status_MIN;
const TransactionStatus_Status TransactionStatus::Status_MAX;
const int TransactionStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MarketDataSubscription_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[20];
}
bool MarketDataSubscription_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MarketDataSubscription_Level MarketDataSubscription::NONE;
const MarketDataSubscription_Level MarketDataSubscription::TRADES;
const MarketDataSubscription_Level MarketDataSubscription::TRADES_BBA;
const MarketDataSubscription_Level MarketDataSubscription::TRADES_BBA_VOLUMES;
const MarketDataSubscription_Level MarketDataSubscription::TRADES_BBA_DOM;
const MarketDataSubscription_Level MarketDataSubscription::Level_MIN;
const MarketDataSubscription_Level MarketDataSubscription::Level_MAX;
const int MarketDataSubscription::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MarketDataSubscriptionStatus_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[21];
}
bool MarketDataSubscriptionStatus_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::SUCCESS;
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::DISCONNECTED;
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::FAILURE;
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::INVALID_PARAMS;
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::ACCESS_DENIED;
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::DELETED;
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::StatusCode_MIN;
const MarketDataSubscriptionStatus_StatusCode MarketDataSubscriptionStatus::StatusCode_MAX;
const int MarketDataSubscriptionStatus::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Quote_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[22];
}
bool Quote_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Quote_Type Quote::TRADE;
const Quote_Type Quote::BESTBID;
const Quote_Type Quote::BESTASK;
const Quote_Type Quote::BID;
const Quote_Type Quote::ASK;
const Quote_Type Quote::SETTLEMENT;
const Quote_Type Quote::Type_MIN;
const Quote_Type Quote::Type_MAX;
const int Quote::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Quote_SessionOhlcIndicator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[23];
}
bool Quote_SessionOhlcIndicator_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Quote_SessionOhlcIndicator Quote::OPEN;
const Quote_SessionOhlcIndicator Quote::HIGH;
const Quote_SessionOhlcIndicator Quote::LOW;
const Quote_SessionOhlcIndicator Quote::CLOSE;
const Quote_SessionOhlcIndicator Quote::SessionOhlcIndicator_MIN;
const Quote_SessionOhlcIndicator Quote::SessionOhlcIndicator_MAX;
const int Quote::SessionOhlcIndicator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReadUserAttributeResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[24];
}
bool ReadUserAttributeResult_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReadUserAttributeResult_ResultCode ReadUserAttributeResult::SUCCESS;
const ReadUserAttributeResult_ResultCode ReadUserAttributeResult::FAILURE;
const ReadUserAttributeResult_ResultCode ReadUserAttributeResult::ResultCode_MIN;
const ReadUserAttributeResult_ResultCode ReadUserAttributeResult::ResultCode_MAX;
const int ReadUserAttributeResult::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ModifyUserAttributeResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[25];
}
bool ModifyUserAttributeResult_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModifyUserAttributeResult_ResultCode ModifyUserAttributeResult::SUCCESS;
const ModifyUserAttributeResult_ResultCode ModifyUserAttributeResult::FAILURE;
const ModifyUserAttributeResult_ResultCode ModifyUserAttributeResult::ResultCode_MIN;
const ModifyUserAttributeResult_ResultCode ModifyUserAttributeResult::ResultCode_MAX;
const int ModifyUserAttributeResult::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeAndSalesParameters_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[26];
}
bool TimeAndSalesParameters_Level_IsValid(int value) {
  switch (value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeAndSalesParameters_Level TimeAndSalesParameters::TRADES;
const TimeAndSalesParameters_Level TimeAndSalesParameters::TRADES_BBA_VOLUMES;
const TimeAndSalesParameters_Level TimeAndSalesParameters::Level_MIN;
const TimeAndSalesParameters_Level TimeAndSalesParameters::Level_MAX;
const int TimeAndSalesParameters::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeAndSalesRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[27];
}
bool TimeAndSalesRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeAndSalesRequest_RequestType TimeAndSalesRequest::GET;
const TimeAndSalesRequest_RequestType TimeAndSalesRequest::DROP;
const TimeAndSalesRequest_RequestType TimeAndSalesRequest::RequestType_MIN;
const TimeAndSalesRequest_RequestType TimeAndSalesRequest::RequestType_MAX;
const int TimeAndSalesRequest::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeAndSalesReport_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[28];
}
bool TimeAndSalesReport_ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 5:
    case 101:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeAndSalesReport_ResultCode TimeAndSalesReport::SUCCESS;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::DROPPED;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::DISCONNECTED;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::TRUNCATED;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::FAILURE;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::ACCESS_DENIED;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::NOT_FOUND;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::OUTSIDE_ALLOWED_RANGE;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::ResultCode_MIN;
const TimeAndSalesReport_ResultCode TimeAndSalesReport::ResultCode_MAX;
const int TimeAndSalesReport::ResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeBarParameters_BarUnit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[29];
}
bool TimeBarParameters_BarUnit_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeBarParameters_BarUnit TimeBarParameters::YEAR;
const TimeBarParameters_BarUnit TimeBarParameters::SEMI_ANNUAL;
const TimeBarParameters_BarUnit TimeBarParameters::QUARTER;
const TimeBarParameters_BarUnit TimeBarParameters::MONTH;
const TimeBarParameters_BarUnit TimeBarParameters::WEEK;
const TimeBarParameters_BarUnit TimeBarParameters::DAY;
const TimeBarParameters_BarUnit TimeBarParameters::HOUR;
const TimeBarParameters_BarUnit TimeBarParameters::MIN;
const TimeBarParameters_BarUnit TimeBarParameters::BarUnit_MIN;
const TimeBarParameters_BarUnit TimeBarParameters::BarUnit_MAX;
const int TimeBarParameters::BarUnit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeBarRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[30];
}
bool TimeBarRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeBarRequest_RequestType TimeBarRequest::GET;
const TimeBarRequest_RequestType TimeBarRequest::SUBSCRIBE;
const TimeBarRequest_RequestType TimeBarRequest::DROP;
const TimeBarRequest_RequestType TimeBarRequest::RequestType_MIN;
const TimeBarRequest_RequestType TimeBarRequest::RequestType_MAX;
const int TimeBarRequest::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeBarReport_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[31];
}
bool TimeBarReport_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 101:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeBarReport_StatusCode TimeBarReport::SUCCESS;
const TimeBarReport_StatusCode TimeBarReport::SUBSCRIBED;
const TimeBarReport_StatusCode TimeBarReport::DROPPED;
const TimeBarReport_StatusCode TimeBarReport::UPDATE;
const TimeBarReport_StatusCode TimeBarReport::DISCONNECTED;
const TimeBarReport_StatusCode TimeBarReport::TRUNCATED;
const TimeBarReport_StatusCode TimeBarReport::FAILURE;
const TimeBarReport_StatusCode TimeBarReport::ACCESS_DENIED;
const TimeBarReport_StatusCode TimeBarReport::NOT_FOUND;
const TimeBarReport_StatusCode TimeBarReport::OUTSIDE_ALLOWED_RANGE;
const TimeBarReport_StatusCode TimeBarReport::StatusCode_MIN;
const TimeBarReport_StatusCode TimeBarReport::StatusCode_MAX;
const int TimeBarReport::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ProtocolVersionMajor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[32];
}
bool ProtocolVersionMajor_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtocolVersionMinor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[33];
}
bool ProtocolVersionMinor_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DayOfWeek_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_enum_descriptors[34];
}
bool DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMsg::kLogonFieldNumber;
const int ClientMsg::kRestoreSessionFieldNumber;
const int ClientMsg::kLogoffFieldNumber;
const int ClientMsg::kPasswordChangeFieldNumber;
const int ClientMsg::kObtainDemoCredentialsFieldNumber;
const int ClientMsg::kUserSessionStateRequestFieldNumber;
const int ClientMsg::kInformationRequestFieldNumber;
const int ClientMsg::kTradeSubscriptionFieldNumber;
const int ClientMsg::kOrderRequestFieldNumber;
const int ClientMsg::kMarketDataSubscriptionFieldNumber;
const int ClientMsg::kReadUserAttributeRequestFieldNumber;
const int ClientMsg::kModifyUserAttributeRequestFieldNumber;
const int ClientMsg::kTimeAndSalesRequestFieldNumber;
const int ClientMsg::kTimeBarRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMsg::ClientMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ClientMsg)
}
ClientMsg::ClientMsg(const ClientMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      information_request_(from.information_request_),
      trade_subscription_(from.trade_subscription_),
      order_request_(from.order_request_),
      market_data_subscription_(from.market_data_subscription_),
      read_user_attribute_request_(from.read_user_attribute_request_),
      modify_user_attribute_request_(from.modify_user_attribute_request_),
      time_and_sales_request_(from.time_and_sales_request_),
      time_bar_request_(from.time_bar_request_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logon()) {
    logon_ = new ::WebAPI_1::Logon(*from.logon_);
  } else {
    logon_ = NULL;
  }
  if (from.has_restore_session()) {
    restore_session_ = new ::WebAPI_1::RestoreSession(*from.restore_session_);
  } else {
    restore_session_ = NULL;
  }
  if (from.has_logoff()) {
    logoff_ = new ::WebAPI_1::Logoff(*from.logoff_);
  } else {
    logoff_ = NULL;
  }
  if (from.has_password_change()) {
    password_change_ = new ::WebAPI_1::PasswordChange(*from.password_change_);
  } else {
    password_change_ = NULL;
  }
  if (from.has_obtain_demo_credentials()) {
    obtain_demo_credentials_ = new ::WebAPI_1::ObtainDemoCredentials(*from.obtain_demo_credentials_);
  } else {
    obtain_demo_credentials_ = NULL;
  }
  if (from.has_user_session_state_request()) {
    user_session_state_request_ = new ::WebAPI_1::UserSessionStateRequest(*from.user_session_state_request_);
  } else {
    user_session_state_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ClientMsg)
}

void ClientMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&logon_, 0, reinterpret_cast<char*>(&user_session_state_request_) -
    reinterpret_cast<char*>(&logon_) + sizeof(user_session_state_request_));
}

ClientMsg::~ClientMsg() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ClientMsg)
  SharedDtor();
}

void ClientMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete logon_;
  }
  if (this != internal_default_instance()) {
    delete restore_session_;
  }
  if (this != internal_default_instance()) {
    delete logoff_;
  }
  if (this != internal_default_instance()) {
    delete password_change_;
  }
  if (this != internal_default_instance()) {
    delete obtain_demo_credentials_;
  }
  if (this != internal_default_instance()) {
    delete user_session_state_request_;
  }
}

void ClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const ClientMsg& ClientMsg::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ClientMsg* ClientMsg::New(::google::protobuf::Arena* arena) const {
  ClientMsg* n = new ClientMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ClientMsg)
  information_request_.Clear();
  trade_subscription_.Clear();
  order_request_.Clear();
  market_data_subscription_.Clear();
  read_user_attribute_request_.Clear();
  modify_user_attribute_request_.Clear();
  time_and_sales_request_.Clear();
  time_bar_request_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_logon()) {
      GOOGLE_DCHECK(logon_ != NULL);
      logon_->::WebAPI_1::Logon::Clear();
    }
    if (has_restore_session()) {
      GOOGLE_DCHECK(restore_session_ != NULL);
      restore_session_->::WebAPI_1::RestoreSession::Clear();
    }
    if (has_logoff()) {
      GOOGLE_DCHECK(logoff_ != NULL);
      logoff_->::WebAPI_1::Logoff::Clear();
    }
    if (has_password_change()) {
      GOOGLE_DCHECK(password_change_ != NULL);
      password_change_->::WebAPI_1::PasswordChange::Clear();
    }
    if (has_obtain_demo_credentials()) {
      GOOGLE_DCHECK(obtain_demo_credentials_ != NULL);
      obtain_demo_credentials_->::WebAPI_1::ObtainDemoCredentials::Clear();
    }
    if (has_user_session_state_request()) {
      GOOGLE_DCHECK(user_session_state_request_ != NULL);
      user_session_state_request_->::WebAPI_1::UserSessionStateRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WebAPI_1.InformationRequest information_request = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_information_request()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.TradeSubscription trade_subscription = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trade_subscription()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.OrderRequest order_request = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_order_request()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.MarketDataSubscription market_data_subscription = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_market_data_subscription()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.ReadUserAttributeRequest read_user_attribute_request = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_read_user_attribute_request()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.ModifyUserAttributeRequest modify_user_attribute_request = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_modify_user_attribute_request()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.TimeAndSalesRequest time_and_sales_request = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_and_sales_request()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.TimeBarRequest time_bar_request = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_bar_request()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .WebAPI_1.Logon logon = 100;
      case 100: {
        if (tag == 802u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.RestoreSession restore_session = 101;
      case 101: {
        if (tag == 810u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_restore_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.Logoff logoff = 102;
      case 102: {
        if (tag == 818u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.PasswordChange password_change = 103;
      case 103: {
        if (tag == 826u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_password_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.ObtainDemoCredentials obtain_demo_credentials = 104;
      case 104: {
        if (tag == 834u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obtain_demo_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.UserSessionStateRequest user_session_state_request = 105;
      case 105: {
        if (tag == 842u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_session_state_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ClientMsg)
  return false;
#undef DO_
}

void ClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ClientMsg)
  // repeated .WebAPI_1.InformationRequest information_request = 1;
  for (unsigned int i = 0, n = this->information_request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->information_request(i), output);
  }

  // repeated .WebAPI_1.TradeSubscription trade_subscription = 2;
  for (unsigned int i = 0, n = this->trade_subscription_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trade_subscription(i), output);
  }

  // repeated .WebAPI_1.OrderRequest order_request = 3;
  for (unsigned int i = 0, n = this->order_request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->order_request(i), output);
  }

  // repeated .WebAPI_1.MarketDataSubscription market_data_subscription = 4;
  for (unsigned int i = 0, n = this->market_data_subscription_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->market_data_subscription(i), output);
  }

  // repeated .WebAPI_1.ReadUserAttributeRequest read_user_attribute_request = 5;
  for (unsigned int i = 0, n = this->read_user_attribute_request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read_user_attribute_request(i), output);
  }

  // repeated .WebAPI_1.ModifyUserAttributeRequest modify_user_attribute_request = 6;
  for (unsigned int i = 0, n = this->modify_user_attribute_request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->modify_user_attribute_request(i), output);
  }

  // repeated .WebAPI_1.TimeAndSalesRequest time_and_sales_request = 7;
  for (unsigned int i = 0, n = this->time_and_sales_request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->time_and_sales_request(i), output);
  }

  // repeated .WebAPI_1.TimeBarRequest time_bar_request = 8;
  for (unsigned int i = 0, n = this->time_bar_request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->time_bar_request(i), output);
  }

  // optional .WebAPI_1.Logon logon = 100;
  if (has_logon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->logon_, output);
  }

  // optional .WebAPI_1.RestoreSession restore_session = 101;
  if (has_restore_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->restore_session_, output);
  }

  // optional .WebAPI_1.Logoff logoff = 102;
  if (has_logoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->logoff_, output);
  }

  // optional .WebAPI_1.PasswordChange password_change = 103;
  if (has_password_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->password_change_, output);
  }

  // optional .WebAPI_1.ObtainDemoCredentials obtain_demo_credentials = 104;
  if (has_obtain_demo_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->obtain_demo_credentials_, output);
  }

  // optional .WebAPI_1.UserSessionStateRequest user_session_state_request = 105;
  if (has_user_session_state_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->user_session_state_request_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ClientMsg)
}

::google::protobuf::uint8* ClientMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ClientMsg)
  // repeated .WebAPI_1.InformationRequest information_request = 1;
  for (unsigned int i = 0, n = this->information_request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->information_request(i), false, target);
  }

  // repeated .WebAPI_1.TradeSubscription trade_subscription = 2;
  for (unsigned int i = 0, n = this->trade_subscription_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trade_subscription(i), false, target);
  }

  // repeated .WebAPI_1.OrderRequest order_request = 3;
  for (unsigned int i = 0, n = this->order_request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->order_request(i), false, target);
  }

  // repeated .WebAPI_1.MarketDataSubscription market_data_subscription = 4;
  for (unsigned int i = 0, n = this->market_data_subscription_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->market_data_subscription(i), false, target);
  }

  // repeated .WebAPI_1.ReadUserAttributeRequest read_user_attribute_request = 5;
  for (unsigned int i = 0, n = this->read_user_attribute_request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->read_user_attribute_request(i), false, target);
  }

  // repeated .WebAPI_1.ModifyUserAttributeRequest modify_user_attribute_request = 6;
  for (unsigned int i = 0, n = this->modify_user_attribute_request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->modify_user_attribute_request(i), false, target);
  }

  // repeated .WebAPI_1.TimeAndSalesRequest time_and_sales_request = 7;
  for (unsigned int i = 0, n = this->time_and_sales_request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->time_and_sales_request(i), false, target);
  }

  // repeated .WebAPI_1.TimeBarRequest time_bar_request = 8;
  for (unsigned int i = 0, n = this->time_bar_request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->time_bar_request(i), false, target);
  }

  // optional .WebAPI_1.Logon logon = 100;
  if (has_logon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->logon_, false, target);
  }

  // optional .WebAPI_1.RestoreSession restore_session = 101;
  if (has_restore_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->restore_session_, false, target);
  }

  // optional .WebAPI_1.Logoff logoff = 102;
  if (has_logoff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->logoff_, false, target);
  }

  // optional .WebAPI_1.PasswordChange password_change = 103;
  if (has_password_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->password_change_, false, target);
  }

  // optional .WebAPI_1.ObtainDemoCredentials obtain_demo_credentials = 104;
  if (has_obtain_demo_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->obtain_demo_credentials_, false, target);
  }

  // optional .WebAPI_1.UserSessionStateRequest user_session_state_request = 105;
  if (has_user_session_state_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->user_session_state_request_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ClientMsg)
  return target;
}

size_t ClientMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ClientMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WebAPI_1.InformationRequest information_request = 1;
  {
    unsigned int count = this->information_request_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->information_request(i));
    }
  }

  // repeated .WebAPI_1.TradeSubscription trade_subscription = 2;
  {
    unsigned int count = this->trade_subscription_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade_subscription(i));
    }
  }

  // repeated .WebAPI_1.OrderRequest order_request = 3;
  {
    unsigned int count = this->order_request_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_request(i));
    }
  }

  // repeated .WebAPI_1.MarketDataSubscription market_data_subscription = 4;
  {
    unsigned int count = this->market_data_subscription_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market_data_subscription(i));
    }
  }

  // repeated .WebAPI_1.ReadUserAttributeRequest read_user_attribute_request = 5;
  {
    unsigned int count = this->read_user_attribute_request_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_user_attribute_request(i));
    }
  }

  // repeated .WebAPI_1.ModifyUserAttributeRequest modify_user_attribute_request = 6;
  {
    unsigned int count = this->modify_user_attribute_request_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_user_attribute_request(i));
    }
  }

  // repeated .WebAPI_1.TimeAndSalesRequest time_and_sales_request = 7;
  {
    unsigned int count = this->time_and_sales_request_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_and_sales_request(i));
    }
  }

  // repeated .WebAPI_1.TimeBarRequest time_bar_request = 8;
  {
    unsigned int count = this->time_bar_request_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_bar_request(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .WebAPI_1.Logon logon = 100;
    if (has_logon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logon_);
    }

    // optional .WebAPI_1.RestoreSession restore_session = 101;
    if (has_restore_session()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->restore_session_);
    }

    // optional .WebAPI_1.Logoff logoff = 102;
    if (has_logoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logoff_);
    }

    // optional .WebAPI_1.PasswordChange password_change = 103;
    if (has_password_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->password_change_);
    }

    // optional .WebAPI_1.ObtainDemoCredentials obtain_demo_credentials = 104;
    if (has_obtain_demo_credentials()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->obtain_demo_credentials_);
    }

    // optional .WebAPI_1.UserSessionStateRequest user_session_state_request = 105;
    if (has_user_session_state_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_session_state_request_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ClientMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ClientMsg)
    MergeFrom(*source);
  }
}

void ClientMsg::MergeFrom(const ClientMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  information_request_.MergeFrom(from.information_request_);
  trade_subscription_.MergeFrom(from.trade_subscription_);
  order_request_.MergeFrom(from.order_request_);
  market_data_subscription_.MergeFrom(from.market_data_subscription_);
  read_user_attribute_request_.MergeFrom(from.read_user_attribute_request_);
  modify_user_attribute_request_.MergeFrom(from.modify_user_attribute_request_);
  time_and_sales_request_.MergeFrom(from.time_and_sales_request_);
  time_bar_request_.MergeFrom(from.time_bar_request_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_logon()) {
      mutable_logon()->::WebAPI_1::Logon::MergeFrom(from.logon());
    }
    if (from.has_restore_session()) {
      mutable_restore_session()->::WebAPI_1::RestoreSession::MergeFrom(from.restore_session());
    }
    if (from.has_logoff()) {
      mutable_logoff()->::WebAPI_1::Logoff::MergeFrom(from.logoff());
    }
    if (from.has_password_change()) {
      mutable_password_change()->::WebAPI_1::PasswordChange::MergeFrom(from.password_change());
    }
    if (from.has_obtain_demo_credentials()) {
      mutable_obtain_demo_credentials()->::WebAPI_1::ObtainDemoCredentials::MergeFrom(from.obtain_demo_credentials());
    }
    if (from.has_user_session_state_request()) {
      mutable_user_session_state_request()->::WebAPI_1::UserSessionStateRequest::MergeFrom(from.user_session_state_request());
    }
  }
}

void ClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMsg::CopyFrom(const ClientMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMsg::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->information_request())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trade_subscription())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_request())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->market_data_subscription())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->read_user_attribute_request())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->modify_user_attribute_request())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->time_and_sales_request())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->time_bar_request())) return false;
  if (has_logon()) {
    if (!this->logon_->IsInitialized()) return false;
  }
  if (has_restore_session()) {
    if (!this->restore_session_->IsInitialized()) return false;
  }
  if (has_password_change()) {
    if (!this->password_change_->IsInitialized()) return false;
  }
  if (has_obtain_demo_credentials()) {
    if (!this->obtain_demo_credentials_->IsInitialized()) return false;
  }
  if (has_user_session_state_request()) {
    if (!this->user_session_state_request_->IsInitialized()) return false;
  }
  return true;
}

void ClientMsg::Swap(ClientMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMsg::InternalSwap(ClientMsg* other) {
  information_request_.UnsafeArenaSwap(&other->information_request_);
  trade_subscription_.UnsafeArenaSwap(&other->trade_subscription_);
  order_request_.UnsafeArenaSwap(&other->order_request_);
  market_data_subscription_.UnsafeArenaSwap(&other->market_data_subscription_);
  read_user_attribute_request_.UnsafeArenaSwap(&other->read_user_attribute_request_);
  modify_user_attribute_request_.UnsafeArenaSwap(&other->modify_user_attribute_request_);
  time_and_sales_request_.UnsafeArenaSwap(&other->time_and_sales_request_);
  time_bar_request_.UnsafeArenaSwap(&other->time_bar_request_);
  std::swap(logon_, other->logon_);
  std::swap(restore_session_, other->restore_session_);
  std::swap(logoff_, other->logoff_);
  std::swap(password_change_, other->password_change_);
  std::swap(obtain_demo_credentials_, other->obtain_demo_credentials_);
  std::swap(user_session_state_request_, other->user_session_state_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientMsg

// optional .WebAPI_1.Logon logon = 100;
bool ClientMsg::has_logon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientMsg::set_has_logon() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientMsg::clear_has_logon() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientMsg::clear_logon() {
  if (logon_ != NULL) logon_->::WebAPI_1::Logon::Clear();
  clear_has_logon();
}
const ::WebAPI_1::Logon& ClientMsg::logon() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.logon)
  return logon_ != NULL ? *logon_
                         : *::WebAPI_1::Logon::internal_default_instance();
}
::WebAPI_1::Logon* ClientMsg::mutable_logon() {
  set_has_logon();
  if (logon_ == NULL) {
    logon_ = new ::WebAPI_1::Logon;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.logon)
  return logon_;
}
::WebAPI_1::Logon* ClientMsg::release_logon() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ClientMsg.logon)
  clear_has_logon();
  ::WebAPI_1::Logon* temp = logon_;
  logon_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_logon(::WebAPI_1::Logon* logon) {
  delete logon_;
  logon_ = logon;
  if (logon) {
    set_has_logon();
  } else {
    clear_has_logon();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ClientMsg.logon)
}

// optional .WebAPI_1.RestoreSession restore_session = 101;
bool ClientMsg::has_restore_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientMsg::set_has_restore_session() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientMsg::clear_has_restore_session() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientMsg::clear_restore_session() {
  if (restore_session_ != NULL) restore_session_->::WebAPI_1::RestoreSession::Clear();
  clear_has_restore_session();
}
const ::WebAPI_1::RestoreSession& ClientMsg::restore_session() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.restore_session)
  return restore_session_ != NULL ? *restore_session_
                         : *::WebAPI_1::RestoreSession::internal_default_instance();
}
::WebAPI_1::RestoreSession* ClientMsg::mutable_restore_session() {
  set_has_restore_session();
  if (restore_session_ == NULL) {
    restore_session_ = new ::WebAPI_1::RestoreSession;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.restore_session)
  return restore_session_;
}
::WebAPI_1::RestoreSession* ClientMsg::release_restore_session() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ClientMsg.restore_session)
  clear_has_restore_session();
  ::WebAPI_1::RestoreSession* temp = restore_session_;
  restore_session_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_restore_session(::WebAPI_1::RestoreSession* restore_session) {
  delete restore_session_;
  restore_session_ = restore_session;
  if (restore_session) {
    set_has_restore_session();
  } else {
    clear_has_restore_session();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ClientMsg.restore_session)
}

// optional .WebAPI_1.Logoff logoff = 102;
bool ClientMsg::has_logoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientMsg::set_has_logoff() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientMsg::clear_has_logoff() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientMsg::clear_logoff() {
  if (logoff_ != NULL) logoff_->::WebAPI_1::Logoff::Clear();
  clear_has_logoff();
}
const ::WebAPI_1::Logoff& ClientMsg::logoff() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.logoff)
  return logoff_ != NULL ? *logoff_
                         : *::WebAPI_1::Logoff::internal_default_instance();
}
::WebAPI_1::Logoff* ClientMsg::mutable_logoff() {
  set_has_logoff();
  if (logoff_ == NULL) {
    logoff_ = new ::WebAPI_1::Logoff;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.logoff)
  return logoff_;
}
::WebAPI_1::Logoff* ClientMsg::release_logoff() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ClientMsg.logoff)
  clear_has_logoff();
  ::WebAPI_1::Logoff* temp = logoff_;
  logoff_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_logoff(::WebAPI_1::Logoff* logoff) {
  delete logoff_;
  logoff_ = logoff;
  if (logoff) {
    set_has_logoff();
  } else {
    clear_has_logoff();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ClientMsg.logoff)
}

// optional .WebAPI_1.PasswordChange password_change = 103;
bool ClientMsg::has_password_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientMsg::set_has_password_change() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientMsg::clear_has_password_change() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientMsg::clear_password_change() {
  if (password_change_ != NULL) password_change_->::WebAPI_1::PasswordChange::Clear();
  clear_has_password_change();
}
const ::WebAPI_1::PasswordChange& ClientMsg::password_change() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.password_change)
  return password_change_ != NULL ? *password_change_
                         : *::WebAPI_1::PasswordChange::internal_default_instance();
}
::WebAPI_1::PasswordChange* ClientMsg::mutable_password_change() {
  set_has_password_change();
  if (password_change_ == NULL) {
    password_change_ = new ::WebAPI_1::PasswordChange;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.password_change)
  return password_change_;
}
::WebAPI_1::PasswordChange* ClientMsg::release_password_change() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ClientMsg.password_change)
  clear_has_password_change();
  ::WebAPI_1::PasswordChange* temp = password_change_;
  password_change_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_password_change(::WebAPI_1::PasswordChange* password_change) {
  delete password_change_;
  password_change_ = password_change;
  if (password_change) {
    set_has_password_change();
  } else {
    clear_has_password_change();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ClientMsg.password_change)
}

// optional .WebAPI_1.ObtainDemoCredentials obtain_demo_credentials = 104;
bool ClientMsg::has_obtain_demo_credentials() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientMsg::set_has_obtain_demo_credentials() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientMsg::clear_has_obtain_demo_credentials() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientMsg::clear_obtain_demo_credentials() {
  if (obtain_demo_credentials_ != NULL) obtain_demo_credentials_->::WebAPI_1::ObtainDemoCredentials::Clear();
  clear_has_obtain_demo_credentials();
}
const ::WebAPI_1::ObtainDemoCredentials& ClientMsg::obtain_demo_credentials() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.obtain_demo_credentials)
  return obtain_demo_credentials_ != NULL ? *obtain_demo_credentials_
                         : *::WebAPI_1::ObtainDemoCredentials::internal_default_instance();
}
::WebAPI_1::ObtainDemoCredentials* ClientMsg::mutable_obtain_demo_credentials() {
  set_has_obtain_demo_credentials();
  if (obtain_demo_credentials_ == NULL) {
    obtain_demo_credentials_ = new ::WebAPI_1::ObtainDemoCredentials;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.obtain_demo_credentials)
  return obtain_demo_credentials_;
}
::WebAPI_1::ObtainDemoCredentials* ClientMsg::release_obtain_demo_credentials() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ClientMsg.obtain_demo_credentials)
  clear_has_obtain_demo_credentials();
  ::WebAPI_1::ObtainDemoCredentials* temp = obtain_demo_credentials_;
  obtain_demo_credentials_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_obtain_demo_credentials(::WebAPI_1::ObtainDemoCredentials* obtain_demo_credentials) {
  delete obtain_demo_credentials_;
  obtain_demo_credentials_ = obtain_demo_credentials;
  if (obtain_demo_credentials) {
    set_has_obtain_demo_credentials();
  } else {
    clear_has_obtain_demo_credentials();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ClientMsg.obtain_demo_credentials)
}

// optional .WebAPI_1.UserSessionStateRequest user_session_state_request = 105;
bool ClientMsg::has_user_session_state_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientMsg::set_has_user_session_state_request() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientMsg::clear_has_user_session_state_request() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientMsg::clear_user_session_state_request() {
  if (user_session_state_request_ != NULL) user_session_state_request_->::WebAPI_1::UserSessionStateRequest::Clear();
  clear_has_user_session_state_request();
}
const ::WebAPI_1::UserSessionStateRequest& ClientMsg::user_session_state_request() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.user_session_state_request)
  return user_session_state_request_ != NULL ? *user_session_state_request_
                         : *::WebAPI_1::UserSessionStateRequest::internal_default_instance();
}
::WebAPI_1::UserSessionStateRequest* ClientMsg::mutable_user_session_state_request() {
  set_has_user_session_state_request();
  if (user_session_state_request_ == NULL) {
    user_session_state_request_ = new ::WebAPI_1::UserSessionStateRequest;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.user_session_state_request)
  return user_session_state_request_;
}
::WebAPI_1::UserSessionStateRequest* ClientMsg::release_user_session_state_request() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ClientMsg.user_session_state_request)
  clear_has_user_session_state_request();
  ::WebAPI_1::UserSessionStateRequest* temp = user_session_state_request_;
  user_session_state_request_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_user_session_state_request(::WebAPI_1::UserSessionStateRequest* user_session_state_request) {
  delete user_session_state_request_;
  user_session_state_request_ = user_session_state_request;
  if (user_session_state_request) {
    set_has_user_session_state_request();
  } else {
    clear_has_user_session_state_request();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ClientMsg.user_session_state_request)
}

// repeated .WebAPI_1.InformationRequest information_request = 1;
int ClientMsg::information_request_size() const {
  return information_request_.size();
}
void ClientMsg::clear_information_request() {
  information_request_.Clear();
}
const ::WebAPI_1::InformationRequest& ClientMsg::information_request(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.information_request)
  return information_request_.Get(index);
}
::WebAPI_1::InformationRequest* ClientMsg::mutable_information_request(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.information_request)
  return information_request_.Mutable(index);
}
::WebAPI_1::InformationRequest* ClientMsg::add_information_request() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.information_request)
  return information_request_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::InformationRequest >*
ClientMsg::mutable_information_request() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.information_request)
  return &information_request_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::InformationRequest >&
ClientMsg::information_request() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.information_request)
  return information_request_;
}

// repeated .WebAPI_1.TradeSubscription trade_subscription = 2;
int ClientMsg::trade_subscription_size() const {
  return trade_subscription_.size();
}
void ClientMsg::clear_trade_subscription() {
  trade_subscription_.Clear();
}
const ::WebAPI_1::TradeSubscription& ClientMsg::trade_subscription(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.trade_subscription)
  return trade_subscription_.Get(index);
}
::WebAPI_1::TradeSubscription* ClientMsg::mutable_trade_subscription(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.trade_subscription)
  return trade_subscription_.Mutable(index);
}
::WebAPI_1::TradeSubscription* ClientMsg::add_trade_subscription() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.trade_subscription)
  return trade_subscription_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TradeSubscription >*
ClientMsg::mutable_trade_subscription() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.trade_subscription)
  return &trade_subscription_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TradeSubscription >&
ClientMsg::trade_subscription() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.trade_subscription)
  return trade_subscription_;
}

// repeated .WebAPI_1.OrderRequest order_request = 3;
int ClientMsg::order_request_size() const {
  return order_request_.size();
}
void ClientMsg::clear_order_request() {
  order_request_.Clear();
}
const ::WebAPI_1::OrderRequest& ClientMsg::order_request(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.order_request)
  return order_request_.Get(index);
}
::WebAPI_1::OrderRequest* ClientMsg::mutable_order_request(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.order_request)
  return order_request_.Mutable(index);
}
::WebAPI_1::OrderRequest* ClientMsg::add_order_request() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.order_request)
  return order_request_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::OrderRequest >*
ClientMsg::mutable_order_request() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.order_request)
  return &order_request_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::OrderRequest >&
ClientMsg::order_request() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.order_request)
  return order_request_;
}

// repeated .WebAPI_1.MarketDataSubscription market_data_subscription = 4;
int ClientMsg::market_data_subscription_size() const {
  return market_data_subscription_.size();
}
void ClientMsg::clear_market_data_subscription() {
  market_data_subscription_.Clear();
}
const ::WebAPI_1::MarketDataSubscription& ClientMsg::market_data_subscription(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.market_data_subscription)
  return market_data_subscription_.Get(index);
}
::WebAPI_1::MarketDataSubscription* ClientMsg::mutable_market_data_subscription(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.market_data_subscription)
  return market_data_subscription_.Mutable(index);
}
::WebAPI_1::MarketDataSubscription* ClientMsg::add_market_data_subscription() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.market_data_subscription)
  return market_data_subscription_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::MarketDataSubscription >*
ClientMsg::mutable_market_data_subscription() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.market_data_subscription)
  return &market_data_subscription_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::MarketDataSubscription >&
ClientMsg::market_data_subscription() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.market_data_subscription)
  return market_data_subscription_;
}

// repeated .WebAPI_1.ReadUserAttributeRequest read_user_attribute_request = 5;
int ClientMsg::read_user_attribute_request_size() const {
  return read_user_attribute_request_.size();
}
void ClientMsg::clear_read_user_attribute_request() {
  read_user_attribute_request_.Clear();
}
const ::WebAPI_1::ReadUserAttributeRequest& ClientMsg::read_user_attribute_request(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.read_user_attribute_request)
  return read_user_attribute_request_.Get(index);
}
::WebAPI_1::ReadUserAttributeRequest* ClientMsg::mutable_read_user_attribute_request(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.read_user_attribute_request)
  return read_user_attribute_request_.Mutable(index);
}
::WebAPI_1::ReadUserAttributeRequest* ClientMsg::add_read_user_attribute_request() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.read_user_attribute_request)
  return read_user_attribute_request_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::ReadUserAttributeRequest >*
ClientMsg::mutable_read_user_attribute_request() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.read_user_attribute_request)
  return &read_user_attribute_request_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::ReadUserAttributeRequest >&
ClientMsg::read_user_attribute_request() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.read_user_attribute_request)
  return read_user_attribute_request_;
}

// repeated .WebAPI_1.ModifyUserAttributeRequest modify_user_attribute_request = 6;
int ClientMsg::modify_user_attribute_request_size() const {
  return modify_user_attribute_request_.size();
}
void ClientMsg::clear_modify_user_attribute_request() {
  modify_user_attribute_request_.Clear();
}
const ::WebAPI_1::ModifyUserAttributeRequest& ClientMsg::modify_user_attribute_request(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.modify_user_attribute_request)
  return modify_user_attribute_request_.Get(index);
}
::WebAPI_1::ModifyUserAttributeRequest* ClientMsg::mutable_modify_user_attribute_request(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.modify_user_attribute_request)
  return modify_user_attribute_request_.Mutable(index);
}
::WebAPI_1::ModifyUserAttributeRequest* ClientMsg::add_modify_user_attribute_request() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.modify_user_attribute_request)
  return modify_user_attribute_request_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::ModifyUserAttributeRequest >*
ClientMsg::mutable_modify_user_attribute_request() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.modify_user_attribute_request)
  return &modify_user_attribute_request_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::ModifyUserAttributeRequest >&
ClientMsg::modify_user_attribute_request() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.modify_user_attribute_request)
  return modify_user_attribute_request_;
}

// repeated .WebAPI_1.TimeAndSalesRequest time_and_sales_request = 7;
int ClientMsg::time_and_sales_request_size() const {
  return time_and_sales_request_.size();
}
void ClientMsg::clear_time_and_sales_request() {
  time_and_sales_request_.Clear();
}
const ::WebAPI_1::TimeAndSalesRequest& ClientMsg::time_and_sales_request(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.time_and_sales_request)
  return time_and_sales_request_.Get(index);
}
::WebAPI_1::TimeAndSalesRequest* ClientMsg::mutable_time_and_sales_request(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.time_and_sales_request)
  return time_and_sales_request_.Mutable(index);
}
::WebAPI_1::TimeAndSalesRequest* ClientMsg::add_time_and_sales_request() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.time_and_sales_request)
  return time_and_sales_request_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeAndSalesRequest >*
ClientMsg::mutable_time_and_sales_request() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.time_and_sales_request)
  return &time_and_sales_request_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeAndSalesRequest >&
ClientMsg::time_and_sales_request() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.time_and_sales_request)
  return time_and_sales_request_;
}

// repeated .WebAPI_1.TimeBarRequest time_bar_request = 8;
int ClientMsg::time_bar_request_size() const {
  return time_bar_request_.size();
}
void ClientMsg::clear_time_bar_request() {
  time_bar_request_.Clear();
}
const ::WebAPI_1::TimeBarRequest& ClientMsg::time_bar_request(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ClientMsg.time_bar_request)
  return time_bar_request_.Get(index);
}
::WebAPI_1::TimeBarRequest* ClientMsg::mutable_time_bar_request(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ClientMsg.time_bar_request)
  return time_bar_request_.Mutable(index);
}
::WebAPI_1::TimeBarRequest* ClientMsg::add_time_bar_request() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ClientMsg.time_bar_request)
  return time_bar_request_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeBarRequest >*
ClientMsg::mutable_time_bar_request() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ClientMsg.time_bar_request)
  return &time_bar_request_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeBarRequest >&
ClientMsg::time_bar_request() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ClientMsg.time_bar_request)
  return time_bar_request_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMsg::kLogonResultFieldNumber;
const int ServerMsg::kRestoreSessionResultFieldNumber;
const int ServerMsg::kLoggedOffFieldNumber;
const int ServerMsg::kPasswordChangeResultFieldNumber;
const int ServerMsg::kUserMessageFieldNumber;
const int ServerMsg::kObtainDemoCredentialsResultFieldNumber;
const int ServerMsg::kUserSessionStateResultFieldNumber;
const int ServerMsg::kInformationReportFieldNumber;
const int ServerMsg::kOrderRequestRejectFieldNumber;
const int ServerMsg::kTradeSubscriptionStatusFieldNumber;
const int ServerMsg::kTradeSnapshotCompletionFieldNumber;
const int ServerMsg::kOrderStatusFieldNumber;
const int ServerMsg::kPositionStatusFieldNumber;
const int ServerMsg::kCollateralStatusFieldNumber;
const int ServerMsg::kMarketDataSubscriptionStatusFieldNumber;
const int ServerMsg::kRealTimeMarketDataFieldNumber;
const int ServerMsg::kReadUserAttributeResultFieldNumber;
const int ServerMsg::kModifyUserAttributeResultFieldNumber;
const int ServerMsg::kTimeAndSalesReportFieldNumber;
const int ServerMsg::kTimeBarReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMsg::ServerMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ServerMsg)
}
ServerMsg::ServerMsg(const ServerMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_message_(from.user_message_),
      information_report_(from.information_report_),
      order_request_reject_(from.order_request_reject_),
      trade_subscription_status_(from.trade_subscription_status_),
      trade_snapshot_completion_(from.trade_snapshot_completion_),
      order_status_(from.order_status_),
      position_status_(from.position_status_),
      collateral_status_(from.collateral_status_),
      market_data_subscription_status_(from.market_data_subscription_status_),
      real_time_market_data_(from.real_time_market_data_),
      read_user_attribute_result_(from.read_user_attribute_result_),
      modify_user_attribute_result_(from.modify_user_attribute_result_),
      time_and_sales_report_(from.time_and_sales_report_),
      time_bar_report_(from.time_bar_report_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logon_result()) {
    logon_result_ = new ::WebAPI_1::LogonResult(*from.logon_result_);
  } else {
    logon_result_ = NULL;
  }
  if (from.has_restore_session_result()) {
    restore_session_result_ = new ::WebAPI_1::RestoreSessionResult(*from.restore_session_result_);
  } else {
    restore_session_result_ = NULL;
  }
  if (from.has_logged_off()) {
    logged_off_ = new ::WebAPI_1::LoggedOff(*from.logged_off_);
  } else {
    logged_off_ = NULL;
  }
  if (from.has_password_change_result()) {
    password_change_result_ = new ::WebAPI_1::PasswordChangeResult(*from.password_change_result_);
  } else {
    password_change_result_ = NULL;
  }
  if (from.has_obtain_demo_credentials_result()) {
    obtain_demo_credentials_result_ = new ::WebAPI_1::ObtainDemoCredentialsResult(*from.obtain_demo_credentials_result_);
  } else {
    obtain_demo_credentials_result_ = NULL;
  }
  if (from.has_user_session_state_result()) {
    user_session_state_result_ = new ::WebAPI_1::UserSessionStateResult(*from.user_session_state_result_);
  } else {
    user_session_state_result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ServerMsg)
}

void ServerMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&logon_result_, 0, reinterpret_cast<char*>(&user_session_state_result_) -
    reinterpret_cast<char*>(&logon_result_) + sizeof(user_session_state_result_));
}

ServerMsg::~ServerMsg() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ServerMsg)
  SharedDtor();
}

void ServerMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete logon_result_;
  }
  if (this != internal_default_instance()) {
    delete restore_session_result_;
  }
  if (this != internal_default_instance()) {
    delete logged_off_;
  }
  if (this != internal_default_instance()) {
    delete password_change_result_;
  }
  if (this != internal_default_instance()) {
    delete obtain_demo_credentials_result_;
  }
  if (this != internal_default_instance()) {
    delete user_session_state_result_;
  }
}

void ServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const ServerMsg& ServerMsg::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ServerMsg* ServerMsg::New(::google::protobuf::Arena* arena) const {
  ServerMsg* n = new ServerMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ServerMsg)
  user_message_.Clear();
  information_report_.Clear();
  order_request_reject_.Clear();
  trade_subscription_status_.Clear();
  trade_snapshot_completion_.Clear();
  order_status_.Clear();
  position_status_.Clear();
  collateral_status_.Clear();
  market_data_subscription_status_.Clear();
  real_time_market_data_.Clear();
  read_user_attribute_result_.Clear();
  modify_user_attribute_result_.Clear();
  time_and_sales_report_.Clear();
  time_bar_report_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_logon_result()) {
      GOOGLE_DCHECK(logon_result_ != NULL);
      logon_result_->::WebAPI_1::LogonResult::Clear();
    }
    if (has_restore_session_result()) {
      GOOGLE_DCHECK(restore_session_result_ != NULL);
      restore_session_result_->::WebAPI_1::RestoreSessionResult::Clear();
    }
    if (has_logged_off()) {
      GOOGLE_DCHECK(logged_off_ != NULL);
      logged_off_->::WebAPI_1::LoggedOff::Clear();
    }
    if (has_password_change_result()) {
      GOOGLE_DCHECK(password_change_result_ != NULL);
      password_change_result_->::WebAPI_1::PasswordChangeResult::Clear();
    }
    if (has_obtain_demo_credentials_result()) {
      GOOGLE_DCHECK(obtain_demo_credentials_result_ != NULL);
      obtain_demo_credentials_result_->::WebAPI_1::ObtainDemoCredentialsResult::Clear();
    }
    if (has_user_session_state_result()) {
      GOOGLE_DCHECK(user_session_state_result_ != NULL);
      user_session_state_result_->::WebAPI_1::UserSessionStateResult::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ServerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WebAPI_1.InformationReport information_report = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_information_report()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.OrderRequestReject order_request_reject = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_order_request_reject()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.TradeSubscriptionStatus trade_subscription_status = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trade_subscription_status()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.TradeSnapshotCompletion trade_snapshot_completion = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trade_snapshot_completion()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.OrderStatus order_status = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_order_status()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.PositionStatus position_status = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_position_status()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.CollateralStatus collateral_status = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_collateral_status()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.MarketDataSubscriptionStatus market_data_subscription_status = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_market_data_subscription_status()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.RealTimeMarketData real_time_market_data = 9;
      case 9: {
        if (tag == 74u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_real_time_market_data()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.ReadUserAttributeResult read_user_attribute_result = 10;
      case 10: {
        if (tag == 82u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_read_user_attribute_result()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.ModifyUserAttributeResult modify_user_attribute_result = 11;
      case 11: {
        if (tag == 90u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_modify_user_attribute_result()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.TimeAndSalesReport time_and_sales_report = 12;
      case 12: {
        if (tag == 98u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_and_sales_report()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.TimeBarReport time_bar_report = 13;
      case 13: {
        if (tag == 106u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_bar_report()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .WebAPI_1.LogonResult logon_result = 100;
      case 100: {
        if (tag == 802u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logon_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.RestoreSessionResult restore_session_result = 101;
      case 101: {
        if (tag == 810u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_restore_session_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.LoggedOff logged_off = 102;
      case 102: {
        if (tag == 818u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logged_off()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.PasswordChangeResult password_change_result = 103;
      case 103: {
        if (tag == 826u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_password_change_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.UserMessage user_message = 104;
      case 104: {
        if (tag == 834u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_message()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .WebAPI_1.ObtainDemoCredentialsResult obtain_demo_credentials_result = 105;
      case 105: {
        if (tag == 842u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obtain_demo_credentials_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.UserSessionStateResult user_session_state_result = 106;
      case 106: {
        if (tag == 850u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_session_state_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ServerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ServerMsg)
  return false;
#undef DO_
}

void ServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ServerMsg)
  // repeated .WebAPI_1.InformationReport information_report = 1;
  for (unsigned int i = 0, n = this->information_report_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->information_report(i), output);
  }

  // repeated .WebAPI_1.OrderRequestReject order_request_reject = 2;
  for (unsigned int i = 0, n = this->order_request_reject_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->order_request_reject(i), output);
  }

  // repeated .WebAPI_1.TradeSubscriptionStatus trade_subscription_status = 3;
  for (unsigned int i = 0, n = this->trade_subscription_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trade_subscription_status(i), output);
  }

  // repeated .WebAPI_1.TradeSnapshotCompletion trade_snapshot_completion = 4;
  for (unsigned int i = 0, n = this->trade_snapshot_completion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trade_snapshot_completion(i), output);
  }

  // repeated .WebAPI_1.OrderStatus order_status = 5;
  for (unsigned int i = 0, n = this->order_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->order_status(i), output);
  }

  // repeated .WebAPI_1.PositionStatus position_status = 6;
  for (unsigned int i = 0, n = this->position_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->position_status(i), output);
  }

  // repeated .WebAPI_1.CollateralStatus collateral_status = 7;
  for (unsigned int i = 0, n = this->collateral_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->collateral_status(i), output);
  }

  // repeated .WebAPI_1.MarketDataSubscriptionStatus market_data_subscription_status = 8;
  for (unsigned int i = 0, n = this->market_data_subscription_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->market_data_subscription_status(i), output);
  }

  // repeated .WebAPI_1.RealTimeMarketData real_time_market_data = 9;
  for (unsigned int i = 0, n = this->real_time_market_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->real_time_market_data(i), output);
  }

  // repeated .WebAPI_1.ReadUserAttributeResult read_user_attribute_result = 10;
  for (unsigned int i = 0, n = this->read_user_attribute_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->read_user_attribute_result(i), output);
  }

  // repeated .WebAPI_1.ModifyUserAttributeResult modify_user_attribute_result = 11;
  for (unsigned int i = 0, n = this->modify_user_attribute_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->modify_user_attribute_result(i), output);
  }

  // repeated .WebAPI_1.TimeAndSalesReport time_and_sales_report = 12;
  for (unsigned int i = 0, n = this->time_and_sales_report_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->time_and_sales_report(i), output);
  }

  // repeated .WebAPI_1.TimeBarReport time_bar_report = 13;
  for (unsigned int i = 0, n = this->time_bar_report_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->time_bar_report(i), output);
  }

  // optional .WebAPI_1.LogonResult logon_result = 100;
  if (has_logon_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->logon_result_, output);
  }

  // optional .WebAPI_1.RestoreSessionResult restore_session_result = 101;
  if (has_restore_session_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->restore_session_result_, output);
  }

  // optional .WebAPI_1.LoggedOff logged_off = 102;
  if (has_logged_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->logged_off_, output);
  }

  // optional .WebAPI_1.PasswordChangeResult password_change_result = 103;
  if (has_password_change_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->password_change_result_, output);
  }

  // repeated .WebAPI_1.UserMessage user_message = 104;
  for (unsigned int i = 0, n = this->user_message_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->user_message(i), output);
  }

  // optional .WebAPI_1.ObtainDemoCredentialsResult obtain_demo_credentials_result = 105;
  if (has_obtain_demo_credentials_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->obtain_demo_credentials_result_, output);
  }

  // optional .WebAPI_1.UserSessionStateResult user_session_state_result = 106;
  if (has_user_session_state_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->user_session_state_result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ServerMsg)
}

::google::protobuf::uint8* ServerMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ServerMsg)
  // repeated .WebAPI_1.InformationReport information_report = 1;
  for (unsigned int i = 0, n = this->information_report_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->information_report(i), false, target);
  }

  // repeated .WebAPI_1.OrderRequestReject order_request_reject = 2;
  for (unsigned int i = 0, n = this->order_request_reject_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->order_request_reject(i), false, target);
  }

  // repeated .WebAPI_1.TradeSubscriptionStatus trade_subscription_status = 3;
  for (unsigned int i = 0, n = this->trade_subscription_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->trade_subscription_status(i), false, target);
  }

  // repeated .WebAPI_1.TradeSnapshotCompletion trade_snapshot_completion = 4;
  for (unsigned int i = 0, n = this->trade_snapshot_completion_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->trade_snapshot_completion(i), false, target);
  }

  // repeated .WebAPI_1.OrderStatus order_status = 5;
  for (unsigned int i = 0, n = this->order_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->order_status(i), false, target);
  }

  // repeated .WebAPI_1.PositionStatus position_status = 6;
  for (unsigned int i = 0, n = this->position_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->position_status(i), false, target);
  }

  // repeated .WebAPI_1.CollateralStatus collateral_status = 7;
  for (unsigned int i = 0, n = this->collateral_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->collateral_status(i), false, target);
  }

  // repeated .WebAPI_1.MarketDataSubscriptionStatus market_data_subscription_status = 8;
  for (unsigned int i = 0, n = this->market_data_subscription_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->market_data_subscription_status(i), false, target);
  }

  // repeated .WebAPI_1.RealTimeMarketData real_time_market_data = 9;
  for (unsigned int i = 0, n = this->real_time_market_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->real_time_market_data(i), false, target);
  }

  // repeated .WebAPI_1.ReadUserAttributeResult read_user_attribute_result = 10;
  for (unsigned int i = 0, n = this->read_user_attribute_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->read_user_attribute_result(i), false, target);
  }

  // repeated .WebAPI_1.ModifyUserAttributeResult modify_user_attribute_result = 11;
  for (unsigned int i = 0, n = this->modify_user_attribute_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->modify_user_attribute_result(i), false, target);
  }

  // repeated .WebAPI_1.TimeAndSalesReport time_and_sales_report = 12;
  for (unsigned int i = 0, n = this->time_and_sales_report_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->time_and_sales_report(i), false, target);
  }

  // repeated .WebAPI_1.TimeBarReport time_bar_report = 13;
  for (unsigned int i = 0, n = this->time_bar_report_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->time_bar_report(i), false, target);
  }

  // optional .WebAPI_1.LogonResult logon_result = 100;
  if (has_logon_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->logon_result_, false, target);
  }

  // optional .WebAPI_1.RestoreSessionResult restore_session_result = 101;
  if (has_restore_session_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->restore_session_result_, false, target);
  }

  // optional .WebAPI_1.LoggedOff logged_off = 102;
  if (has_logged_off()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->logged_off_, false, target);
  }

  // optional .WebAPI_1.PasswordChangeResult password_change_result = 103;
  if (has_password_change_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->password_change_result_, false, target);
  }

  // repeated .WebAPI_1.UserMessage user_message = 104;
  for (unsigned int i = 0, n = this->user_message_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, this->user_message(i), false, target);
  }

  // optional .WebAPI_1.ObtainDemoCredentialsResult obtain_demo_credentials_result = 105;
  if (has_obtain_demo_credentials_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->obtain_demo_credentials_result_, false, target);
  }

  // optional .WebAPI_1.UserSessionStateResult user_session_state_result = 106;
  if (has_user_session_state_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->user_session_state_result_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ServerMsg)
  return target;
}

size_t ServerMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ServerMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WebAPI_1.UserMessage user_message = 104;
  {
    unsigned int count = this->user_message_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_message(i));
    }
  }

  // repeated .WebAPI_1.InformationReport information_report = 1;
  {
    unsigned int count = this->information_report_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->information_report(i));
    }
  }

  // repeated .WebAPI_1.OrderRequestReject order_request_reject = 2;
  {
    unsigned int count = this->order_request_reject_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_request_reject(i));
    }
  }

  // repeated .WebAPI_1.TradeSubscriptionStatus trade_subscription_status = 3;
  {
    unsigned int count = this->trade_subscription_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade_subscription_status(i));
    }
  }

  // repeated .WebAPI_1.TradeSnapshotCompletion trade_snapshot_completion = 4;
  {
    unsigned int count = this->trade_snapshot_completion_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade_snapshot_completion(i));
    }
  }

  // repeated .WebAPI_1.OrderStatus order_status = 5;
  {
    unsigned int count = this->order_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_status(i));
    }
  }

  // repeated .WebAPI_1.PositionStatus position_status = 6;
  {
    unsigned int count = this->position_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position_status(i));
    }
  }

  // repeated .WebAPI_1.CollateralStatus collateral_status = 7;
  {
    unsigned int count = this->collateral_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collateral_status(i));
    }
  }

  // repeated .WebAPI_1.MarketDataSubscriptionStatus market_data_subscription_status = 8;
  {
    unsigned int count = this->market_data_subscription_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market_data_subscription_status(i));
    }
  }

  // repeated .WebAPI_1.RealTimeMarketData real_time_market_data = 9;
  {
    unsigned int count = this->real_time_market_data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_time_market_data(i));
    }
  }

  // repeated .WebAPI_1.ReadUserAttributeResult read_user_attribute_result = 10;
  {
    unsigned int count = this->read_user_attribute_result_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_user_attribute_result(i));
    }
  }

  // repeated .WebAPI_1.ModifyUserAttributeResult modify_user_attribute_result = 11;
  {
    unsigned int count = this->modify_user_attribute_result_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_user_attribute_result(i));
    }
  }

  // repeated .WebAPI_1.TimeAndSalesReport time_and_sales_report = 12;
  {
    unsigned int count = this->time_and_sales_report_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_and_sales_report(i));
    }
  }

  // repeated .WebAPI_1.TimeBarReport time_bar_report = 13;
  {
    unsigned int count = this->time_bar_report_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_bar_report(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .WebAPI_1.LogonResult logon_result = 100;
    if (has_logon_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logon_result_);
    }

    // optional .WebAPI_1.RestoreSessionResult restore_session_result = 101;
    if (has_restore_session_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->restore_session_result_);
    }

    // optional .WebAPI_1.LoggedOff logged_off = 102;
    if (has_logged_off()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logged_off_);
    }

    // optional .WebAPI_1.PasswordChangeResult password_change_result = 103;
    if (has_password_change_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->password_change_result_);
    }

    // optional .WebAPI_1.ObtainDemoCredentialsResult obtain_demo_credentials_result = 105;
    if (has_obtain_demo_credentials_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->obtain_demo_credentials_result_);
    }

    // optional .WebAPI_1.UserSessionStateResult user_session_state_result = 106;
    if (has_user_session_state_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_session_state_result_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ServerMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ServerMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ServerMsg)
    MergeFrom(*source);
  }
}

void ServerMsg::MergeFrom(const ServerMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ServerMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_message_.MergeFrom(from.user_message_);
  information_report_.MergeFrom(from.information_report_);
  order_request_reject_.MergeFrom(from.order_request_reject_);
  trade_subscription_status_.MergeFrom(from.trade_subscription_status_);
  trade_snapshot_completion_.MergeFrom(from.trade_snapshot_completion_);
  order_status_.MergeFrom(from.order_status_);
  position_status_.MergeFrom(from.position_status_);
  collateral_status_.MergeFrom(from.collateral_status_);
  market_data_subscription_status_.MergeFrom(from.market_data_subscription_status_);
  real_time_market_data_.MergeFrom(from.real_time_market_data_);
  read_user_attribute_result_.MergeFrom(from.read_user_attribute_result_);
  modify_user_attribute_result_.MergeFrom(from.modify_user_attribute_result_);
  time_and_sales_report_.MergeFrom(from.time_and_sales_report_);
  time_bar_report_.MergeFrom(from.time_bar_report_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_logon_result()) {
      mutable_logon_result()->::WebAPI_1::LogonResult::MergeFrom(from.logon_result());
    }
    if (from.has_restore_session_result()) {
      mutable_restore_session_result()->::WebAPI_1::RestoreSessionResult::MergeFrom(from.restore_session_result());
    }
    if (from.has_logged_off()) {
      mutable_logged_off()->::WebAPI_1::LoggedOff::MergeFrom(from.logged_off());
    }
    if (from.has_password_change_result()) {
      mutable_password_change_result()->::WebAPI_1::PasswordChangeResult::MergeFrom(from.password_change_result());
    }
    if (from.has_obtain_demo_credentials_result()) {
      mutable_obtain_demo_credentials_result()->::WebAPI_1::ObtainDemoCredentialsResult::MergeFrom(from.obtain_demo_credentials_result());
    }
    if (from.has_user_session_state_result()) {
      mutable_user_session_state_result()->::WebAPI_1::UserSessionStateResult::MergeFrom(from.user_session_state_result());
    }
  }
}

void ServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ServerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMsg::CopyFrom(const ServerMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ServerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsg::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->user_message())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->information_report())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_request_reject())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trade_subscription_status())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trade_snapshot_completion())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->order_status())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->position_status())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->collateral_status())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->market_data_subscription_status())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->real_time_market_data())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->read_user_attribute_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->modify_user_attribute_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->time_and_sales_report())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->time_bar_report())) return false;
  if (has_logon_result()) {
    if (!this->logon_result_->IsInitialized()) return false;
  }
  if (has_restore_session_result()) {
    if (!this->restore_session_result_->IsInitialized()) return false;
  }
  if (has_logged_off()) {
    if (!this->logged_off_->IsInitialized()) return false;
  }
  if (has_password_change_result()) {
    if (!this->password_change_result_->IsInitialized()) return false;
  }
  if (has_obtain_demo_credentials_result()) {
    if (!this->obtain_demo_credentials_result_->IsInitialized()) return false;
  }
  if (has_user_session_state_result()) {
    if (!this->user_session_state_result_->IsInitialized()) return false;
  }
  return true;
}

void ServerMsg::Swap(ServerMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMsg::InternalSwap(ServerMsg* other) {
  user_message_.UnsafeArenaSwap(&other->user_message_);
  information_report_.UnsafeArenaSwap(&other->information_report_);
  order_request_reject_.UnsafeArenaSwap(&other->order_request_reject_);
  trade_subscription_status_.UnsafeArenaSwap(&other->trade_subscription_status_);
  trade_snapshot_completion_.UnsafeArenaSwap(&other->trade_snapshot_completion_);
  order_status_.UnsafeArenaSwap(&other->order_status_);
  position_status_.UnsafeArenaSwap(&other->position_status_);
  collateral_status_.UnsafeArenaSwap(&other->collateral_status_);
  market_data_subscription_status_.UnsafeArenaSwap(&other->market_data_subscription_status_);
  real_time_market_data_.UnsafeArenaSwap(&other->real_time_market_data_);
  read_user_attribute_result_.UnsafeArenaSwap(&other->read_user_attribute_result_);
  modify_user_attribute_result_.UnsafeArenaSwap(&other->modify_user_attribute_result_);
  time_and_sales_report_.UnsafeArenaSwap(&other->time_and_sales_report_);
  time_bar_report_.UnsafeArenaSwap(&other->time_bar_report_);
  std::swap(logon_result_, other->logon_result_);
  std::swap(restore_session_result_, other->restore_session_result_);
  std::swap(logged_off_, other->logged_off_);
  std::swap(password_change_result_, other->password_change_result_);
  std::swap(obtain_demo_credentials_result_, other->obtain_demo_credentials_result_);
  std::swap(user_session_state_result_, other->user_session_state_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerMsg

// optional .WebAPI_1.LogonResult logon_result = 100;
bool ServerMsg::has_logon_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerMsg::set_has_logon_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerMsg::clear_has_logon_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerMsg::clear_logon_result() {
  if (logon_result_ != NULL) logon_result_->::WebAPI_1::LogonResult::Clear();
  clear_has_logon_result();
}
const ::WebAPI_1::LogonResult& ServerMsg::logon_result() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.logon_result)
  return logon_result_ != NULL ? *logon_result_
                         : *::WebAPI_1::LogonResult::internal_default_instance();
}
::WebAPI_1::LogonResult* ServerMsg::mutable_logon_result() {
  set_has_logon_result();
  if (logon_result_ == NULL) {
    logon_result_ = new ::WebAPI_1::LogonResult;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.logon_result)
  return logon_result_;
}
::WebAPI_1::LogonResult* ServerMsg::release_logon_result() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ServerMsg.logon_result)
  clear_has_logon_result();
  ::WebAPI_1::LogonResult* temp = logon_result_;
  logon_result_ = NULL;
  return temp;
}
void ServerMsg::set_allocated_logon_result(::WebAPI_1::LogonResult* logon_result) {
  delete logon_result_;
  logon_result_ = logon_result;
  if (logon_result) {
    set_has_logon_result();
  } else {
    clear_has_logon_result();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ServerMsg.logon_result)
}

// optional .WebAPI_1.RestoreSessionResult restore_session_result = 101;
bool ServerMsg::has_restore_session_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerMsg::set_has_restore_session_result() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerMsg::clear_has_restore_session_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerMsg::clear_restore_session_result() {
  if (restore_session_result_ != NULL) restore_session_result_->::WebAPI_1::RestoreSessionResult::Clear();
  clear_has_restore_session_result();
}
const ::WebAPI_1::RestoreSessionResult& ServerMsg::restore_session_result() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.restore_session_result)
  return restore_session_result_ != NULL ? *restore_session_result_
                         : *::WebAPI_1::RestoreSessionResult::internal_default_instance();
}
::WebAPI_1::RestoreSessionResult* ServerMsg::mutable_restore_session_result() {
  set_has_restore_session_result();
  if (restore_session_result_ == NULL) {
    restore_session_result_ = new ::WebAPI_1::RestoreSessionResult;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.restore_session_result)
  return restore_session_result_;
}
::WebAPI_1::RestoreSessionResult* ServerMsg::release_restore_session_result() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ServerMsg.restore_session_result)
  clear_has_restore_session_result();
  ::WebAPI_1::RestoreSessionResult* temp = restore_session_result_;
  restore_session_result_ = NULL;
  return temp;
}
void ServerMsg::set_allocated_restore_session_result(::WebAPI_1::RestoreSessionResult* restore_session_result) {
  delete restore_session_result_;
  restore_session_result_ = restore_session_result;
  if (restore_session_result) {
    set_has_restore_session_result();
  } else {
    clear_has_restore_session_result();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ServerMsg.restore_session_result)
}

// optional .WebAPI_1.LoggedOff logged_off = 102;
bool ServerMsg::has_logged_off() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerMsg::set_has_logged_off() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerMsg::clear_has_logged_off() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerMsg::clear_logged_off() {
  if (logged_off_ != NULL) logged_off_->::WebAPI_1::LoggedOff::Clear();
  clear_has_logged_off();
}
const ::WebAPI_1::LoggedOff& ServerMsg::logged_off() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.logged_off)
  return logged_off_ != NULL ? *logged_off_
                         : *::WebAPI_1::LoggedOff::internal_default_instance();
}
::WebAPI_1::LoggedOff* ServerMsg::mutable_logged_off() {
  set_has_logged_off();
  if (logged_off_ == NULL) {
    logged_off_ = new ::WebAPI_1::LoggedOff;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.logged_off)
  return logged_off_;
}
::WebAPI_1::LoggedOff* ServerMsg::release_logged_off() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ServerMsg.logged_off)
  clear_has_logged_off();
  ::WebAPI_1::LoggedOff* temp = logged_off_;
  logged_off_ = NULL;
  return temp;
}
void ServerMsg::set_allocated_logged_off(::WebAPI_1::LoggedOff* logged_off) {
  delete logged_off_;
  logged_off_ = logged_off;
  if (logged_off) {
    set_has_logged_off();
  } else {
    clear_has_logged_off();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ServerMsg.logged_off)
}

// optional .WebAPI_1.PasswordChangeResult password_change_result = 103;
bool ServerMsg::has_password_change_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerMsg::set_has_password_change_result() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerMsg::clear_has_password_change_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerMsg::clear_password_change_result() {
  if (password_change_result_ != NULL) password_change_result_->::WebAPI_1::PasswordChangeResult::Clear();
  clear_has_password_change_result();
}
const ::WebAPI_1::PasswordChangeResult& ServerMsg::password_change_result() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.password_change_result)
  return password_change_result_ != NULL ? *password_change_result_
                         : *::WebAPI_1::PasswordChangeResult::internal_default_instance();
}
::WebAPI_1::PasswordChangeResult* ServerMsg::mutable_password_change_result() {
  set_has_password_change_result();
  if (password_change_result_ == NULL) {
    password_change_result_ = new ::WebAPI_1::PasswordChangeResult;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.password_change_result)
  return password_change_result_;
}
::WebAPI_1::PasswordChangeResult* ServerMsg::release_password_change_result() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ServerMsg.password_change_result)
  clear_has_password_change_result();
  ::WebAPI_1::PasswordChangeResult* temp = password_change_result_;
  password_change_result_ = NULL;
  return temp;
}
void ServerMsg::set_allocated_password_change_result(::WebAPI_1::PasswordChangeResult* password_change_result) {
  delete password_change_result_;
  password_change_result_ = password_change_result;
  if (password_change_result) {
    set_has_password_change_result();
  } else {
    clear_has_password_change_result();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ServerMsg.password_change_result)
}

// repeated .WebAPI_1.UserMessage user_message = 104;
int ServerMsg::user_message_size() const {
  return user_message_.size();
}
void ServerMsg::clear_user_message() {
  user_message_.Clear();
}
const ::WebAPI_1::UserMessage& ServerMsg::user_message(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.user_message)
  return user_message_.Get(index);
}
::WebAPI_1::UserMessage* ServerMsg::mutable_user_message(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.user_message)
  return user_message_.Mutable(index);
}
::WebAPI_1::UserMessage* ServerMsg::add_user_message() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.user_message)
  return user_message_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserMessage >*
ServerMsg::mutable_user_message() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.user_message)
  return &user_message_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserMessage >&
ServerMsg::user_message() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.user_message)
  return user_message_;
}

// optional .WebAPI_1.ObtainDemoCredentialsResult obtain_demo_credentials_result = 105;
bool ServerMsg::has_obtain_demo_credentials_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerMsg::set_has_obtain_demo_credentials_result() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerMsg::clear_has_obtain_demo_credentials_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerMsg::clear_obtain_demo_credentials_result() {
  if (obtain_demo_credentials_result_ != NULL) obtain_demo_credentials_result_->::WebAPI_1::ObtainDemoCredentialsResult::Clear();
  clear_has_obtain_demo_credentials_result();
}
const ::WebAPI_1::ObtainDemoCredentialsResult& ServerMsg::obtain_demo_credentials_result() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.obtain_demo_credentials_result)
  return obtain_demo_credentials_result_ != NULL ? *obtain_demo_credentials_result_
                         : *::WebAPI_1::ObtainDemoCredentialsResult::internal_default_instance();
}
::WebAPI_1::ObtainDemoCredentialsResult* ServerMsg::mutable_obtain_demo_credentials_result() {
  set_has_obtain_demo_credentials_result();
  if (obtain_demo_credentials_result_ == NULL) {
    obtain_demo_credentials_result_ = new ::WebAPI_1::ObtainDemoCredentialsResult;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.obtain_demo_credentials_result)
  return obtain_demo_credentials_result_;
}
::WebAPI_1::ObtainDemoCredentialsResult* ServerMsg::release_obtain_demo_credentials_result() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ServerMsg.obtain_demo_credentials_result)
  clear_has_obtain_demo_credentials_result();
  ::WebAPI_1::ObtainDemoCredentialsResult* temp = obtain_demo_credentials_result_;
  obtain_demo_credentials_result_ = NULL;
  return temp;
}
void ServerMsg::set_allocated_obtain_demo_credentials_result(::WebAPI_1::ObtainDemoCredentialsResult* obtain_demo_credentials_result) {
  delete obtain_demo_credentials_result_;
  obtain_demo_credentials_result_ = obtain_demo_credentials_result;
  if (obtain_demo_credentials_result) {
    set_has_obtain_demo_credentials_result();
  } else {
    clear_has_obtain_demo_credentials_result();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ServerMsg.obtain_demo_credentials_result)
}

// optional .WebAPI_1.UserSessionStateResult user_session_state_result = 106;
bool ServerMsg::has_user_session_state_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerMsg::set_has_user_session_state_result() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerMsg::clear_has_user_session_state_result() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerMsg::clear_user_session_state_result() {
  if (user_session_state_result_ != NULL) user_session_state_result_->::WebAPI_1::UserSessionStateResult::Clear();
  clear_has_user_session_state_result();
}
const ::WebAPI_1::UserSessionStateResult& ServerMsg::user_session_state_result() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.user_session_state_result)
  return user_session_state_result_ != NULL ? *user_session_state_result_
                         : *::WebAPI_1::UserSessionStateResult::internal_default_instance();
}
::WebAPI_1::UserSessionStateResult* ServerMsg::mutable_user_session_state_result() {
  set_has_user_session_state_result();
  if (user_session_state_result_ == NULL) {
    user_session_state_result_ = new ::WebAPI_1::UserSessionStateResult;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.user_session_state_result)
  return user_session_state_result_;
}
::WebAPI_1::UserSessionStateResult* ServerMsg::release_user_session_state_result() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ServerMsg.user_session_state_result)
  clear_has_user_session_state_result();
  ::WebAPI_1::UserSessionStateResult* temp = user_session_state_result_;
  user_session_state_result_ = NULL;
  return temp;
}
void ServerMsg::set_allocated_user_session_state_result(::WebAPI_1::UserSessionStateResult* user_session_state_result) {
  delete user_session_state_result_;
  user_session_state_result_ = user_session_state_result;
  if (user_session_state_result) {
    set_has_user_session_state_result();
  } else {
    clear_has_user_session_state_result();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ServerMsg.user_session_state_result)
}

// repeated .WebAPI_1.InformationReport information_report = 1;
int ServerMsg::information_report_size() const {
  return information_report_.size();
}
void ServerMsg::clear_information_report() {
  information_report_.Clear();
}
const ::WebAPI_1::InformationReport& ServerMsg::information_report(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.information_report)
  return information_report_.Get(index);
}
::WebAPI_1::InformationReport* ServerMsg::mutable_information_report(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.information_report)
  return information_report_.Mutable(index);
}
::WebAPI_1::InformationReport* ServerMsg::add_information_report() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.information_report)
  return information_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::InformationReport >*
ServerMsg::mutable_information_report() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.information_report)
  return &information_report_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::InformationReport >&
ServerMsg::information_report() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.information_report)
  return information_report_;
}

// repeated .WebAPI_1.OrderRequestReject order_request_reject = 2;
int ServerMsg::order_request_reject_size() const {
  return order_request_reject_.size();
}
void ServerMsg::clear_order_request_reject() {
  order_request_reject_.Clear();
}
const ::WebAPI_1::OrderRequestReject& ServerMsg::order_request_reject(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.order_request_reject)
  return order_request_reject_.Get(index);
}
::WebAPI_1::OrderRequestReject* ServerMsg::mutable_order_request_reject(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.order_request_reject)
  return order_request_reject_.Mutable(index);
}
::WebAPI_1::OrderRequestReject* ServerMsg::add_order_request_reject() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.order_request_reject)
  return order_request_reject_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::OrderRequestReject >*
ServerMsg::mutable_order_request_reject() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.order_request_reject)
  return &order_request_reject_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::OrderRequestReject >&
ServerMsg::order_request_reject() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.order_request_reject)
  return order_request_reject_;
}

// repeated .WebAPI_1.TradeSubscriptionStatus trade_subscription_status = 3;
int ServerMsg::trade_subscription_status_size() const {
  return trade_subscription_status_.size();
}
void ServerMsg::clear_trade_subscription_status() {
  trade_subscription_status_.Clear();
}
const ::WebAPI_1::TradeSubscriptionStatus& ServerMsg::trade_subscription_status(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.trade_subscription_status)
  return trade_subscription_status_.Get(index);
}
::WebAPI_1::TradeSubscriptionStatus* ServerMsg::mutable_trade_subscription_status(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.trade_subscription_status)
  return trade_subscription_status_.Mutable(index);
}
::WebAPI_1::TradeSubscriptionStatus* ServerMsg::add_trade_subscription_status() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.trade_subscription_status)
  return trade_subscription_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TradeSubscriptionStatus >*
ServerMsg::mutable_trade_subscription_status() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.trade_subscription_status)
  return &trade_subscription_status_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TradeSubscriptionStatus >&
ServerMsg::trade_subscription_status() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.trade_subscription_status)
  return trade_subscription_status_;
}

// repeated .WebAPI_1.TradeSnapshotCompletion trade_snapshot_completion = 4;
int ServerMsg::trade_snapshot_completion_size() const {
  return trade_snapshot_completion_.size();
}
void ServerMsg::clear_trade_snapshot_completion() {
  trade_snapshot_completion_.Clear();
}
const ::WebAPI_1::TradeSnapshotCompletion& ServerMsg::trade_snapshot_completion(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.trade_snapshot_completion)
  return trade_snapshot_completion_.Get(index);
}
::WebAPI_1::TradeSnapshotCompletion* ServerMsg::mutable_trade_snapshot_completion(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.trade_snapshot_completion)
  return trade_snapshot_completion_.Mutable(index);
}
::WebAPI_1::TradeSnapshotCompletion* ServerMsg::add_trade_snapshot_completion() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.trade_snapshot_completion)
  return trade_snapshot_completion_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TradeSnapshotCompletion >*
ServerMsg::mutable_trade_snapshot_completion() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.trade_snapshot_completion)
  return &trade_snapshot_completion_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TradeSnapshotCompletion >&
ServerMsg::trade_snapshot_completion() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.trade_snapshot_completion)
  return trade_snapshot_completion_;
}

// repeated .WebAPI_1.OrderStatus order_status = 5;
int ServerMsg::order_status_size() const {
  return order_status_.size();
}
void ServerMsg::clear_order_status() {
  order_status_.Clear();
}
const ::WebAPI_1::OrderStatus& ServerMsg::order_status(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.order_status)
  return order_status_.Get(index);
}
::WebAPI_1::OrderStatus* ServerMsg::mutable_order_status(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.order_status)
  return order_status_.Mutable(index);
}
::WebAPI_1::OrderStatus* ServerMsg::add_order_status() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.order_status)
  return order_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::OrderStatus >*
ServerMsg::mutable_order_status() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.order_status)
  return &order_status_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::OrderStatus >&
ServerMsg::order_status() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.order_status)
  return order_status_;
}

// repeated .WebAPI_1.PositionStatus position_status = 6;
int ServerMsg::position_status_size() const {
  return position_status_.size();
}
void ServerMsg::clear_position_status() {
  position_status_.Clear();
}
const ::WebAPI_1::PositionStatus& ServerMsg::position_status(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.position_status)
  return position_status_.Get(index);
}
::WebAPI_1::PositionStatus* ServerMsg::mutable_position_status(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.position_status)
  return position_status_.Mutable(index);
}
::WebAPI_1::PositionStatus* ServerMsg::add_position_status() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.position_status)
  return position_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::PositionStatus >*
ServerMsg::mutable_position_status() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.position_status)
  return &position_status_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::PositionStatus >&
ServerMsg::position_status() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.position_status)
  return position_status_;
}

// repeated .WebAPI_1.CollateralStatus collateral_status = 7;
int ServerMsg::collateral_status_size() const {
  return collateral_status_.size();
}
void ServerMsg::clear_collateral_status() {
  collateral_status_.Clear();
}
const ::WebAPI_1::CollateralStatus& ServerMsg::collateral_status(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.collateral_status)
  return collateral_status_.Get(index);
}
::WebAPI_1::CollateralStatus* ServerMsg::mutable_collateral_status(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.collateral_status)
  return collateral_status_.Mutable(index);
}
::WebAPI_1::CollateralStatus* ServerMsg::add_collateral_status() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.collateral_status)
  return collateral_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::CollateralStatus >*
ServerMsg::mutable_collateral_status() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.collateral_status)
  return &collateral_status_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::CollateralStatus >&
ServerMsg::collateral_status() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.collateral_status)
  return collateral_status_;
}

// repeated .WebAPI_1.MarketDataSubscriptionStatus market_data_subscription_status = 8;
int ServerMsg::market_data_subscription_status_size() const {
  return market_data_subscription_status_.size();
}
void ServerMsg::clear_market_data_subscription_status() {
  market_data_subscription_status_.Clear();
}
const ::WebAPI_1::MarketDataSubscriptionStatus& ServerMsg::market_data_subscription_status(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.market_data_subscription_status)
  return market_data_subscription_status_.Get(index);
}
::WebAPI_1::MarketDataSubscriptionStatus* ServerMsg::mutable_market_data_subscription_status(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.market_data_subscription_status)
  return market_data_subscription_status_.Mutable(index);
}
::WebAPI_1::MarketDataSubscriptionStatus* ServerMsg::add_market_data_subscription_status() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.market_data_subscription_status)
  return market_data_subscription_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::MarketDataSubscriptionStatus >*
ServerMsg::mutable_market_data_subscription_status() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.market_data_subscription_status)
  return &market_data_subscription_status_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::MarketDataSubscriptionStatus >&
ServerMsg::market_data_subscription_status() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.market_data_subscription_status)
  return market_data_subscription_status_;
}

// repeated .WebAPI_1.RealTimeMarketData real_time_market_data = 9;
int ServerMsg::real_time_market_data_size() const {
  return real_time_market_data_.size();
}
void ServerMsg::clear_real_time_market_data() {
  real_time_market_data_.Clear();
}
const ::WebAPI_1::RealTimeMarketData& ServerMsg::real_time_market_data(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.real_time_market_data)
  return real_time_market_data_.Get(index);
}
::WebAPI_1::RealTimeMarketData* ServerMsg::mutable_real_time_market_data(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.real_time_market_data)
  return real_time_market_data_.Mutable(index);
}
::WebAPI_1::RealTimeMarketData* ServerMsg::add_real_time_market_data() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.real_time_market_data)
  return real_time_market_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::RealTimeMarketData >*
ServerMsg::mutable_real_time_market_data() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.real_time_market_data)
  return &real_time_market_data_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::RealTimeMarketData >&
ServerMsg::real_time_market_data() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.real_time_market_data)
  return real_time_market_data_;
}

// repeated .WebAPI_1.ReadUserAttributeResult read_user_attribute_result = 10;
int ServerMsg::read_user_attribute_result_size() const {
  return read_user_attribute_result_.size();
}
void ServerMsg::clear_read_user_attribute_result() {
  read_user_attribute_result_.Clear();
}
const ::WebAPI_1::ReadUserAttributeResult& ServerMsg::read_user_attribute_result(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.read_user_attribute_result)
  return read_user_attribute_result_.Get(index);
}
::WebAPI_1::ReadUserAttributeResult* ServerMsg::mutable_read_user_attribute_result(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.read_user_attribute_result)
  return read_user_attribute_result_.Mutable(index);
}
::WebAPI_1::ReadUserAttributeResult* ServerMsg::add_read_user_attribute_result() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.read_user_attribute_result)
  return read_user_attribute_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::ReadUserAttributeResult >*
ServerMsg::mutable_read_user_attribute_result() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.read_user_attribute_result)
  return &read_user_attribute_result_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::ReadUserAttributeResult >&
ServerMsg::read_user_attribute_result() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.read_user_attribute_result)
  return read_user_attribute_result_;
}

// repeated .WebAPI_1.ModifyUserAttributeResult modify_user_attribute_result = 11;
int ServerMsg::modify_user_attribute_result_size() const {
  return modify_user_attribute_result_.size();
}
void ServerMsg::clear_modify_user_attribute_result() {
  modify_user_attribute_result_.Clear();
}
const ::WebAPI_1::ModifyUserAttributeResult& ServerMsg::modify_user_attribute_result(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.modify_user_attribute_result)
  return modify_user_attribute_result_.Get(index);
}
::WebAPI_1::ModifyUserAttributeResult* ServerMsg::mutable_modify_user_attribute_result(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.modify_user_attribute_result)
  return modify_user_attribute_result_.Mutable(index);
}
::WebAPI_1::ModifyUserAttributeResult* ServerMsg::add_modify_user_attribute_result() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.modify_user_attribute_result)
  return modify_user_attribute_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::ModifyUserAttributeResult >*
ServerMsg::mutable_modify_user_attribute_result() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.modify_user_attribute_result)
  return &modify_user_attribute_result_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::ModifyUserAttributeResult >&
ServerMsg::modify_user_attribute_result() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.modify_user_attribute_result)
  return modify_user_attribute_result_;
}

// repeated .WebAPI_1.TimeAndSalesReport time_and_sales_report = 12;
int ServerMsg::time_and_sales_report_size() const {
  return time_and_sales_report_.size();
}
void ServerMsg::clear_time_and_sales_report() {
  time_and_sales_report_.Clear();
}
const ::WebAPI_1::TimeAndSalesReport& ServerMsg::time_and_sales_report(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.time_and_sales_report)
  return time_and_sales_report_.Get(index);
}
::WebAPI_1::TimeAndSalesReport* ServerMsg::mutable_time_and_sales_report(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.time_and_sales_report)
  return time_and_sales_report_.Mutable(index);
}
::WebAPI_1::TimeAndSalesReport* ServerMsg::add_time_and_sales_report() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.time_and_sales_report)
  return time_and_sales_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeAndSalesReport >*
ServerMsg::mutable_time_and_sales_report() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.time_and_sales_report)
  return &time_and_sales_report_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeAndSalesReport >&
ServerMsg::time_and_sales_report() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.time_and_sales_report)
  return time_and_sales_report_;
}

// repeated .WebAPI_1.TimeBarReport time_bar_report = 13;
int ServerMsg::time_bar_report_size() const {
  return time_bar_report_.size();
}
void ServerMsg::clear_time_bar_report() {
  time_bar_report_.Clear();
}
const ::WebAPI_1::TimeBarReport& ServerMsg::time_bar_report(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ServerMsg.time_bar_report)
  return time_bar_report_.Get(index);
}
::WebAPI_1::TimeBarReport* ServerMsg::mutable_time_bar_report(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ServerMsg.time_bar_report)
  return time_bar_report_.Mutable(index);
}
::WebAPI_1::TimeBarReport* ServerMsg::add_time_bar_report() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ServerMsg.time_bar_report)
  return time_bar_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeBarReport >*
ServerMsg::mutable_time_bar_report() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ServerMsg.time_bar_report)
  return &time_bar_report_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeBarReport >&
ServerMsg::time_bar_report() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ServerMsg.time_bar_report)
  return time_bar_report_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealTimeCollapsing::RealTimeCollapsing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.RealTimeCollapsing)
}
RealTimeCollapsing::RealTimeCollapsing(const RealTimeCollapsing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.RealTimeCollapsing)
}

void RealTimeCollapsing::SharedCtor() {
  _cached_size_ = 0;
}

RealTimeCollapsing::~RealTimeCollapsing() {
  // @@protoc_insertion_point(destructor:WebAPI_1.RealTimeCollapsing)
  SharedDtor();
}

void RealTimeCollapsing::SharedDtor() {
}

void RealTimeCollapsing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeCollapsing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const RealTimeCollapsing& RealTimeCollapsing::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

RealTimeCollapsing* RealTimeCollapsing::New(::google::protobuf::Arena* arena) const {
  RealTimeCollapsing* n = new RealTimeCollapsing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealTimeCollapsing::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.RealTimeCollapsing)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RealTimeCollapsing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.RealTimeCollapsing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.RealTimeCollapsing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.RealTimeCollapsing)
  return false;
#undef DO_
}

void RealTimeCollapsing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.RealTimeCollapsing)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.RealTimeCollapsing)
}

::google::protobuf::uint8* RealTimeCollapsing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.RealTimeCollapsing)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.RealTimeCollapsing)
  return target;
}

size_t RealTimeCollapsing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.RealTimeCollapsing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeCollapsing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.RealTimeCollapsing)
  GOOGLE_DCHECK_NE(&from, this);
  const RealTimeCollapsing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealTimeCollapsing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.RealTimeCollapsing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.RealTimeCollapsing)
    MergeFrom(*source);
  }
}

void RealTimeCollapsing::MergeFrom(const RealTimeCollapsing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.RealTimeCollapsing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void RealTimeCollapsing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.RealTimeCollapsing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeCollapsing::CopyFrom(const RealTimeCollapsing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.RealTimeCollapsing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeCollapsing::IsInitialized() const {
  return true;
}

void RealTimeCollapsing::Swap(RealTimeCollapsing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealTimeCollapsing::InternalSwap(RealTimeCollapsing* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealTimeCollapsing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealTimeCollapsing

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logon::kUserNameFieldNumber;
const int Logon::kPasswordFieldNumber;
const int Logon::kOneTimePasswordFieldNumber;
const int Logon::kPrivateLabelFieldNumber;
const int Logon::kClientIdFieldNumber;
const int Logon::kClientVersionFieldNumber;
const int Logon::kDropConcurrentSessionFieldNumber;
const int Logon::kCollapsingLevelFieldNumber;
const int Logon::kProtocolVersionMinorFieldNumber;
const int Logon::kProtocolVersionMajorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logon::Logon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Logon)
}
Logon::Logon(const Logon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  one_time_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_one_time_password()) {
    one_time_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.one_time_password_);
  }
  private_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_label()) {
    private_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_label_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_version()) {
    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  ::memcpy(&drop_concurrent_session_, &from.drop_concurrent_session_,
    reinterpret_cast<char*>(&protocol_version_major_) -
    reinterpret_cast<char*>(&drop_concurrent_session_) + sizeof(protocol_version_major_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Logon)
}

void Logon::SharedCtor() {
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  one_time_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&drop_concurrent_session_, 0, reinterpret_cast<char*>(&protocol_version_major_) -
    reinterpret_cast<char*>(&drop_concurrent_session_) + sizeof(protocol_version_major_));
}

Logon::~Logon() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Logon)
  SharedDtor();
}

void Logon::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  one_time_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Logon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const Logon& Logon::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Logon* Logon::New(::google::protobuf::Arena* arena) const {
  Logon* n = new Logon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logon::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Logon)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_user_name()) {
      GOOGLE_DCHECK(!user_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_one_time_password()) {
      GOOGLE_DCHECK(!one_time_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*one_time_password_.UnsafeRawStringPointer())->clear();
    }
    if (has_private_label()) {
      GOOGLE_DCHECK(!private_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*private_label_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_id()) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_version()) {
      GOOGLE_DCHECK(!client_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&drop_concurrent_session_, 0, reinterpret_cast<char*>(&collapsing_level_) -
      reinterpret_cast<char*>(&drop_concurrent_session_) + sizeof(collapsing_level_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&protocol_version_minor_, 0, reinterpret_cast<char*>(&protocol_version_major_) -
      reinterpret_cast<char*>(&protocol_version_minor_) + sizeof(protocol_version_major_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Logon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Logon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Logon.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Logon.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string one_time_password = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_one_time_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->one_time_password().data(), this->one_time_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Logon.one_time_password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string private_label = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_label().data(), this->private_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Logon.private_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string client_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Logon.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string client_version = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_version().data(), this->client_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Logon.client_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool drop_concurrent_session = 7;
      case 7: {
        if (tag == 56u) {
          set_has_drop_concurrent_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_concurrent_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collapsing_level = 8;
      case 8: {
        if (tag == 64u) {
          set_has_collapsing_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collapsing_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version_minor = 9;
      case 9: {
        if (tag == 72u) {
          set_has_protocol_version_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version_major = 10;
      case 10: {
        if (tag == 80u) {
          set_has_protocol_version_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Logon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Logon)
  return false;
#undef DO_
}

void Logon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Logon)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string one_time_password = 3;
  if (has_one_time_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->one_time_password().data(), this->one_time_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.one_time_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->one_time_password(), output);
  }

  // optional string private_label = 4;
  if (has_private_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_label().data(), this->private_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.private_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->private_label(), output);
  }

  // required string client_id = 5;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_id(), output);
  }

  // required string client_version = 6;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.client_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_version(), output);
  }

  // optional bool drop_concurrent_session = 7;
  if (has_drop_concurrent_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->drop_concurrent_session(), output);
  }

  // optional uint32 collapsing_level = 8;
  if (has_collapsing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->collapsing_level(), output);
  }

  // optional uint32 protocol_version_minor = 9;
  if (has_protocol_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->protocol_version_minor(), output);
  }

  // optional uint32 protocol_version_major = 10;
  if (has_protocol_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->protocol_version_major(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Logon)
}

::google::protobuf::uint8* Logon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Logon)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string one_time_password = 3;
  if (has_one_time_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->one_time_password().data(), this->one_time_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.one_time_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->one_time_password(), target);
  }

  // optional string private_label = 4;
  if (has_private_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_label().data(), this->private_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.private_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->private_label(), target);
  }

  // required string client_id = 5;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_id(), target);
  }

  // required string client_version = 6;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logon.client_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_version(), target);
  }

  // optional bool drop_concurrent_session = 7;
  if (has_drop_concurrent_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->drop_concurrent_session(), target);
  }

  // optional uint32 collapsing_level = 8;
  if (has_collapsing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->collapsing_level(), target);
  }

  // optional uint32 protocol_version_minor = 9;
  if (has_protocol_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->protocol_version_minor(), target);
  }

  // optional uint32 protocol_version_major = 10;
  if (has_protocol_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->protocol_version_major(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Logon)
  return target;
}

size_t Logon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.Logon)
  size_t total_size = 0;

  if (has_user_name()) {
    // required string user_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_client_id()) {
    // required string client_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_client_version()) {
    // required string client_version = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  return total_size;
}
size_t Logon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Logon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required string user_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required string client_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required string client_version = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional string one_time_password = 3;
    if (has_one_time_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->one_time_password());
    }

    // optional string private_label = 4;
    if (has_private_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_label());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional bool drop_concurrent_session = 7;
    if (has_drop_concurrent_session()) {
      total_size += 1 + 1;
    }

    // optional uint32 collapsing_level = 8;
    if (has_collapsing_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collapsing_level());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 protocol_version_minor = 9;
    if (has_protocol_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version_minor());
    }

    // optional uint32 protocol_version_major = 10;
    if (has_protocol_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version_major());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Logon)
  GOOGLE_DCHECK_NE(&from, this);
  const Logon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Logon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Logon)
    MergeFrom(*source);
  }
}

void Logon::MergeFrom(const Logon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Logon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_one_time_password()) {
      set_has_one_time_password();
      one_time_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.one_time_password_);
    }
    if (from.has_private_label()) {
      set_has_private_label();
      private_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_label_);
    }
    if (from.has_client_id()) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (from.has_client_version()) {
      set_has_client_version();
      client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
    }
    if (from.has_drop_concurrent_session()) {
      set_drop_concurrent_session(from.drop_concurrent_session());
    }
    if (from.has_collapsing_level()) {
      set_collapsing_level(from.collapsing_level());
    }
  }
  if (from._has_bits_[8 / 32] & 768u) {
    if (from.has_protocol_version_minor()) {
      set_protocol_version_minor(from.protocol_version_minor());
    }
    if (from.has_protocol_version_major()) {
      set_protocol_version_major(from.protocol_version_major());
    }
  }
}

void Logon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logon::CopyFrom(const Logon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;
  return true;
}

void Logon::Swap(Logon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logon::InternalSwap(Logon* other) {
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  one_time_password_.Swap(&other->one_time_password_);
  private_label_.Swap(&other->private_label_);
  client_id_.Swap(&other->client_id_);
  client_version_.Swap(&other->client_version_);
  std::swap(drop_concurrent_session_, other->drop_concurrent_session_);
  std::swap(collapsing_level_, other->collapsing_level_);
  std::swap(protocol_version_minor_, other->protocol_version_minor_);
  std::swap(protocol_version_major_, other->protocol_version_major_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logon

// required string user_name = 1;
bool Logon::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Logon::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Logon::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Logon::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
const ::std::string& Logon::user_name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.user_name)
  return user_name_.GetNoArena();
}
void Logon::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.user_name)
}
void Logon::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Logon.user_name)
}
void Logon::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Logon.user_name)
}
::std::string* Logon::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Logon.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logon::release_user_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Logon.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logon::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Logon.user_name)
}

// required string password = 2;
bool Logon::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Logon::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void Logon::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void Logon::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& Logon::password() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.password)
  return password_.GetNoArena();
}
void Logon::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.password)
}
void Logon::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Logon.password)
}
void Logon::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Logon.password)
}
::std::string* Logon::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Logon.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logon::release_password() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Logon.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logon::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Logon.password)
}

// optional string one_time_password = 3;
bool Logon::has_one_time_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Logon::set_has_one_time_password() {
  _has_bits_[0] |= 0x00000004u;
}
void Logon::clear_has_one_time_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void Logon::clear_one_time_password() {
  one_time_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_one_time_password();
}
const ::std::string& Logon::one_time_password() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.one_time_password)
  return one_time_password_.GetNoArena();
}
void Logon::set_one_time_password(const ::std::string& value) {
  set_has_one_time_password();
  one_time_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.one_time_password)
}
void Logon::set_one_time_password(const char* value) {
  set_has_one_time_password();
  one_time_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Logon.one_time_password)
}
void Logon::set_one_time_password(const char* value, size_t size) {
  set_has_one_time_password();
  one_time_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Logon.one_time_password)
}
::std::string* Logon::mutable_one_time_password() {
  set_has_one_time_password();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Logon.one_time_password)
  return one_time_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logon::release_one_time_password() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Logon.one_time_password)
  clear_has_one_time_password();
  return one_time_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logon::set_allocated_one_time_password(::std::string* one_time_password) {
  if (one_time_password != NULL) {
    set_has_one_time_password();
  } else {
    clear_has_one_time_password();
  }
  one_time_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), one_time_password);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Logon.one_time_password)
}

// optional string private_label = 4;
bool Logon::has_private_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Logon::set_has_private_label() {
  _has_bits_[0] |= 0x00000008u;
}
void Logon::clear_has_private_label() {
  _has_bits_[0] &= ~0x00000008u;
}
void Logon::clear_private_label() {
  private_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_label();
}
const ::std::string& Logon::private_label() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.private_label)
  return private_label_.GetNoArena();
}
void Logon::set_private_label(const ::std::string& value) {
  set_has_private_label();
  private_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.private_label)
}
void Logon::set_private_label(const char* value) {
  set_has_private_label();
  private_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Logon.private_label)
}
void Logon::set_private_label(const char* value, size_t size) {
  set_has_private_label();
  private_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Logon.private_label)
}
::std::string* Logon::mutable_private_label() {
  set_has_private_label();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Logon.private_label)
  return private_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logon::release_private_label() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Logon.private_label)
  clear_has_private_label();
  return private_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logon::set_allocated_private_label(::std::string* private_label) {
  if (private_label != NULL) {
    set_has_private_label();
  } else {
    clear_has_private_label();
  }
  private_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_label);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Logon.private_label)
}

// required string client_id = 5;
bool Logon::has_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Logon::set_has_client_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Logon::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Logon::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& Logon::client_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.client_id)
  return client_id_.GetNoArena();
}
void Logon::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.client_id)
}
void Logon::set_client_id(const char* value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Logon.client_id)
}
void Logon::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Logon.client_id)
}
::std::string* Logon::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Logon.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logon::release_client_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Logon.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logon::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Logon.client_id)
}

// required string client_version = 6;
bool Logon::has_client_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Logon::set_has_client_version() {
  _has_bits_[0] |= 0x00000020u;
}
void Logon::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void Logon::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_version();
}
const ::std::string& Logon::client_version() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.client_version)
  return client_version_.GetNoArena();
}
void Logon::set_client_version(const ::std::string& value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.client_version)
}
void Logon::set_client_version(const char* value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Logon.client_version)
}
void Logon::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Logon.client_version)
}
::std::string* Logon::mutable_client_version() {
  set_has_client_version();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Logon.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logon::release_client_version() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Logon.client_version)
  clear_has_client_version();
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logon::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    set_has_client_version();
  } else {
    clear_has_client_version();
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Logon.client_version)
}

// optional bool drop_concurrent_session = 7;
bool Logon::has_drop_concurrent_session() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Logon::set_has_drop_concurrent_session() {
  _has_bits_[0] |= 0x00000040u;
}
void Logon::clear_has_drop_concurrent_session() {
  _has_bits_[0] &= ~0x00000040u;
}
void Logon::clear_drop_concurrent_session() {
  drop_concurrent_session_ = false;
  clear_has_drop_concurrent_session();
}
bool Logon::drop_concurrent_session() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.drop_concurrent_session)
  return drop_concurrent_session_;
}
void Logon::set_drop_concurrent_session(bool value) {
  set_has_drop_concurrent_session();
  drop_concurrent_session_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.drop_concurrent_session)
}

// optional uint32 collapsing_level = 8;
bool Logon::has_collapsing_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Logon::set_has_collapsing_level() {
  _has_bits_[0] |= 0x00000080u;
}
void Logon::clear_has_collapsing_level() {
  _has_bits_[0] &= ~0x00000080u;
}
void Logon::clear_collapsing_level() {
  collapsing_level_ = 0u;
  clear_has_collapsing_level();
}
::google::protobuf::uint32 Logon::collapsing_level() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.collapsing_level)
  return collapsing_level_;
}
void Logon::set_collapsing_level(::google::protobuf::uint32 value) {
  set_has_collapsing_level();
  collapsing_level_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.collapsing_level)
}

// optional uint32 protocol_version_minor = 9;
bool Logon::has_protocol_version_minor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Logon::set_has_protocol_version_minor() {
  _has_bits_[0] |= 0x00000100u;
}
void Logon::clear_has_protocol_version_minor() {
  _has_bits_[0] &= ~0x00000100u;
}
void Logon::clear_protocol_version_minor() {
  protocol_version_minor_ = 0u;
  clear_has_protocol_version_minor();
}
::google::protobuf::uint32 Logon::protocol_version_minor() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.protocol_version_minor)
  return protocol_version_minor_;
}
void Logon::set_protocol_version_minor(::google::protobuf::uint32 value) {
  set_has_protocol_version_minor();
  protocol_version_minor_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.protocol_version_minor)
}

// optional uint32 protocol_version_major = 10;
bool Logon::has_protocol_version_major() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Logon::set_has_protocol_version_major() {
  _has_bits_[0] |= 0x00000200u;
}
void Logon::clear_has_protocol_version_major() {
  _has_bits_[0] &= ~0x00000200u;
}
void Logon::clear_protocol_version_major() {
  protocol_version_major_ = 0u;
  clear_has_protocol_version_major();
}
::google::protobuf::uint32 Logon::protocol_version_major() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logon.protocol_version_major)
  return protocol_version_major_;
}
void Logon::set_protocol_version_major(::google::protobuf::uint32 value) {
  set_has_protocol_version_major();
  protocol_version_major_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Logon.protocol_version_major)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogonResult::kResultCodeFieldNumber;
const int LogonResult::kBaseTimeFieldNumber;
const int LogonResult::kSessionTokenFieldNumber;
const int LogonResult::kTextMessageFieldNumber;
const int LogonResult::kRedirectUrlFieldNumber;
const int LogonResult::kProtocolVersionMinorFieldNumber;
const int LogonResult::kProtocolVersionMajorFieldNumber;
const int LogonResult::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogonResult::LogonResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.LogonResult)
}
LogonResult::LogonResult(const LogonResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_time()) {
    base_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_time_);
  }
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_token()) {
    session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_url()) {
    redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_url_);
  }
  ::memcpy(&result_code_, &from.result_code_,
    reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&result_code_) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.LogonResult)
}

void LogonResult::SharedCtor() {
  _cached_size_ = 0;
  base_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&result_code_) + sizeof(user_id_));
}

LogonResult::~LogonResult() {
  // @@protoc_insertion_point(destructor:WebAPI_1.LogonResult)
  SharedDtor();
}

void LogonResult::SharedDtor() {
  base_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogonResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogonResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const LogonResult& LogonResult::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

LogonResult* LogonResult::New(::google::protobuf::Arena* arena) const {
  LogonResult* n = new LogonResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogonResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.LogonResult)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_base_time()) {
      GOOGLE_DCHECK(!base_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*base_time_.UnsafeRawStringPointer())->clear();
    }
    if (has_session_token()) {
      GOOGLE_DCHECK(!session_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*session_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_text_message()) {
      GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_redirect_url()) {
      GOOGLE_DCHECK(!redirect_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirect_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&result_code_, 0, reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_code_) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogonResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.LogonResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string base_time = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_time().data(), this->base_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.LogonResult.base_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.LogonResult.session_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.LogonResult.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_url = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_url().data(), this->redirect_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.LogonResult.redirect_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 protocol_version_minor = 6;
      case 6: {
        if (tag == 48u) {
          set_has_protocol_version_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 protocol_version_major = 7;
      case 7: {
        if (tag == 56u) {
          set_has_protocol_version_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 user_id = 8;
      case 8: {
        if (tag == 64u) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.LogonResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.LogonResult)
  return false;
#undef DO_
}

void LogonResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.LogonResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required string base_time = 2;
  if (has_base_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_time().data(), this->base_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.base_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_time(), output);
  }

  // optional string session_token = 3;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.session_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_token(), output);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text_message(), output);
  }

  // optional string redirect_url = 5;
  if (has_redirect_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_url().data(), this->redirect_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.redirect_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->redirect_url(), output);
  }

  // required uint32 protocol_version_minor = 6;
  if (has_protocol_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->protocol_version_minor(), output);
  }

  // required uint32 protocol_version_major = 7;
  if (has_protocol_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->protocol_version_major(), output);
  }

  // optional sint32 user_id = 8;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.LogonResult)
}

::google::protobuf::uint8* LogonResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.LogonResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // required string base_time = 2;
  if (has_base_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_time().data(), this->base_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.base_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_time(), target);
  }

  // optional string session_token = 3;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.session_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_token(), target);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text_message(), target);
  }

  // optional string redirect_url = 5;
  if (has_redirect_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_url().data(), this->redirect_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LogonResult.redirect_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->redirect_url(), target);
  }

  // required uint32 protocol_version_minor = 6;
  if (has_protocol_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->protocol_version_minor(), target);
  }

  // required uint32 protocol_version_major = 7;
  if (has_protocol_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->protocol_version_major(), target);
  }

  // optional sint32 user_id = 8;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.LogonResult)
  return target;
}

size_t LogonResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.LogonResult)
  size_t total_size = 0;

  if (has_base_time()) {
    // required string base_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_time());
  }

  if (has_result_code()) {
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  if (has_protocol_version_minor()) {
    // required uint32 protocol_version_minor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol_version_minor());
  }

  if (has_protocol_version_major()) {
    // required uint32 protocol_version_major = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol_version_major());
  }

  return total_size;
}
size_t LogonResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.LogonResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000071) ^ 0x00000071) == 0) {  // All required fields are present.
    // required string base_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_time());

    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

    // required uint32 protocol_version_minor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol_version_minor());

    // required uint32 protocol_version_major = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol_version_major());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string session_token = 3;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional string text_message = 4;
    if (has_text_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_message());
    }

    // optional string redirect_url = 5;
    if (has_redirect_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_url());
    }

  }
  // optional sint32 user_id = 8;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogonResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.LogonResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LogonResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogonResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.LogonResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.LogonResult)
    MergeFrom(*source);
  }
}

void LogonResult::MergeFrom(const LogonResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.LogonResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_base_time()) {
      set_has_base_time();
      base_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_time_);
    }
    if (from.has_session_token()) {
      set_has_session_token();
      session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
    }
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_redirect_url()) {
      set_has_redirect_url();
      redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_url_);
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_protocol_version_minor()) {
      set_protocol_version_minor(from.protocol_version_minor());
    }
    if (from.has_protocol_version_major()) {
      set_protocol_version_major(from.protocol_version_major());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void LogonResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.LogonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonResult::CopyFrom(const LogonResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.LogonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000071) != 0x00000071) return false;
  return true;
}

void LogonResult::Swap(LogonResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogonResult::InternalSwap(LogonResult* other) {
  base_time_.Swap(&other->base_time_);
  session_token_.Swap(&other->session_token_);
  text_message_.Swap(&other->text_message_);
  redirect_url_.Swap(&other->redirect_url_);
  std::swap(result_code_, other->result_code_);
  std::swap(protocol_version_minor_, other->protocol_version_minor_);
  std::swap(protocol_version_major_, other->protocol_version_major_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogonResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogonResult

// required uint32 result_code = 1;
bool LogonResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogonResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000010u;
}
void LogonResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogonResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 LogonResult::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.result_code)
  return result_code_;
}
void LogonResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.result_code)
}

// required string base_time = 2;
bool LogonResult::has_base_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogonResult::set_has_base_time() {
  _has_bits_[0] |= 0x00000001u;
}
void LogonResult::clear_has_base_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogonResult::clear_base_time() {
  base_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_time();
}
const ::std::string& LogonResult::base_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.base_time)
  return base_time_.GetNoArena();
}
void LogonResult::set_base_time(const ::std::string& value) {
  set_has_base_time();
  base_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.base_time)
}
void LogonResult::set_base_time(const char* value) {
  set_has_base_time();
  base_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.LogonResult.base_time)
}
void LogonResult::set_base_time(const char* value, size_t size) {
  set_has_base_time();
  base_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.LogonResult.base_time)
}
::std::string* LogonResult::mutable_base_time() {
  set_has_base_time();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.LogonResult.base_time)
  return base_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonResult::release_base_time() {
  // @@protoc_insertion_point(field_release:WebAPI_1.LogonResult.base_time)
  clear_has_base_time();
  return base_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonResult::set_allocated_base_time(::std::string* base_time) {
  if (base_time != NULL) {
    set_has_base_time();
  } else {
    clear_has_base_time();
  }
  base_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_time);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.LogonResult.base_time)
}

// optional string session_token = 3;
bool LogonResult::has_session_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogonResult::set_has_session_token() {
  _has_bits_[0] |= 0x00000002u;
}
void LogonResult::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogonResult::clear_session_token() {
  session_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_token();
}
const ::std::string& LogonResult::session_token() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.session_token)
  return session_token_.GetNoArena();
}
void LogonResult::set_session_token(const ::std::string& value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.session_token)
}
void LogonResult::set_session_token(const char* value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.LogonResult.session_token)
}
void LogonResult::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.LogonResult.session_token)
}
::std::string* LogonResult::mutable_session_token() {
  set_has_session_token();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.LogonResult.session_token)
  return session_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonResult::release_session_token() {
  // @@protoc_insertion_point(field_release:WebAPI_1.LogonResult.session_token)
  clear_has_session_token();
  return session_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonResult::set_allocated_session_token(::std::string* session_token) {
  if (session_token != NULL) {
    set_has_session_token();
  } else {
    clear_has_session_token();
  }
  session_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_token);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.LogonResult.session_token)
}

// optional string text_message = 4;
bool LogonResult::has_text_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogonResult::set_has_text_message() {
  _has_bits_[0] |= 0x00000004u;
}
void LogonResult::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogonResult::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& LogonResult::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.text_message)
  return text_message_.GetNoArena();
}
void LogonResult::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.text_message)
}
void LogonResult::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.LogonResult.text_message)
}
void LogonResult::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.LogonResult.text_message)
}
::std::string* LogonResult::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.LogonResult.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonResult::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.LogonResult.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonResult::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.LogonResult.text_message)
}

// optional string redirect_url = 5;
bool LogonResult::has_redirect_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogonResult::set_has_redirect_url() {
  _has_bits_[0] |= 0x00000008u;
}
void LogonResult::clear_has_redirect_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogonResult::clear_redirect_url() {
  redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect_url();
}
const ::std::string& LogonResult::redirect_url() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.redirect_url)
  return redirect_url_.GetNoArena();
}
void LogonResult::set_redirect_url(const ::std::string& value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.redirect_url)
}
void LogonResult::set_redirect_url(const char* value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.LogonResult.redirect_url)
}
void LogonResult::set_redirect_url(const char* value, size_t size) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.LogonResult.redirect_url)
}
::std::string* LogonResult::mutable_redirect_url() {
  set_has_redirect_url();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.LogonResult.redirect_url)
  return redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonResult::release_redirect_url() {
  // @@protoc_insertion_point(field_release:WebAPI_1.LogonResult.redirect_url)
  clear_has_redirect_url();
  return redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonResult::set_allocated_redirect_url(::std::string* redirect_url) {
  if (redirect_url != NULL) {
    set_has_redirect_url();
  } else {
    clear_has_redirect_url();
  }
  redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_url);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.LogonResult.redirect_url)
}

// required uint32 protocol_version_minor = 6;
bool LogonResult::has_protocol_version_minor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogonResult::set_has_protocol_version_minor() {
  _has_bits_[0] |= 0x00000020u;
}
void LogonResult::clear_has_protocol_version_minor() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogonResult::clear_protocol_version_minor() {
  protocol_version_minor_ = 0u;
  clear_has_protocol_version_minor();
}
::google::protobuf::uint32 LogonResult::protocol_version_minor() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.protocol_version_minor)
  return protocol_version_minor_;
}
void LogonResult::set_protocol_version_minor(::google::protobuf::uint32 value) {
  set_has_protocol_version_minor();
  protocol_version_minor_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.protocol_version_minor)
}

// required uint32 protocol_version_major = 7;
bool LogonResult::has_protocol_version_major() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogonResult::set_has_protocol_version_major() {
  _has_bits_[0] |= 0x00000040u;
}
void LogonResult::clear_has_protocol_version_major() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogonResult::clear_protocol_version_major() {
  protocol_version_major_ = 0u;
  clear_has_protocol_version_major();
}
::google::protobuf::uint32 LogonResult::protocol_version_major() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.protocol_version_major)
  return protocol_version_major_;
}
void LogonResult::set_protocol_version_major(::google::protobuf::uint32 value) {
  set_has_protocol_version_major();
  protocol_version_major_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.protocol_version_major)
}

// optional sint32 user_id = 8;
bool LogonResult::has_user_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LogonResult::set_has_user_id() {
  _has_bits_[0] |= 0x00000080u;
}
void LogonResult::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void LogonResult::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
::google::protobuf::int32 LogonResult::user_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LogonResult.user_id)
  return user_id_;
}
void LogonResult::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.LogonResult.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestoreSession::kSessionTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestoreSession::RestoreSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.RestoreSession)
}
RestoreSession::RestoreSession(const RestoreSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_token()) {
    session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.RestoreSession)
}

void RestoreSession::SharedCtor() {
  _cached_size_ = 0;
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RestoreSession::~RestoreSession() {
  // @@protoc_insertion_point(destructor:WebAPI_1.RestoreSession)
  SharedDtor();
}

void RestoreSession::SharedDtor() {
  session_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RestoreSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5].descriptor;
}

const RestoreSession& RestoreSession::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

RestoreSession* RestoreSession::New(::google::protobuf::Arena* arena) const {
  RestoreSession* n = new RestoreSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestoreSession::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.RestoreSession)
  if (has_session_token()) {
    GOOGLE_DCHECK(!session_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*session_token_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RestoreSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.RestoreSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.RestoreSession.session_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.RestoreSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.RestoreSession)
  return false;
#undef DO_
}

void RestoreSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.RestoreSession)
  // required string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.RestoreSession.session_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.RestoreSession)
}

::google::protobuf::uint8* RestoreSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.RestoreSession)
  // required string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.RestoreSession.session_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.RestoreSession)
  return target;
}

size_t RestoreSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.RestoreSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string session_token = 1;
  if (has_session_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_token());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.RestoreSession)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestoreSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.RestoreSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.RestoreSession)
    MergeFrom(*source);
  }
}

void RestoreSession::MergeFrom(const RestoreSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.RestoreSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_token()) {
    set_has_session_token();
    session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
}

void RestoreSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.RestoreSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreSession::CopyFrom(const RestoreSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.RestoreSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RestoreSession::Swap(RestoreSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestoreSession::InternalSwap(RestoreSession* other) {
  session_token_.Swap(&other->session_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestoreSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestoreSession

// required string session_token = 1;
bool RestoreSession::has_session_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RestoreSession::set_has_session_token() {
  _has_bits_[0] |= 0x00000001u;
}
void RestoreSession::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void RestoreSession::clear_session_token() {
  session_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_token();
}
const ::std::string& RestoreSession::session_token() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RestoreSession.session_token)
  return session_token_.GetNoArena();
}
void RestoreSession::set_session_token(const ::std::string& value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.RestoreSession.session_token)
}
void RestoreSession::set_session_token(const char* value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.RestoreSession.session_token)
}
void RestoreSession::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.RestoreSession.session_token)
}
::std::string* RestoreSession::mutable_session_token() {
  set_has_session_token();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.RestoreSession.session_token)
  return session_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreSession::release_session_token() {
  // @@protoc_insertion_point(field_release:WebAPI_1.RestoreSession.session_token)
  clear_has_session_token();
  return session_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreSession::set_allocated_session_token(::std::string* session_token) {
  if (session_token != NULL) {
    set_has_session_token();
  } else {
    clear_has_session_token();
  }
  session_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_token);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.RestoreSession.session_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestoreSessionResult::kResultCodeFieldNumber;
const int RestoreSessionResult::kBaseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestoreSessionResult::RestoreSessionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.RestoreSessionResult)
}
RestoreSessionResult::RestoreSessionResult(const RestoreSessionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_time()) {
    base_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_time_);
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.RestoreSessionResult)
}

void RestoreSessionResult::SharedCtor() {
  _cached_size_ = 0;
  base_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
}

RestoreSessionResult::~RestoreSessionResult() {
  // @@protoc_insertion_point(destructor:WebAPI_1.RestoreSessionResult)
  SharedDtor();
}

void RestoreSessionResult::SharedDtor() {
  base_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RestoreSessionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreSessionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6].descriptor;
}

const RestoreSessionResult& RestoreSessionResult::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

RestoreSessionResult* RestoreSessionResult::New(::google::protobuf::Arena* arena) const {
  RestoreSessionResult* n = new RestoreSessionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestoreSessionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.RestoreSessionResult)
  if (has_base_time()) {
    GOOGLE_DCHECK(!base_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*base_time_.UnsafeRawStringPointer())->clear();
  }
  result_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RestoreSessionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.RestoreSessionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string base_time = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_time().data(), this->base_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.RestoreSessionResult.base_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.RestoreSessionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.RestoreSessionResult)
  return false;
#undef DO_
}

void RestoreSessionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.RestoreSessionResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // required string base_time = 2;
  if (has_base_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_time().data(), this->base_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.RestoreSessionResult.base_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.RestoreSessionResult)
}

::google::protobuf::uint8* RestoreSessionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.RestoreSessionResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // required string base_time = 2;
  if (has_base_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_time().data(), this->base_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.RestoreSessionResult.base_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.RestoreSessionResult)
  return target;
}

size_t RestoreSessionResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.RestoreSessionResult)
  size_t total_size = 0;

  if (has_base_time()) {
    // required string base_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_time());
  }

  if (has_result_code()) {
    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  return total_size;
}
size_t RestoreSessionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.RestoreSessionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string base_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_time());

    // required uint32 result_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreSessionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.RestoreSessionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreSessionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestoreSessionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.RestoreSessionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.RestoreSessionResult)
    MergeFrom(*source);
  }
}

void RestoreSessionResult::MergeFrom(const RestoreSessionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.RestoreSessionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_base_time()) {
      set_has_base_time();
      base_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_time_);
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
}

void RestoreSessionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.RestoreSessionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreSessionResult::CopyFrom(const RestoreSessionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.RestoreSessionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreSessionResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RestoreSessionResult::Swap(RestoreSessionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestoreSessionResult::InternalSwap(RestoreSessionResult* other) {
  base_time_.Swap(&other->base_time_);
  std::swap(result_code_, other->result_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestoreSessionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestoreSessionResult

// required uint32 result_code = 1;
bool RestoreSessionResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RestoreSessionResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
void RestoreSessionResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void RestoreSessionResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 RestoreSessionResult::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RestoreSessionResult.result_code)
  return result_code_;
}
void RestoreSessionResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.RestoreSessionResult.result_code)
}

// required string base_time = 2;
bool RestoreSessionResult::has_base_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RestoreSessionResult::set_has_base_time() {
  _has_bits_[0] |= 0x00000001u;
}
void RestoreSessionResult::clear_has_base_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void RestoreSessionResult::clear_base_time() {
  base_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_time();
}
const ::std::string& RestoreSessionResult::base_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RestoreSessionResult.base_time)
  return base_time_.GetNoArena();
}
void RestoreSessionResult::set_base_time(const ::std::string& value) {
  set_has_base_time();
  base_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.RestoreSessionResult.base_time)
}
void RestoreSessionResult::set_base_time(const char* value) {
  set_has_base_time();
  base_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.RestoreSessionResult.base_time)
}
void RestoreSessionResult::set_base_time(const char* value, size_t size) {
  set_has_base_time();
  base_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.RestoreSessionResult.base_time)
}
::std::string* RestoreSessionResult::mutable_base_time() {
  set_has_base_time();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.RestoreSessionResult.base_time)
  return base_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RestoreSessionResult::release_base_time() {
  // @@protoc_insertion_point(field_release:WebAPI_1.RestoreSessionResult.base_time)
  clear_has_base_time();
  return base_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RestoreSessionResult::set_allocated_base_time(::std::string* base_time) {
  if (base_time != NULL) {
    set_has_base_time();
  } else {
    clear_has_base_time();
  }
  base_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_time);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.RestoreSessionResult.base_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logoff::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logoff::Logoff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Logoff)
}
Logoff::Logoff(const Logoff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Logoff)
}

void Logoff::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Logoff::~Logoff() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Logoff)
  SharedDtor();
}

void Logoff::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Logoff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logoff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7].descriptor;
}

const Logoff& Logoff::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Logoff* Logoff::New(::google::protobuf::Arena* arena) const {
  Logoff* n = new Logoff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logoff::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Logoff)
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Logoff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Logoff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text_message = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Logoff.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Logoff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Logoff)
  return false;
#undef DO_
}

void Logoff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Logoff)
  // optional string text_message = 1;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logoff.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Logoff)
}

::google::protobuf::uint8* Logoff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Logoff)
  // optional string text_message = 1;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Logoff.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Logoff)
  return target;
}

size_t Logoff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Logoff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string text_message = 1;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logoff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Logoff)
  GOOGLE_DCHECK_NE(&from, this);
  const Logoff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logoff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Logoff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Logoff)
    MergeFrom(*source);
  }
}

void Logoff::MergeFrom(const Logoff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Logoff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text_message()) {
    set_has_text_message();
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
}

void Logoff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Logoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logoff::CopyFrom(const Logoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Logoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logoff::IsInitialized() const {
  return true;
}

void Logoff::Swap(Logoff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logoff::InternalSwap(Logoff* other) {
  text_message_.Swap(&other->text_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logoff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logoff

// optional string text_message = 1;
bool Logoff::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Logoff::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void Logoff::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void Logoff::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& Logoff::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Logoff.text_message)
  return text_message_.GetNoArena();
}
void Logoff::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Logoff.text_message)
}
void Logoff::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Logoff.text_message)
}
void Logoff::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Logoff.text_message)
}
::std::string* Logoff::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Logoff.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logoff::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Logoff.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logoff::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Logoff.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggedOff::kLogoffReasonFieldNumber;
const int LoggedOff::kTextMessageFieldNumber;
const int LoggedOff::kRedirectUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggedOff::LoggedOff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.LoggedOff)
}
LoggedOff::LoggedOff(const LoggedOff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_url()) {
    redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_url_);
  }
  logoff_reason_ = from.logoff_reason_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.LoggedOff)
}

void LoggedOff::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logoff_reason_ = 0u;
}

LoggedOff::~LoggedOff() {
  // @@protoc_insertion_point(destructor:WebAPI_1.LoggedOff)
  SharedDtor();
}

void LoggedOff::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoggedOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggedOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8].descriptor;
}

const LoggedOff& LoggedOff::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

LoggedOff* LoggedOff::New(::google::protobuf::Arena* arena) const {
  LoggedOff* n = new LoggedOff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoggedOff::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.LoggedOff)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_text_message()) {
      GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_redirect_url()) {
      GOOGLE_DCHECK(!redirect_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirect_url_.UnsafeRawStringPointer())->clear();
    }
  }
  logoff_reason_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoggedOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.LoggedOff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logoff_reason = 1;
      case 1: {
        if (tag == 8u) {
          set_has_logoff_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logoff_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.LoggedOff.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_url = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_url().data(), this->redirect_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.LoggedOff.redirect_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.LoggedOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.LoggedOff)
  return false;
#undef DO_
}

void LoggedOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.LoggedOff)
  // required uint32 logoff_reason = 1;
  if (has_logoff_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logoff_reason(), output);
  }

  // optional string text_message = 2;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LoggedOff.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text_message(), output);
  }

  // optional string redirect_url = 3;
  if (has_redirect_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_url().data(), this->redirect_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LoggedOff.redirect_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->redirect_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.LoggedOff)
}

::google::protobuf::uint8* LoggedOff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.LoggedOff)
  // required uint32 logoff_reason = 1;
  if (has_logoff_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logoff_reason(), target);
  }

  // optional string text_message = 2;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LoggedOff.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text_message(), target);
  }

  // optional string redirect_url = 3;
  if (has_redirect_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_url().data(), this->redirect_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.LoggedOff.redirect_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->redirect_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.LoggedOff)
  return target;
}

size_t LoggedOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.LoggedOff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 logoff_reason = 1;
  if (has_logoff_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logoff_reason());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text_message = 2;
    if (has_text_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_message());
    }

    // optional string redirect_url = 3;
    if (has_redirect_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_url());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggedOff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.LoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggedOff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggedOff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.LoggedOff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.LoggedOff)
    MergeFrom(*source);
  }
}

void LoggedOff::MergeFrom(const LoggedOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.LoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_redirect_url()) {
      set_has_redirect_url();
      redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_url_);
    }
    if (from.has_logoff_reason()) {
      set_logoff_reason(from.logoff_reason());
    }
  }
}

void LoggedOff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.LoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggedOff::CopyFrom(const LoggedOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.LoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggedOff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void LoggedOff::Swap(LoggedOff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoggedOff::InternalSwap(LoggedOff* other) {
  text_message_.Swap(&other->text_message_);
  redirect_url_.Swap(&other->redirect_url_);
  std::swap(logoff_reason_, other->logoff_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggedOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggedOff

// required uint32 logoff_reason = 1;
bool LoggedOff::has_logoff_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoggedOff::set_has_logoff_reason() {
  _has_bits_[0] |= 0x00000004u;
}
void LoggedOff::clear_has_logoff_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoggedOff::clear_logoff_reason() {
  logoff_reason_ = 0u;
  clear_has_logoff_reason();
}
::google::protobuf::uint32 LoggedOff::logoff_reason() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LoggedOff.logoff_reason)
  return logoff_reason_;
}
void LoggedOff::set_logoff_reason(::google::protobuf::uint32 value) {
  set_has_logoff_reason();
  logoff_reason_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.LoggedOff.logoff_reason)
}

// optional string text_message = 2;
bool LoggedOff::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoggedOff::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void LoggedOff::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoggedOff::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& LoggedOff::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LoggedOff.text_message)
  return text_message_.GetNoArena();
}
void LoggedOff::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.LoggedOff.text_message)
}
void LoggedOff::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.LoggedOff.text_message)
}
void LoggedOff::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.LoggedOff.text_message)
}
::std::string* LoggedOff::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.LoggedOff.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoggedOff::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.LoggedOff.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoggedOff::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.LoggedOff.text_message)
}

// optional string redirect_url = 3;
bool LoggedOff::has_redirect_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoggedOff::set_has_redirect_url() {
  _has_bits_[0] |= 0x00000002u;
}
void LoggedOff::clear_has_redirect_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoggedOff::clear_redirect_url() {
  redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect_url();
}
const ::std::string& LoggedOff::redirect_url() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LoggedOff.redirect_url)
  return redirect_url_.GetNoArena();
}
void LoggedOff::set_redirect_url(const ::std::string& value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.LoggedOff.redirect_url)
}
void LoggedOff::set_redirect_url(const char* value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.LoggedOff.redirect_url)
}
void LoggedOff::set_redirect_url(const char* value, size_t size) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.LoggedOff.redirect_url)
}
::std::string* LoggedOff::mutable_redirect_url() {
  set_has_redirect_url();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.LoggedOff.redirect_url)
  return redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoggedOff::release_redirect_url() {
  // @@protoc_insertion_point(field_release:WebAPI_1.LoggedOff.redirect_url)
  clear_has_redirect_url();
  return redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoggedOff::set_allocated_redirect_url(::std::string* redirect_url) {
  if (redirect_url != NULL) {
    set_has_redirect_url();
  } else {
    clear_has_redirect_url();
  }
  redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_url);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.LoggedOff.redirect_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordChange::kOldPasswordFieldNumber;
const int PasswordChange::kNewPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordChange::PasswordChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.PasswordChange)
}
PasswordChange::PasswordChange(const PasswordChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_old_password()) {
    old_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_password_);
  }
  new_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_password()) {
    new_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_password_);
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.PasswordChange)
}

void PasswordChange::SharedCtor() {
  _cached_size_ = 0;
  old_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PasswordChange::~PasswordChange() {
  // @@protoc_insertion_point(destructor:WebAPI_1.PasswordChange)
  SharedDtor();
}

void PasswordChange::SharedDtor() {
  old_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PasswordChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasswordChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9].descriptor;
}

const PasswordChange& PasswordChange::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

PasswordChange* PasswordChange::New(::google::protobuf::Arena* arena) const {
  PasswordChange* n = new PasswordChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PasswordChange::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.PasswordChange)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_old_password()) {
      GOOGLE_DCHECK(!old_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*old_password_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_password()) {
      GOOGLE_DCHECK(!new_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_password_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PasswordChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.PasswordChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string old_password = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_password().data(), this->old_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.PasswordChange.old_password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string new_password = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_password().data(), this->new_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.PasswordChange.new_password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.PasswordChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.PasswordChange)
  return false;
#undef DO_
}

void PasswordChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.PasswordChange)
  // required string old_password = 1;
  if (has_old_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_password().data(), this->old_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.PasswordChange.old_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->old_password(), output);
  }

  // required string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.PasswordChange.new_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.PasswordChange)
}

::google::protobuf::uint8* PasswordChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.PasswordChange)
  // required string old_password = 1;
  if (has_old_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_password().data(), this->old_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.PasswordChange.old_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->old_password(), target);
  }

  // required string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.PasswordChange.new_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.PasswordChange)
  return target;
}

size_t PasswordChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.PasswordChange)
  size_t total_size = 0;

  if (has_old_password()) {
    // required string old_password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_password());
  }

  if (has_new_password()) {
    // required string new_password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_password());
  }

  return total_size;
}
size_t PasswordChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.PasswordChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string old_password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_password());

    // required string new_password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasswordChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.PasswordChange)
  GOOGLE_DCHECK_NE(&from, this);
  const PasswordChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PasswordChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.PasswordChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.PasswordChange)
    MergeFrom(*source);
  }
}

void PasswordChange::MergeFrom(const PasswordChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.PasswordChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_old_password()) {
      set_has_old_password();
      old_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_password_);
    }
    if (from.has_new_password()) {
      set_has_new_password();
      new_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_password_);
    }
  }
}

void PasswordChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.PasswordChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasswordChange::CopyFrom(const PasswordChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.PasswordChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PasswordChange::Swap(PasswordChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PasswordChange::InternalSwap(PasswordChange* other) {
  old_password_.Swap(&other->old_password_);
  new_password_.Swap(&other->new_password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PasswordChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordChange

// required string old_password = 1;
bool PasswordChange::has_old_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordChange::set_has_old_password() {
  _has_bits_[0] |= 0x00000001u;
}
void PasswordChange::clear_has_old_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void PasswordChange::clear_old_password() {
  old_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_old_password();
}
const ::std::string& PasswordChange::old_password() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PasswordChange.old_password)
  return old_password_.GetNoArena();
}
void PasswordChange::set_old_password(const ::std::string& value) {
  set_has_old_password();
  old_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.PasswordChange.old_password)
}
void PasswordChange::set_old_password(const char* value) {
  set_has_old_password();
  old_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.PasswordChange.old_password)
}
void PasswordChange::set_old_password(const char* value, size_t size) {
  set_has_old_password();
  old_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.PasswordChange.old_password)
}
::std::string* PasswordChange::mutable_old_password() {
  set_has_old_password();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.PasswordChange.old_password)
  return old_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordChange::release_old_password() {
  // @@protoc_insertion_point(field_release:WebAPI_1.PasswordChange.old_password)
  clear_has_old_password();
  return old_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordChange::set_allocated_old_password(::std::string* old_password) {
  if (old_password != NULL) {
    set_has_old_password();
  } else {
    clear_has_old_password();
  }
  old_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_password);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.PasswordChange.old_password)
}

// required string new_password = 2;
bool PasswordChange::has_new_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PasswordChange::set_has_new_password() {
  _has_bits_[0] |= 0x00000002u;
}
void PasswordChange::clear_has_new_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void PasswordChange::clear_new_password() {
  new_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_password();
}
const ::std::string& PasswordChange::new_password() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PasswordChange.new_password)
  return new_password_.GetNoArena();
}
void PasswordChange::set_new_password(const ::std::string& value) {
  set_has_new_password();
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.PasswordChange.new_password)
}
void PasswordChange::set_new_password(const char* value) {
  set_has_new_password();
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.PasswordChange.new_password)
}
void PasswordChange::set_new_password(const char* value, size_t size) {
  set_has_new_password();
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.PasswordChange.new_password)
}
::std::string* PasswordChange::mutable_new_password() {
  set_has_new_password();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.PasswordChange.new_password)
  return new_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordChange::release_new_password() {
  // @@protoc_insertion_point(field_release:WebAPI_1.PasswordChange.new_password)
  clear_has_new_password();
  return new_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordChange::set_allocated_new_password(::std::string* new_password) {
  if (new_password != NULL) {
    set_has_new_password();
  } else {
    clear_has_new_password();
  }
  new_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_password);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.PasswordChange.new_password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordChangeResult::kResultCodeFieldNumber;
const int PasswordChangeResult::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordChangeResult::PasswordChangeResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.PasswordChangeResult)
}
PasswordChangeResult::PasswordChangeResult(const PasswordChangeResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.PasswordChangeResult)
}

void PasswordChangeResult::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
}

PasswordChangeResult::~PasswordChangeResult() {
  // @@protoc_insertion_point(destructor:WebAPI_1.PasswordChangeResult)
  SharedDtor();
}

void PasswordChangeResult::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PasswordChangeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasswordChangeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10].descriptor;
}

const PasswordChangeResult& PasswordChangeResult::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

PasswordChangeResult* PasswordChangeResult::New(::google::protobuf::Arena* arena) const {
  PasswordChangeResult* n = new PasswordChangeResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PasswordChangeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.PasswordChangeResult)
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  result_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PasswordChangeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.PasswordChangeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.PasswordChangeResult.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.PasswordChangeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.PasswordChangeResult)
  return false;
#undef DO_
}

void PasswordChangeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.PasswordChangeResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // optional string text_message = 2;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.PasswordChangeResult.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.PasswordChangeResult)
}

::google::protobuf::uint8* PasswordChangeResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.PasswordChangeResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // optional string text_message = 2;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.PasswordChangeResult.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.PasswordChangeResult)
  return target;
}

size_t PasswordChangeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.PasswordChangeResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result_code = 1;
  if (has_result_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }
  // optional string text_message = 2;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasswordChangeResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.PasswordChangeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PasswordChangeResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PasswordChangeResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.PasswordChangeResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.PasswordChangeResult)
    MergeFrom(*source);
  }
}

void PasswordChangeResult::MergeFrom(const PasswordChangeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.PasswordChangeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
}

void PasswordChangeResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.PasswordChangeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasswordChangeResult::CopyFrom(const PasswordChangeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.PasswordChangeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordChangeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void PasswordChangeResult::Swap(PasswordChangeResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PasswordChangeResult::InternalSwap(PasswordChangeResult* other) {
  text_message_.Swap(&other->text_message_);
  std::swap(result_code_, other->result_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PasswordChangeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordChangeResult

// required uint32 result_code = 1;
bool PasswordChangeResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PasswordChangeResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
void PasswordChangeResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void PasswordChangeResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 PasswordChangeResult::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PasswordChangeResult.result_code)
  return result_code_;
}
void PasswordChangeResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.PasswordChangeResult.result_code)
}

// optional string text_message = 2;
bool PasswordChangeResult::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordChangeResult::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void PasswordChangeResult::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void PasswordChangeResult::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& PasswordChangeResult::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PasswordChangeResult.text_message)
  return text_message_.GetNoArena();
}
void PasswordChangeResult::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.PasswordChangeResult.text_message)
}
void PasswordChangeResult::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.PasswordChangeResult.text_message)
}
void PasswordChangeResult::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.PasswordChangeResult.text_message)
}
::std::string* PasswordChangeResult::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.PasswordChangeResult.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordChangeResult::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.PasswordChangeResult.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordChangeResult::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.PasswordChangeResult.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObtainDemoCredentials::kClientIdFieldNumber;
const int ObtainDemoCredentials::kFirstNameFieldNumber;
const int ObtainDemoCredentials::kSecondNameFieldNumber;
const int ObtainDemoCredentials::kEMailFieldNumber;
const int ObtainDemoCredentials::kPrivateLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObtainDemoCredentials::ObtainDemoCredentials()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ObtainDemoCredentials)
}
ObtainDemoCredentials::ObtainDemoCredentials(const ObtainDemoCredentials& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  first_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first_name()) {
    first_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  second_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_second_name()) {
    second_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_name_);
  }
  e_mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_e_mail()) {
    e_mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_mail_);
  }
  private_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_label()) {
    private_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_label_);
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ObtainDemoCredentials)
}

void ObtainDemoCredentials::SharedCtor() {
  _cached_size_ = 0;
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ObtainDemoCredentials::~ObtainDemoCredentials() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ObtainDemoCredentials)
  SharedDtor();
}

void ObtainDemoCredentials::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_mail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObtainDemoCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObtainDemoCredentials::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11].descriptor;
}

const ObtainDemoCredentials& ObtainDemoCredentials::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ObtainDemoCredentials* ObtainDemoCredentials::New(::google::protobuf::Arena* arena) const {
  ObtainDemoCredentials* n = new ObtainDemoCredentials;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObtainDemoCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ObtainDemoCredentials)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_client_id()) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_first_name()) {
      GOOGLE_DCHECK(!first_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*first_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_second_name()) {
      GOOGLE_DCHECK(!second_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*second_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_e_mail()) {
      GOOGLE_DCHECK(!e_mail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*e_mail_.UnsafeRawStringPointer())->clear();
    }
    if (has_private_label()) {
      GOOGLE_DCHECK(!private_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*private_label_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObtainDemoCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ObtainDemoCredentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentials.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string first_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentials.first_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string second_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->second_name().data(), this->second_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentials.second_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string e_mail = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_e_mail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->e_mail().data(), this->e_mail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentials.e_mail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string private_label = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_label().data(), this->private_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentials.private_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ObtainDemoCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ObtainDemoCredentials)
  return false;
#undef DO_
}

void ObtainDemoCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ObtainDemoCredentials)
  // required string client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // required string first_name = 2;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.first_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->first_name(), output);
  }

  // required string second_name = 3;
  if (has_second_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_name().data(), this->second_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.second_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->second_name(), output);
  }

  // required string e_mail = 4;
  if (has_e_mail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->e_mail().data(), this->e_mail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.e_mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->e_mail(), output);
  }

  // optional string private_label = 5;
  if (has_private_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_label().data(), this->private_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.private_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->private_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ObtainDemoCredentials)
}

::google::protobuf::uint8* ObtainDemoCredentials::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ObtainDemoCredentials)
  // required string client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // required string first_name = 2;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.first_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->first_name(), target);
  }

  // required string second_name = 3;
  if (has_second_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_name().data(), this->second_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.second_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->second_name(), target);
  }

  // required string e_mail = 4;
  if (has_e_mail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->e_mail().data(), this->e_mail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.e_mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->e_mail(), target);
  }

  // optional string private_label = 5;
  if (has_private_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_label().data(), this->private_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentials.private_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->private_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ObtainDemoCredentials)
  return target;
}

size_t ObtainDemoCredentials::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.ObtainDemoCredentials)
  size_t total_size = 0;

  if (has_client_id()) {
    // required string client_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_first_name()) {
    // required string first_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_name());
  }

  if (has_second_name()) {
    // required string second_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->second_name());
  }

  if (has_e_mail()) {
    // required string e_mail = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->e_mail());
  }

  return total_size;
}
size_t ObtainDemoCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ObtainDemoCredentials)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string client_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required string first_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_name());

    // required string second_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->second_name());

    // required string e_mail = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->e_mail());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string private_label = 5;
  if (has_private_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_label());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObtainDemoCredentials::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ObtainDemoCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  const ObtainDemoCredentials* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObtainDemoCredentials>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ObtainDemoCredentials)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ObtainDemoCredentials)
    MergeFrom(*source);
  }
}

void ObtainDemoCredentials::MergeFrom(const ObtainDemoCredentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ObtainDemoCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_client_id()) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (from.has_first_name()) {
      set_has_first_name();
      first_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_name_);
    }
    if (from.has_second_name()) {
      set_has_second_name();
      second_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_name_);
    }
    if (from.has_e_mail()) {
      set_has_e_mail();
      e_mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_mail_);
    }
    if (from.has_private_label()) {
      set_has_private_label();
      private_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_label_);
    }
  }
}

void ObtainDemoCredentials::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ObtainDemoCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObtainDemoCredentials::CopyFrom(const ObtainDemoCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ObtainDemoCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObtainDemoCredentials::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ObtainDemoCredentials::Swap(ObtainDemoCredentials* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObtainDemoCredentials::InternalSwap(ObtainDemoCredentials* other) {
  client_id_.Swap(&other->client_id_);
  first_name_.Swap(&other->first_name_);
  second_name_.Swap(&other->second_name_);
  e_mail_.Swap(&other->e_mail_);
  private_label_.Swap(&other->private_label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObtainDemoCredentials::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObtainDemoCredentials

// required string client_id = 1;
bool ObtainDemoCredentials::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObtainDemoCredentials::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObtainDemoCredentials::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObtainDemoCredentials::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& ObtainDemoCredentials::client_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentials.client_id)
  return client_id_.GetNoArena();
}
void ObtainDemoCredentials::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentials.client_id)
}
void ObtainDemoCredentials::set_client_id(const char* value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentials.client_id)
}
void ObtainDemoCredentials::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentials.client_id)
}
::std::string* ObtainDemoCredentials::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentials.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentials::release_client_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentials.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentials::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentials.client_id)
}

// required string first_name = 2;
bool ObtainDemoCredentials::has_first_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObtainDemoCredentials::set_has_first_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ObtainDemoCredentials::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObtainDemoCredentials::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_name();
}
const ::std::string& ObtainDemoCredentials::first_name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentials.first_name)
  return first_name_.GetNoArena();
}
void ObtainDemoCredentials::set_first_name(const ::std::string& value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentials.first_name)
}
void ObtainDemoCredentials::set_first_name(const char* value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentials.first_name)
}
void ObtainDemoCredentials::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentials.first_name)
}
::std::string* ObtainDemoCredentials::mutable_first_name() {
  set_has_first_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentials.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentials::release_first_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentials.first_name)
  clear_has_first_name();
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentials::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    set_has_first_name();
  } else {
    clear_has_first_name();
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentials.first_name)
}

// required string second_name = 3;
bool ObtainDemoCredentials::has_second_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObtainDemoCredentials::set_has_second_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ObtainDemoCredentials::clear_has_second_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObtainDemoCredentials::clear_second_name() {
  second_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_second_name();
}
const ::std::string& ObtainDemoCredentials::second_name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentials.second_name)
  return second_name_.GetNoArena();
}
void ObtainDemoCredentials::set_second_name(const ::std::string& value) {
  set_has_second_name();
  second_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentials.second_name)
}
void ObtainDemoCredentials::set_second_name(const char* value) {
  set_has_second_name();
  second_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentials.second_name)
}
void ObtainDemoCredentials::set_second_name(const char* value, size_t size) {
  set_has_second_name();
  second_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentials.second_name)
}
::std::string* ObtainDemoCredentials::mutable_second_name() {
  set_has_second_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentials.second_name)
  return second_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentials::release_second_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentials.second_name)
  clear_has_second_name();
  return second_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentials::set_allocated_second_name(::std::string* second_name) {
  if (second_name != NULL) {
    set_has_second_name();
  } else {
    clear_has_second_name();
  }
  second_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second_name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentials.second_name)
}

// required string e_mail = 4;
bool ObtainDemoCredentials::has_e_mail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObtainDemoCredentials::set_has_e_mail() {
  _has_bits_[0] |= 0x00000008u;
}
void ObtainDemoCredentials::clear_has_e_mail() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObtainDemoCredentials::clear_e_mail() {
  e_mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_e_mail();
}
const ::std::string& ObtainDemoCredentials::e_mail() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentials.e_mail)
  return e_mail_.GetNoArena();
}
void ObtainDemoCredentials::set_e_mail(const ::std::string& value) {
  set_has_e_mail();
  e_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentials.e_mail)
}
void ObtainDemoCredentials::set_e_mail(const char* value) {
  set_has_e_mail();
  e_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentials.e_mail)
}
void ObtainDemoCredentials::set_e_mail(const char* value, size_t size) {
  set_has_e_mail();
  e_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentials.e_mail)
}
::std::string* ObtainDemoCredentials::mutable_e_mail() {
  set_has_e_mail();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentials.e_mail)
  return e_mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentials::release_e_mail() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentials.e_mail)
  clear_has_e_mail();
  return e_mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentials::set_allocated_e_mail(::std::string* e_mail) {
  if (e_mail != NULL) {
    set_has_e_mail();
  } else {
    clear_has_e_mail();
  }
  e_mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e_mail);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentials.e_mail)
}

// optional string private_label = 5;
bool ObtainDemoCredentials::has_private_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ObtainDemoCredentials::set_has_private_label() {
  _has_bits_[0] |= 0x00000010u;
}
void ObtainDemoCredentials::clear_has_private_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void ObtainDemoCredentials::clear_private_label() {
  private_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_label();
}
const ::std::string& ObtainDemoCredentials::private_label() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentials.private_label)
  return private_label_.GetNoArena();
}
void ObtainDemoCredentials::set_private_label(const ::std::string& value) {
  set_has_private_label();
  private_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentials.private_label)
}
void ObtainDemoCredentials::set_private_label(const char* value) {
  set_has_private_label();
  private_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentials.private_label)
}
void ObtainDemoCredentials::set_private_label(const char* value, size_t size) {
  set_has_private_label();
  private_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentials.private_label)
}
::std::string* ObtainDemoCredentials::mutable_private_label() {
  set_has_private_label();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentials.private_label)
  return private_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentials::release_private_label() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentials.private_label)
  clear_has_private_label();
  return private_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentials::set_allocated_private_label(::std::string* private_label) {
  if (private_label != NULL) {
    set_has_private_label();
  } else {
    clear_has_private_label();
  }
  private_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_label);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentials.private_label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObtainDemoCredentialsResult::kResultCodeFieldNumber;
const int ObtainDemoCredentialsResult::kUserNameFieldNumber;
const int ObtainDemoCredentialsResult::kPasswordFieldNumber;
const int ObtainDemoCredentialsResult::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObtainDemoCredentialsResult::ObtainDemoCredentialsResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ObtainDemoCredentialsResult)
}
ObtainDemoCredentialsResult::ObtainDemoCredentialsResult(const ObtainDemoCredentialsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ObtainDemoCredentialsResult)
}

void ObtainDemoCredentialsResult::SharedCtor() {
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
}

ObtainDemoCredentialsResult::~ObtainDemoCredentialsResult() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ObtainDemoCredentialsResult)
  SharedDtor();
}

void ObtainDemoCredentialsResult::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObtainDemoCredentialsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObtainDemoCredentialsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12].descriptor;
}

const ObtainDemoCredentialsResult& ObtainDemoCredentialsResult::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ObtainDemoCredentialsResult* ObtainDemoCredentialsResult::New(::google::protobuf::Arena* arena) const {
  ObtainDemoCredentialsResult* n = new ObtainDemoCredentialsResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObtainDemoCredentialsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ObtainDemoCredentialsResult)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_name()) {
      GOOGLE_DCHECK(!user_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_text_message()) {
      GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_message_.UnsafeRawStringPointer())->clear();
    }
  }
  result_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObtainDemoCredentialsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ObtainDemoCredentialsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (tag == 8u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentialsResult.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentialsResult.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ObtainDemoCredentialsResult.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ObtainDemoCredentialsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ObtainDemoCredentialsResult)
  return false;
#undef DO_
}

void ObtainDemoCredentialsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ObtainDemoCredentialsResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentialsResult.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentialsResult.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentialsResult.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ObtainDemoCredentialsResult)
}

::google::protobuf::uint8* ObtainDemoCredentialsResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ObtainDemoCredentialsResult)
  // required uint32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentialsResult.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentialsResult.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ObtainDemoCredentialsResult.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ObtainDemoCredentialsResult)
  return target;
}

size_t ObtainDemoCredentialsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ObtainDemoCredentialsResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result_code = 1;
  if (has_result_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string text_message = 4;
    if (has_text_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_message());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObtainDemoCredentialsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ObtainDemoCredentialsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ObtainDemoCredentialsResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObtainDemoCredentialsResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ObtainDemoCredentialsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ObtainDemoCredentialsResult)
    MergeFrom(*source);
  }
}

void ObtainDemoCredentialsResult::MergeFrom(const ObtainDemoCredentialsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ObtainDemoCredentialsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
}

void ObtainDemoCredentialsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ObtainDemoCredentialsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObtainDemoCredentialsResult::CopyFrom(const ObtainDemoCredentialsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ObtainDemoCredentialsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObtainDemoCredentialsResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void ObtainDemoCredentialsResult::Swap(ObtainDemoCredentialsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObtainDemoCredentialsResult::InternalSwap(ObtainDemoCredentialsResult* other) {
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  text_message_.Swap(&other->text_message_);
  std::swap(result_code_, other->result_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObtainDemoCredentialsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObtainDemoCredentialsResult

// required uint32 result_code = 1;
bool ObtainDemoCredentialsResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObtainDemoCredentialsResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
void ObtainDemoCredentialsResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObtainDemoCredentialsResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 ObtainDemoCredentialsResult::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentialsResult.result_code)
  return result_code_;
}
void ObtainDemoCredentialsResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentialsResult.result_code)
}

// optional string user_name = 2;
bool ObtainDemoCredentialsResult::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObtainDemoCredentialsResult::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObtainDemoCredentialsResult::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObtainDemoCredentialsResult::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
const ::std::string& ObtainDemoCredentialsResult::user_name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentialsResult.user_name)
  return user_name_.GetNoArena();
}
void ObtainDemoCredentialsResult::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentialsResult.user_name)
}
void ObtainDemoCredentialsResult::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentialsResult.user_name)
}
void ObtainDemoCredentialsResult::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentialsResult.user_name)
}
::std::string* ObtainDemoCredentialsResult::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentialsResult.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentialsResult::release_user_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentialsResult.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentialsResult::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentialsResult.user_name)
}

// optional string password = 3;
bool ObtainDemoCredentialsResult::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObtainDemoCredentialsResult::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void ObtainDemoCredentialsResult::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObtainDemoCredentialsResult::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& ObtainDemoCredentialsResult::password() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentialsResult.password)
  return password_.GetNoArena();
}
void ObtainDemoCredentialsResult::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentialsResult.password)
}
void ObtainDemoCredentialsResult::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentialsResult.password)
}
void ObtainDemoCredentialsResult::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentialsResult.password)
}
::std::string* ObtainDemoCredentialsResult::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentialsResult.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentialsResult::release_password() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentialsResult.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentialsResult::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentialsResult.password)
}

// optional string text_message = 4;
bool ObtainDemoCredentialsResult::has_text_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObtainDemoCredentialsResult::set_has_text_message() {
  _has_bits_[0] |= 0x00000004u;
}
void ObtainDemoCredentialsResult::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObtainDemoCredentialsResult::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& ObtainDemoCredentialsResult::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ObtainDemoCredentialsResult.text_message)
  return text_message_.GetNoArena();
}
void ObtainDemoCredentialsResult::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ObtainDemoCredentialsResult.text_message)
}
void ObtainDemoCredentialsResult::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ObtainDemoCredentialsResult.text_message)
}
void ObtainDemoCredentialsResult::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ObtainDemoCredentialsResult.text_message)
}
::std::string* ObtainDemoCredentialsResult::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ObtainDemoCredentialsResult.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObtainDemoCredentialsResult::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ObtainDemoCredentialsResult.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObtainDemoCredentialsResult::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ObtainDemoCredentialsResult.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMessage::kMessageTypeFieldNumber;
const int UserMessage::kSourceFieldNumber;
const int UserMessage::kSubjectFieldNumber;
const int UserMessage::kTextFieldNumber;
const int UserMessage::kExpirationUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMessage::UserMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.UserMessage)
}
UserMessage::UserMessage(const UserMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subject()) {
    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&expiration_utc_time_, &from.expiration_utc_time_,
    reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&expiration_utc_time_) + sizeof(message_type_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.UserMessage)
}

void UserMessage::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiration_utc_time_, 0, reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&expiration_utc_time_) + sizeof(message_type_));
}

UserMessage::~UserMessage() {
  // @@protoc_insertion_point(destructor:WebAPI_1.UserMessage)
  SharedDtor();
}

void UserMessage::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13].descriptor;
}

const UserMessage& UserMessage::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

UserMessage* UserMessage::New(::google::protobuf::Arena* arena) const {
  UserMessage* n = new UserMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.UserMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_subject()) {
      GOOGLE_DCHECK(!subject_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subject_.UnsafeRawStringPointer())->clear();
    }
    if (has_text()) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&expiration_utc_time_, 0, reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&expiration_utc_time_) + sizeof(message_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_message_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserMessage.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subject = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserMessage.subject");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserMessage.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 expiration_utc_time = 5;
      case 5: {
        if (tag == 40u) {
          set_has_expiration_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &expiration_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.UserMessage)
  return false;
#undef DO_
}

void UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.UserMessage)
  // required uint32 message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_type(), output);
  }

  // required string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserMessage.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserMessage.subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->subject(), output);
  }

  // required string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional sint64 expiration_utc_time = 5;
  if (has_expiration_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->expiration_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.UserMessage)
}

::google::protobuf::uint8* UserMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.UserMessage)
  // required uint32 message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_type(), target);
  }

  // required string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserMessage.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserMessage.subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }

  // required string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional sint64 expiration_utc_time = 5;
  if (has_expiration_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->expiration_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.UserMessage)
  return target;
}

size_t UserMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.UserMessage)
  size_t total_size = 0;

  if (has_source()) {
    // required string source = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_text()) {
    // required string text = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_message_type()) {
    // required uint32 message_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_type());
  }

  return total_size;
}
size_t UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.UserMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000015) ^ 0x00000015) == 0) {  // All required fields are present.
    // required string source = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required string text = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint32 message_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string subject = 3;
  if (has_subject()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subject());
  }

  // optional sint64 expiration_utc_time = 5;
  if (has_expiration_utc_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->expiration_utc_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.UserMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.UserMessage)
    MergeFrom(*source);
  }
}

void UserMessage::MergeFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_subject()) {
      set_has_subject();
      subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_expiration_utc_time()) {
      set_expiration_utc_time(from.expiration_utc_time());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
  }
}

void UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMessage::CopyFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;
  return true;
}

void UserMessage::Swap(UserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserMessage::InternalSwap(UserMessage* other) {
  source_.Swap(&other->source_);
  subject_.Swap(&other->subject_);
  text_.Swap(&other->text_);
  std::swap(expiration_utc_time_, other->expiration_utc_time_);
  std::swap(message_type_, other->message_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserMessage

// required uint32 message_type = 1;
bool UserMessage::has_message_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserMessage::set_has_message_type() {
  _has_bits_[0] |= 0x00000010u;
}
void UserMessage::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserMessage::clear_message_type() {
  message_type_ = 0u;
  clear_has_message_type();
}
::google::protobuf::uint32 UserMessage::message_type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserMessage.message_type)
  return message_type_;
}
void UserMessage::set_message_type(::google::protobuf::uint32 value) {
  set_has_message_type();
  message_type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.UserMessage.message_type)
}

// required string source = 2;
bool UserMessage::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserMessage::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void UserMessage::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserMessage::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& UserMessage::source() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserMessage.source)
  return source_.GetNoArena();
}
void UserMessage::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserMessage.source)
}
void UserMessage::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserMessage.source)
}
void UserMessage::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserMessage.source)
}
::std::string* UserMessage::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserMessage.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserMessage::release_source() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserMessage.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserMessage::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserMessage.source)
}

// optional string subject = 3;
bool UserMessage::has_subject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserMessage::set_has_subject() {
  _has_bits_[0] |= 0x00000002u;
}
void UserMessage::clear_has_subject() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserMessage::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subject();
}
const ::std::string& UserMessage::subject() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserMessage.subject)
  return subject_.GetNoArena();
}
void UserMessage::set_subject(const ::std::string& value) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserMessage.subject)
}
void UserMessage::set_subject(const char* value) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserMessage.subject)
}
void UserMessage::set_subject(const char* value, size_t size) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserMessage.subject)
}
::std::string* UserMessage::mutable_subject() {
  set_has_subject();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserMessage.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserMessage::release_subject() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserMessage.subject)
  clear_has_subject();
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserMessage::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    set_has_subject();
  } else {
    clear_has_subject();
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserMessage.subject)
}

// required string text = 4;
bool UserMessage::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserMessage::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
void UserMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& UserMessage::text() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserMessage.text)
  return text_.GetNoArena();
}
void UserMessage::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserMessage.text)
}
void UserMessage::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserMessage.text)
}
void UserMessage::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserMessage.text)
}
::std::string* UserMessage::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserMessage::release_text() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserMessage.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserMessage.text)
}

// optional sint64 expiration_utc_time = 5;
bool UserMessage::has_expiration_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserMessage::set_has_expiration_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void UserMessage::clear_has_expiration_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserMessage::clear_expiration_utc_time() {
  expiration_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_expiration_utc_time();
}
::google::protobuf::int64 UserMessage::expiration_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserMessage.expiration_utc_time)
  return expiration_utc_time_;
}
void UserMessage::set_expiration_utc_time(::google::protobuf::int64 value) {
  set_has_expiration_utc_time();
  expiration_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.UserMessage.expiration_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSessionStateRequest::kSessionTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSessionStateRequest::UserSessionStateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.UserSessionStateRequest)
}
UserSessionStateRequest::UserSessionStateRequest(const UserSessionStateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_token()) {
    session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.UserSessionStateRequest)
}

void UserSessionStateRequest::SharedCtor() {
  _cached_size_ = 0;
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserSessionStateRequest::~UserSessionStateRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.UserSessionStateRequest)
  SharedDtor();
}

void UserSessionStateRequest::SharedDtor() {
  session_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserSessionStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSessionStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14].descriptor;
}

const UserSessionStateRequest& UserSessionStateRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

UserSessionStateRequest* UserSessionStateRequest::New(::google::protobuf::Arena* arena) const {
  UserSessionStateRequest* n = new UserSessionStateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserSessionStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.UserSessionStateRequest)
  if (has_session_token()) {
    GOOGLE_DCHECK(!session_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*session_token_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserSessionStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.UserSessionStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserSessionStateRequest.session_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.UserSessionStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.UserSessionStateRequest)
  return false;
#undef DO_
}

void UserSessionStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.UserSessionStateRequest)
  // required string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserSessionStateRequest.session_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.UserSessionStateRequest)
}

::google::protobuf::uint8* UserSessionStateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.UserSessionStateRequest)
  // required string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserSessionStateRequest.session_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.UserSessionStateRequest)
  return target;
}

size_t UserSessionStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.UserSessionStateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string session_token = 1;
  if (has_session_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_token());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSessionStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.UserSessionStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSessionStateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSessionStateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.UserSessionStateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.UserSessionStateRequest)
    MergeFrom(*source);
  }
}

void UserSessionStateRequest::MergeFrom(const UserSessionStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.UserSessionStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_token()) {
    set_has_session_token();
    session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
}

void UserSessionStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.UserSessionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSessionStateRequest::CopyFrom(const UserSessionStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.UserSessionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSessionStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserSessionStateRequest::Swap(UserSessionStateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserSessionStateRequest::InternalSwap(UserSessionStateRequest* other) {
  session_token_.Swap(&other->session_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserSessionStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserSessionStateRequest

// required string session_token = 1;
bool UserSessionStateRequest::has_session_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserSessionStateRequest::set_has_session_token() {
  _has_bits_[0] |= 0x00000001u;
}
void UserSessionStateRequest::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserSessionStateRequest::clear_session_token() {
  session_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_token();
}
const ::std::string& UserSessionStateRequest::session_token() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserSessionStateRequest.session_token)
  return session_token_.GetNoArena();
}
void UserSessionStateRequest::set_session_token(const ::std::string& value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserSessionStateRequest.session_token)
}
void UserSessionStateRequest::set_session_token(const char* value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserSessionStateRequest.session_token)
}
void UserSessionStateRequest::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserSessionStateRequest.session_token)
}
::std::string* UserSessionStateRequest::mutable_session_token() {
  set_has_session_token();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserSessionStateRequest.session_token)
  return session_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserSessionStateRequest::release_session_token() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserSessionStateRequest.session_token)
  clear_has_session_token();
  return session_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserSessionStateRequest::set_allocated_session_token(::std::string* session_token) {
  if (session_token != NULL) {
    set_has_session_token();
  } else {
    clear_has_session_token();
  }
  session_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_token);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserSessionStateRequest.session_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSessionStateResult::kSessionTokenFieldNumber;
const int UserSessionStateResult::kResultCodeFieldNumber;
const int UserSessionStateResult::kUserIdFieldNumber;
const int UserSessionStateResult::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSessionStateResult::UserSessionStateResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.UserSessionStateResult)
}
UserSessionStateResult::UserSessionStateResult(const UserSessionStateResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_token()) {
    session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&result_code_, &from.result_code_,
    reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&result_code_) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.UserSessionStateResult)
}

void UserSessionStateResult::SharedCtor() {
  _cached_size_ = 0;
  session_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&result_code_) + sizeof(user_id_));
}

UserSessionStateResult::~UserSessionStateResult() {
  // @@protoc_insertion_point(destructor:WebAPI_1.UserSessionStateResult)
  SharedDtor();
}

void UserSessionStateResult::SharedDtor() {
  session_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserSessionStateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSessionStateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15].descriptor;
}

const UserSessionStateResult& UserSessionStateResult::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

UserSessionStateResult* UserSessionStateResult::New(::google::protobuf::Arena* arena) const {
  UserSessionStateResult* n = new UserSessionStateResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserSessionStateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.UserSessionStateResult)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_session_token()) {
      GOOGLE_DCHECK(!session_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*session_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&result_code_, 0, reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_code_) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserSessionStateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.UserSessionStateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserSessionStateResult.session_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 user_id = 3;
      case 3: {
        if (tag == 24u) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserSessionStateResult.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.UserSessionStateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.UserSessionStateResult)
  return false;
#undef DO_
}

void UserSessionStateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.UserSessionStateResult)
  // required string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserSessionStateResult.session_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_token(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional sint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->user_id(), output);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserSessionStateResult.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.UserSessionStateResult)
}

::google::protobuf::uint8* UserSessionStateResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.UserSessionStateResult)
  // required string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserSessionStateResult.session_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_token(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // optional sint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->user_id(), target);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserSessionStateResult.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.UserSessionStateResult)
  return target;
}

size_t UserSessionStateResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.UserSessionStateResult)
  size_t total_size = 0;

  if (has_session_token()) {
    // required string session_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_token());
  }

  if (has_result_code()) {
    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  return total_size;
}
size_t UserSessionStateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.UserSessionStateResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string session_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_token());

    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string username = 4;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional sint32 user_id = 3;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSessionStateResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.UserSessionStateResult)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSessionStateResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSessionStateResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.UserSessionStateResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.UserSessionStateResult)
    MergeFrom(*source);
  }
}

void UserSessionStateResult::MergeFrom(const UserSessionStateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.UserSessionStateResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_session_token()) {
      set_has_session_token();
      session_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_token_);
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void UserSessionStateResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.UserSessionStateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSessionStateResult::CopyFrom(const UserSessionStateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.UserSessionStateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSessionStateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void UserSessionStateResult::Swap(UserSessionStateResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserSessionStateResult::InternalSwap(UserSessionStateResult* other) {
  session_token_.Swap(&other->session_token_);
  username_.Swap(&other->username_);
  std::swap(result_code_, other->result_code_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserSessionStateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserSessionStateResult

// required string session_token = 1;
bool UserSessionStateResult::has_session_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserSessionStateResult::set_has_session_token() {
  _has_bits_[0] |= 0x00000001u;
}
void UserSessionStateResult::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserSessionStateResult::clear_session_token() {
  session_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_token();
}
const ::std::string& UserSessionStateResult::session_token() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserSessionStateResult.session_token)
  return session_token_.GetNoArena();
}
void UserSessionStateResult::set_session_token(const ::std::string& value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserSessionStateResult.session_token)
}
void UserSessionStateResult::set_session_token(const char* value) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserSessionStateResult.session_token)
}
void UserSessionStateResult::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  session_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserSessionStateResult.session_token)
}
::std::string* UserSessionStateResult::mutable_session_token() {
  set_has_session_token();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserSessionStateResult.session_token)
  return session_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserSessionStateResult::release_session_token() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserSessionStateResult.session_token)
  clear_has_session_token();
  return session_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserSessionStateResult::set_allocated_session_token(::std::string* session_token) {
  if (session_token != NULL) {
    set_has_session_token();
  } else {
    clear_has_session_token();
  }
  session_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_token);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserSessionStateResult.session_token)
}

// required uint32 result_code = 2;
bool UserSessionStateResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserSessionStateResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void UserSessionStateResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserSessionStateResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 UserSessionStateResult::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserSessionStateResult.result_code)
  return result_code_;
}
void UserSessionStateResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.UserSessionStateResult.result_code)
}

// optional sint32 user_id = 3;
bool UserSessionStateResult::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserSessionStateResult::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UserSessionStateResult::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserSessionStateResult::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
::google::protobuf::int32 UserSessionStateResult::user_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserSessionStateResult.user_id)
  return user_id_;
}
void UserSessionStateResult::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.UserSessionStateResult.user_id)
}

// optional string username = 4;
bool UserSessionStateResult::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserSessionStateResult::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void UserSessionStateResult::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserSessionStateResult::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& UserSessionStateResult::username() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserSessionStateResult.username)
  return username_.GetNoArena();
}
void UserSessionStateResult::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserSessionStateResult.username)
}
void UserSessionStateResult::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserSessionStateResult.username)
}
void UserSessionStateResult::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserSessionStateResult.username)
}
::std::string* UserSessionStateResult::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserSessionStateResult.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserSessionStateResult::release_username() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserSessionStateResult.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserSessionStateResult::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserSessionStateResult.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContractMetadata::kContractIdFieldNumber;
const int ContractMetadata::kContractSymbolFieldNumber;
const int ContractMetadata::kCorrectPriceScaleFieldNumber;
const int ContractMetadata::kDisplayPriceScaleFieldNumber;
const int ContractMetadata::kDescriptionFieldNumber;
const int ContractMetadata::kTitleFieldNumber;
const int ContractMetadata::kTickSizeFieldNumber;
const int ContractMetadata::kCurrencyFieldNumber;
const int ContractMetadata::kTickValueFieldNumber;
const int ContractMetadata::kCfiCodeFieldNumber;
const int ContractMetadata::kIsMostActiveFieldNumber;
const int ContractMetadata::kLastTradingDateFieldNumber;
const int ContractMetadata::kFirstNoticeDateFieldNumber;
const int ContractMetadata::kUnderlyingContractSymbolFieldNumber;
const int ContractMetadata::kMarginStyleFieldNumber;
const int ContractMetadata::kInstrumentGroupNameFieldNumber;
const int ContractMetadata::kSessionGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContractMetadata::ContractMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ContractMetadata)
}
ContractMetadata::ContractMetadata(const ContractMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contract_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contract_symbol()) {
    contract_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_symbol_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  cfi_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cfi_code()) {
    cfi_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfi_code_);
  }
  underlying_contract_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlying_contract_symbol()) {
    underlying_contract_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_contract_symbol_);
  }
  instrument_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_group_name()) {
    instrument_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_group_name_);
  }
  ::memcpy(&contract_id_, &from.contract_id_,
    reinterpret_cast<char*>(&session_group_id_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(session_group_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ContractMetadata)
}

void ContractMetadata::SharedCtor() {
  _cached_size_ = 0;
  contract_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfi_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_contract_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_id_, 0, reinterpret_cast<char*>(&session_group_id_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(session_group_id_));
}

ContractMetadata::~ContractMetadata() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ContractMetadata)
  SharedDtor();
}

void ContractMetadata::SharedDtor() {
  contract_symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfi_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_contract_symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContractMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16].descriptor;
}

const ContractMetadata& ContractMetadata::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ContractMetadata* ContractMetadata::New(::google::protobuf::Arena* arena) const {
  ContractMetadata* n = new ContractMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContractMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ContractMetadata)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_contract_symbol()) {
      GOOGLE_DCHECK(!contract_symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contract_symbol_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_currency()) {
      GOOGLE_DCHECK(!currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_.UnsafeRawStringPointer())->clear();
    }
    if (has_cfi_code()) {
      GOOGLE_DCHECK(!cfi_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cfi_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_underlying_contract_symbol()) {
      GOOGLE_DCHECK(!underlying_contract_symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*underlying_contract_symbol_.UnsafeRawStringPointer())->clear();
    }
    if (has_instrument_group_name()) {
      GOOGLE_DCHECK(!instrument_group_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*instrument_group_name_.UnsafeRawStringPointer())->clear();
    }
  }
  contract_id_ = 0u;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&display_price_scale_, 0, reinterpret_cast<char*>(&margin_style_) -
      reinterpret_cast<char*>(&display_price_scale_) + sizeof(margin_style_));
  }
  session_group_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContractMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ContractMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 contract_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string contract_symbol = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract_symbol().data(), this->contract_symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ContractMetadata.contract_symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double correct_price_scale = 3;
      case 3: {
        if (tag == 25u) {
          set_has_correct_price_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &correct_price_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 display_price_scale = 4;
      case 4: {
        if (tag == 32u) {
          set_has_display_price_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &display_price_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string description = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ContractMetadata.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ContractMetadata.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double tick_size = 7;
      case 7: {
        if (tag == 57u) {
          set_has_tick_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tick_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string currency = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ContractMetadata.currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double tick_value = 9;
      case 9: {
        if (tag == 73u) {
          set_has_tick_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tick_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cfi_code = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfi_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cfi_code().data(), this->cfi_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ContractMetadata.cfi_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_most_active = 11;
      case 11: {
        if (tag == 88u) {
          set_has_is_most_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_most_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 last_trading_date = 12;
      case 12: {
        if (tag == 96u) {
          set_has_last_trading_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &last_trading_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 first_notice_date = 13;
      case 13: {
        if (tag == 104u) {
          set_has_first_notice_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &first_notice_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string underlying_contract_symbol = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_contract_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying_contract_symbol().data(), this->underlying_contract_symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ContractMetadata.underlying_contract_symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 margin_style = 15;
      case 15: {
        if (tag == 120u) {
          set_has_margin_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string instrument_group_name = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrument_group_name().data(), this->instrument_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ContractMetadata.instrument_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 session_group_id = 17;
      case 17: {
        if (tag == 136u) {
          set_has_session_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &session_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ContractMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ContractMetadata)
  return false;
#undef DO_
}

void ContractMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ContractMetadata)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contract_id(), output);
  }

  // required string contract_symbol = 2;
  if (has_contract_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract_symbol().data(), this->contract_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.contract_symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contract_symbol(), output);
  }

  // required double correct_price_scale = 3;
  if (has_correct_price_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->correct_price_scale(), output);
  }

  // required uint32 display_price_scale = 4;
  if (has_display_price_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->display_price_scale(), output);
  }

  // required string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // required string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->title(), output);
  }

  // required double tick_size = 7;
  if (has_tick_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->tick_size(), output);
  }

  // required string currency = 8;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->currency(), output);
  }

  // required double tick_value = 9;
  if (has_tick_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tick_value(), output);
  }

  // required string cfi_code = 10;
  if (has_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfi_code().data(), this->cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.cfi_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->cfi_code(), output);
  }

  // optional bool is_most_active = 11;
  if (has_is_most_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_most_active(), output);
  }

  // optional sint64 last_trading_date = 12;
  if (has_last_trading_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(12, this->last_trading_date(), output);
  }

  // optional sint64 first_notice_date = 13;
  if (has_first_notice_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->first_notice_date(), output);
  }

  // optional string underlying_contract_symbol = 14;
  if (has_underlying_contract_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_contract_symbol().data(), this->underlying_contract_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.underlying_contract_symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->underlying_contract_symbol(), output);
  }

  // optional uint32 margin_style = 15;
  if (has_margin_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->margin_style(), output);
  }

  // required string instrument_group_name = 16;
  if (has_instrument_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_group_name().data(), this->instrument_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.instrument_group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->instrument_group_name(), output);
  }

  // required sint32 session_group_id = 17;
  if (has_session_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->session_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ContractMetadata)
}

::google::protobuf::uint8* ContractMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ContractMetadata)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contract_id(), target);
  }

  // required string contract_symbol = 2;
  if (has_contract_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract_symbol().data(), this->contract_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.contract_symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract_symbol(), target);
  }

  // required double correct_price_scale = 3;
  if (has_correct_price_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->correct_price_scale(), target);
  }

  // required uint32 display_price_scale = 4;
  if (has_display_price_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->display_price_scale(), target);
  }

  // required string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // required string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // required double tick_size = 7;
  if (has_tick_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->tick_size(), target);
  }

  // required string currency = 8;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->currency(), target);
  }

  // required double tick_value = 9;
  if (has_tick_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tick_value(), target);
  }

  // required string cfi_code = 10;
  if (has_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfi_code().data(), this->cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.cfi_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cfi_code(), target);
  }

  // optional bool is_most_active = 11;
  if (has_is_most_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_most_active(), target);
  }

  // optional sint64 last_trading_date = 12;
  if (has_last_trading_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(12, this->last_trading_date(), target);
  }

  // optional sint64 first_notice_date = 13;
  if (has_first_notice_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(13, this->first_notice_date(), target);
  }

  // optional string underlying_contract_symbol = 14;
  if (has_underlying_contract_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying_contract_symbol().data(), this->underlying_contract_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.underlying_contract_symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->underlying_contract_symbol(), target);
  }

  // optional uint32 margin_style = 15;
  if (has_margin_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->margin_style(), target);
  }

  // required string instrument_group_name = 16;
  if (has_instrument_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_group_name().data(), this->instrument_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ContractMetadata.instrument_group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->instrument_group_name(), target);
  }

  // required sint32 session_group_id = 17;
  if (has_session_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->session_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ContractMetadata)
  return target;
}

size_t ContractMetadata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.ContractMetadata)
  size_t total_size = 0;

  if (has_contract_symbol()) {
    // required string contract_symbol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract_symbol());
  }

  if (has_description()) {
    // required string description = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_title()) {
    // required string title = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_currency()) {
    // required string currency = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());
  }

  if (has_cfi_code()) {
    // required string cfi_code = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfi_code());
  }

  if (has_instrument_group_name()) {
    // required string instrument_group_name = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrument_group_name());
  }

  if (has_contract_id()) {
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  if (has_display_price_scale()) {
    // required uint32 display_price_scale = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->display_price_scale());
  }

  if (has_correct_price_scale()) {
    // required double correct_price_scale = 3;
    total_size += 1 + 8;
  }

  if (has_tick_size()) {
    // required double tick_size = 7;
    total_size += 1 + 8;
  }

  if (has_tick_value()) {
    // required double tick_value = 9;
    total_size += 1 + 8;
  }

  if (has_session_group_id()) {
    // required sint32 session_group_id = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->session_group_id());
  }

  return total_size;
}
size_t ContractMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ContractMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00010fdf) ^ 0x00010fdf) == 0) {  // All required fields are present.
    // required string contract_symbol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract_symbol());

    // required string description = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required string title = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string currency = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());

    // required string cfi_code = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfi_code());

    // required string instrument_group_name = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrument_group_name());

    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

    // required uint32 display_price_scale = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->display_price_scale());

    // required double correct_price_scale = 3;
    total_size += 1 + 8;

    // required double tick_size = 7;
    total_size += 1 + 8;

    // required double tick_value = 9;
    total_size += 1 + 8;

    // required sint32 session_group_id = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->session_group_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string underlying_contract_symbol = 14;
  if (has_underlying_contract_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlying_contract_symbol());
  }

  if (_has_bits_[8 / 32] & 61440u) {
    // optional sint64 last_trading_date = 12;
    if (has_last_trading_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->last_trading_date());
    }

    // optional sint64 first_notice_date = 13;
    if (has_first_notice_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->first_notice_date());
    }

    // optional bool is_most_active = 11;
    if (has_is_most_active()) {
      total_size += 1 + 1;
    }

    // optional uint32 margin_style = 15;
    if (has_margin_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin_style());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ContractMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContractMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ContractMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ContractMetadata)
    MergeFrom(*source);
  }
}

void ContractMetadata::MergeFrom(const ContractMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ContractMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_contract_symbol()) {
      set_has_contract_symbol();
      contract_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_symbol_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_currency()) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (from.has_cfi_code()) {
      set_has_cfi_code();
      cfi_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfi_code_);
    }
    if (from.has_underlying_contract_symbol()) {
      set_has_underlying_contract_symbol();
      underlying_contract_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_contract_symbol_);
    }
    if (from.has_instrument_group_name()) {
      set_has_instrument_group_name();
      instrument_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_group_name_);
    }
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_display_price_scale()) {
      set_display_price_scale(from.display_price_scale());
    }
    if (from.has_correct_price_scale()) {
      set_correct_price_scale(from.correct_price_scale());
    }
    if (from.has_tick_size()) {
      set_tick_size(from.tick_size());
    }
    if (from.has_tick_value()) {
      set_tick_value(from.tick_value());
    }
    if (from.has_last_trading_date()) {
      set_last_trading_date(from.last_trading_date());
    }
    if (from.has_first_notice_date()) {
      set_first_notice_date(from.first_notice_date());
    }
    if (from.has_is_most_active()) {
      set_is_most_active(from.is_most_active());
    }
    if (from.has_margin_style()) {
      set_margin_style(from.margin_style());
    }
  }
  if (from.has_session_group_id()) {
    set_session_group_id(from.session_group_id());
  }
}

void ContractMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ContractMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractMetadata::CopyFrom(const ContractMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ContractMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010fdf) != 0x00010fdf) return false;
  return true;
}

void ContractMetadata::Swap(ContractMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContractMetadata::InternalSwap(ContractMetadata* other) {
  contract_symbol_.Swap(&other->contract_symbol_);
  description_.Swap(&other->description_);
  title_.Swap(&other->title_);
  currency_.Swap(&other->currency_);
  cfi_code_.Swap(&other->cfi_code_);
  underlying_contract_symbol_.Swap(&other->underlying_contract_symbol_);
  instrument_group_name_.Swap(&other->instrument_group_name_);
  std::swap(contract_id_, other->contract_id_);
  std::swap(display_price_scale_, other->display_price_scale_);
  std::swap(correct_price_scale_, other->correct_price_scale_);
  std::swap(tick_size_, other->tick_size_);
  std::swap(tick_value_, other->tick_value_);
  std::swap(last_trading_date_, other->last_trading_date_);
  std::swap(first_notice_date_, other->first_notice_date_);
  std::swap(is_most_active_, other->is_most_active_);
  std::swap(margin_style_, other->margin_style_);
  std::swap(session_group_id_, other->session_group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContractMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContractMetadata

// required uint32 contract_id = 1;
bool ContractMetadata::has_contract_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ContractMetadata::set_has_contract_id() {
  _has_bits_[0] |= 0x00000080u;
}
void ContractMetadata::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void ContractMetadata::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 ContractMetadata::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.contract_id)
  return contract_id_;
}
void ContractMetadata::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.contract_id)
}

// required string contract_symbol = 2;
bool ContractMetadata::has_contract_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContractMetadata::set_has_contract_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
void ContractMetadata::clear_has_contract_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContractMetadata::clear_contract_symbol() {
  contract_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract_symbol();
}
const ::std::string& ContractMetadata::contract_symbol() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.contract_symbol)
  return contract_symbol_.GetNoArena();
}
void ContractMetadata::set_contract_symbol(const ::std::string& value) {
  set_has_contract_symbol();
  contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.contract_symbol)
}
void ContractMetadata::set_contract_symbol(const char* value) {
  set_has_contract_symbol();
  contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ContractMetadata.contract_symbol)
}
void ContractMetadata::set_contract_symbol(const char* value, size_t size) {
  set_has_contract_symbol();
  contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ContractMetadata.contract_symbol)
}
::std::string* ContractMetadata::mutable_contract_symbol() {
  set_has_contract_symbol();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ContractMetadata.contract_symbol)
  return contract_symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMetadata::release_contract_symbol() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ContractMetadata.contract_symbol)
  clear_has_contract_symbol();
  return contract_symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMetadata::set_allocated_contract_symbol(::std::string* contract_symbol) {
  if (contract_symbol != NULL) {
    set_has_contract_symbol();
  } else {
    clear_has_contract_symbol();
  }
  contract_symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract_symbol);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ContractMetadata.contract_symbol)
}

// required double correct_price_scale = 3;
bool ContractMetadata::has_correct_price_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ContractMetadata::set_has_correct_price_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void ContractMetadata::clear_has_correct_price_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void ContractMetadata::clear_correct_price_scale() {
  correct_price_scale_ = 0;
  clear_has_correct_price_scale();
}
double ContractMetadata::correct_price_scale() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.correct_price_scale)
  return correct_price_scale_;
}
void ContractMetadata::set_correct_price_scale(double value) {
  set_has_correct_price_scale();
  correct_price_scale_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.correct_price_scale)
}

// required uint32 display_price_scale = 4;
bool ContractMetadata::has_display_price_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ContractMetadata::set_has_display_price_scale() {
  _has_bits_[0] |= 0x00000100u;
}
void ContractMetadata::clear_has_display_price_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
void ContractMetadata::clear_display_price_scale() {
  display_price_scale_ = 0u;
  clear_has_display_price_scale();
}
::google::protobuf::uint32 ContractMetadata::display_price_scale() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.display_price_scale)
  return display_price_scale_;
}
void ContractMetadata::set_display_price_scale(::google::protobuf::uint32 value) {
  set_has_display_price_scale();
  display_price_scale_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.display_price_scale)
}

// required string description = 5;
bool ContractMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContractMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void ContractMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContractMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& ContractMetadata::description() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.description)
  return description_.GetNoArena();
}
void ContractMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.description)
}
void ContractMetadata::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ContractMetadata.description)
}
void ContractMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ContractMetadata.description)
}
::std::string* ContractMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ContractMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMetadata::release_description() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ContractMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ContractMetadata.description)
}

// required string title = 6;
bool ContractMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContractMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void ContractMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContractMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ContractMetadata::title() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.title)
  return title_.GetNoArena();
}
void ContractMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.title)
}
void ContractMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ContractMetadata.title)
}
void ContractMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ContractMetadata.title)
}
::std::string* ContractMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ContractMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMetadata::release_title() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ContractMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ContractMetadata.title)
}

// required double tick_size = 7;
bool ContractMetadata::has_tick_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ContractMetadata::set_has_tick_size() {
  _has_bits_[0] |= 0x00000400u;
}
void ContractMetadata::clear_has_tick_size() {
  _has_bits_[0] &= ~0x00000400u;
}
void ContractMetadata::clear_tick_size() {
  tick_size_ = 0;
  clear_has_tick_size();
}
double ContractMetadata::tick_size() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.tick_size)
  return tick_size_;
}
void ContractMetadata::set_tick_size(double value) {
  set_has_tick_size();
  tick_size_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.tick_size)
}

// required string currency = 8;
bool ContractMetadata::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContractMetadata::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
void ContractMetadata::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContractMetadata::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
const ::std::string& ContractMetadata::currency() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.currency)
  return currency_.GetNoArena();
}
void ContractMetadata::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.currency)
}
void ContractMetadata::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ContractMetadata.currency)
}
void ContractMetadata::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ContractMetadata.currency)
}
::std::string* ContractMetadata::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ContractMetadata.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMetadata::release_currency() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ContractMetadata.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMetadata::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ContractMetadata.currency)
}

// required double tick_value = 9;
bool ContractMetadata::has_tick_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ContractMetadata::set_has_tick_value() {
  _has_bits_[0] |= 0x00000800u;
}
void ContractMetadata::clear_has_tick_value() {
  _has_bits_[0] &= ~0x00000800u;
}
void ContractMetadata::clear_tick_value() {
  tick_value_ = 0;
  clear_has_tick_value();
}
double ContractMetadata::tick_value() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.tick_value)
  return tick_value_;
}
void ContractMetadata::set_tick_value(double value) {
  set_has_tick_value();
  tick_value_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.tick_value)
}

// required string cfi_code = 10;
bool ContractMetadata::has_cfi_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContractMetadata::set_has_cfi_code() {
  _has_bits_[0] |= 0x00000010u;
}
void ContractMetadata::clear_has_cfi_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContractMetadata::clear_cfi_code() {
  cfi_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cfi_code();
}
const ::std::string& ContractMetadata::cfi_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.cfi_code)
  return cfi_code_.GetNoArena();
}
void ContractMetadata::set_cfi_code(const ::std::string& value) {
  set_has_cfi_code();
  cfi_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.cfi_code)
}
void ContractMetadata::set_cfi_code(const char* value) {
  set_has_cfi_code();
  cfi_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ContractMetadata.cfi_code)
}
void ContractMetadata::set_cfi_code(const char* value, size_t size) {
  set_has_cfi_code();
  cfi_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ContractMetadata.cfi_code)
}
::std::string* ContractMetadata::mutable_cfi_code() {
  set_has_cfi_code();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ContractMetadata.cfi_code)
  return cfi_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMetadata::release_cfi_code() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ContractMetadata.cfi_code)
  clear_has_cfi_code();
  return cfi_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMetadata::set_allocated_cfi_code(::std::string* cfi_code) {
  if (cfi_code != NULL) {
    set_has_cfi_code();
  } else {
    clear_has_cfi_code();
  }
  cfi_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfi_code);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ContractMetadata.cfi_code)
}

// optional bool is_most_active = 11;
bool ContractMetadata::has_is_most_active() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ContractMetadata::set_has_is_most_active() {
  _has_bits_[0] |= 0x00004000u;
}
void ContractMetadata::clear_has_is_most_active() {
  _has_bits_[0] &= ~0x00004000u;
}
void ContractMetadata::clear_is_most_active() {
  is_most_active_ = false;
  clear_has_is_most_active();
}
bool ContractMetadata::is_most_active() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.is_most_active)
  return is_most_active_;
}
void ContractMetadata::set_is_most_active(bool value) {
  set_has_is_most_active();
  is_most_active_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.is_most_active)
}

// optional sint64 last_trading_date = 12;
bool ContractMetadata::has_last_trading_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ContractMetadata::set_has_last_trading_date() {
  _has_bits_[0] |= 0x00001000u;
}
void ContractMetadata::clear_has_last_trading_date() {
  _has_bits_[0] &= ~0x00001000u;
}
void ContractMetadata::clear_last_trading_date() {
  last_trading_date_ = GOOGLE_LONGLONG(0);
  clear_has_last_trading_date();
}
::google::protobuf::int64 ContractMetadata::last_trading_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.last_trading_date)
  return last_trading_date_;
}
void ContractMetadata::set_last_trading_date(::google::protobuf::int64 value) {
  set_has_last_trading_date();
  last_trading_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.last_trading_date)
}

// optional sint64 first_notice_date = 13;
bool ContractMetadata::has_first_notice_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ContractMetadata::set_has_first_notice_date() {
  _has_bits_[0] |= 0x00002000u;
}
void ContractMetadata::clear_has_first_notice_date() {
  _has_bits_[0] &= ~0x00002000u;
}
void ContractMetadata::clear_first_notice_date() {
  first_notice_date_ = GOOGLE_LONGLONG(0);
  clear_has_first_notice_date();
}
::google::protobuf::int64 ContractMetadata::first_notice_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.first_notice_date)
  return first_notice_date_;
}
void ContractMetadata::set_first_notice_date(::google::protobuf::int64 value) {
  set_has_first_notice_date();
  first_notice_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.first_notice_date)
}

// optional string underlying_contract_symbol = 14;
bool ContractMetadata::has_underlying_contract_symbol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ContractMetadata::set_has_underlying_contract_symbol() {
  _has_bits_[0] |= 0x00000020u;
}
void ContractMetadata::clear_has_underlying_contract_symbol() {
  _has_bits_[0] &= ~0x00000020u;
}
void ContractMetadata::clear_underlying_contract_symbol() {
  underlying_contract_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying_contract_symbol();
}
const ::std::string& ContractMetadata::underlying_contract_symbol() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.underlying_contract_symbol)
  return underlying_contract_symbol_.GetNoArena();
}
void ContractMetadata::set_underlying_contract_symbol(const ::std::string& value) {
  set_has_underlying_contract_symbol();
  underlying_contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.underlying_contract_symbol)
}
void ContractMetadata::set_underlying_contract_symbol(const char* value) {
  set_has_underlying_contract_symbol();
  underlying_contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ContractMetadata.underlying_contract_symbol)
}
void ContractMetadata::set_underlying_contract_symbol(const char* value, size_t size) {
  set_has_underlying_contract_symbol();
  underlying_contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ContractMetadata.underlying_contract_symbol)
}
::std::string* ContractMetadata::mutable_underlying_contract_symbol() {
  set_has_underlying_contract_symbol();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ContractMetadata.underlying_contract_symbol)
  return underlying_contract_symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMetadata::release_underlying_contract_symbol() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ContractMetadata.underlying_contract_symbol)
  clear_has_underlying_contract_symbol();
  return underlying_contract_symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMetadata::set_allocated_underlying_contract_symbol(::std::string* underlying_contract_symbol) {
  if (underlying_contract_symbol != NULL) {
    set_has_underlying_contract_symbol();
  } else {
    clear_has_underlying_contract_symbol();
  }
  underlying_contract_symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_contract_symbol);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ContractMetadata.underlying_contract_symbol)
}

// optional uint32 margin_style = 15;
bool ContractMetadata::has_margin_style() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ContractMetadata::set_has_margin_style() {
  _has_bits_[0] |= 0x00008000u;
}
void ContractMetadata::clear_has_margin_style() {
  _has_bits_[0] &= ~0x00008000u;
}
void ContractMetadata::clear_margin_style() {
  margin_style_ = 0u;
  clear_has_margin_style();
}
::google::protobuf::uint32 ContractMetadata::margin_style() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.margin_style)
  return margin_style_;
}
void ContractMetadata::set_margin_style(::google::protobuf::uint32 value) {
  set_has_margin_style();
  margin_style_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.margin_style)
}

// required string instrument_group_name = 16;
bool ContractMetadata::has_instrument_group_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ContractMetadata::set_has_instrument_group_name() {
  _has_bits_[0] |= 0x00000040u;
}
void ContractMetadata::clear_has_instrument_group_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void ContractMetadata::clear_instrument_group_name() {
  instrument_group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument_group_name();
}
const ::std::string& ContractMetadata::instrument_group_name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.instrument_group_name)
  return instrument_group_name_.GetNoArena();
}
void ContractMetadata::set_instrument_group_name(const ::std::string& value) {
  set_has_instrument_group_name();
  instrument_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.instrument_group_name)
}
void ContractMetadata::set_instrument_group_name(const char* value) {
  set_has_instrument_group_name();
  instrument_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ContractMetadata.instrument_group_name)
}
void ContractMetadata::set_instrument_group_name(const char* value, size_t size) {
  set_has_instrument_group_name();
  instrument_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ContractMetadata.instrument_group_name)
}
::std::string* ContractMetadata::mutable_instrument_group_name() {
  set_has_instrument_group_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ContractMetadata.instrument_group_name)
  return instrument_group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMetadata::release_instrument_group_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ContractMetadata.instrument_group_name)
  clear_has_instrument_group_name();
  return instrument_group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMetadata::set_allocated_instrument_group_name(::std::string* instrument_group_name) {
  if (instrument_group_name != NULL) {
    set_has_instrument_group_name();
  } else {
    clear_has_instrument_group_name();
  }
  instrument_group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_group_name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ContractMetadata.instrument_group_name)
}

// required sint32 session_group_id = 17;
bool ContractMetadata::has_session_group_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ContractMetadata::set_has_session_group_id() {
  _has_bits_[0] |= 0x00010000u;
}
void ContractMetadata::clear_has_session_group_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void ContractMetadata::clear_session_group_id() {
  session_group_id_ = 0;
  clear_has_session_group_id();
}
::google::protobuf::int32 ContractMetadata::session_group_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ContractMetadata.session_group_id)
  return session_group_id_;
}
void ContractMetadata::set_session_group_id(::google::protobuf::int32 value) {
  set_has_session_group_id();
  session_group_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ContractMetadata.session_group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InformationRequest::kIdFieldNumber;
const int InformationRequest::kSubscribeFieldNumber;
const int InformationRequest::kAccountsRequestFieldNumber;
const int InformationRequest::kSymbolResolutionRequestFieldNumber;
const int InformationRequest::kLastStatementBalancesRequestFieldNumber;
const int InformationRequest::kCurrencyRatesRequestFieldNumber;
const int InformationRequest::kSessionInformationRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InformationRequest::InformationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.InformationRequest)
}
InformationRequest::InformationRequest(const InformationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accounts_request()) {
    accounts_request_ = new ::WebAPI_1::AccountsRequest(*from.accounts_request_);
  } else {
    accounts_request_ = NULL;
  }
  if (from.has_symbol_resolution_request()) {
    symbol_resolution_request_ = new ::WebAPI_1::SymbolResolutionRequest(*from.symbol_resolution_request_);
  } else {
    symbol_resolution_request_ = NULL;
  }
  if (from.has_last_statement_balances_request()) {
    last_statement_balances_request_ = new ::WebAPI_1::LastStatementBalancesRequest(*from.last_statement_balances_request_);
  } else {
    last_statement_balances_request_ = NULL;
  }
  if (from.has_currency_rates_request()) {
    currency_rates_request_ = new ::WebAPI_1::CurrencyRatesRequest(*from.currency_rates_request_);
  } else {
    currency_rates_request_ = NULL;
  }
  if (from.has_session_information_request()) {
    session_information_request_ = new ::WebAPI_1::SessionInformationRequest(*from.session_information_request_);
  } else {
    session_information_request_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&subscribe_) -
    reinterpret_cast<char*>(&id_) + sizeof(subscribe_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.InformationRequest)
}

void InformationRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&accounts_request_, 0, reinterpret_cast<char*>(&subscribe_) -
    reinterpret_cast<char*>(&accounts_request_) + sizeof(subscribe_));
}

InformationRequest::~InformationRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.InformationRequest)
  SharedDtor();
}

void InformationRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete accounts_request_;
  }
  if (this != internal_default_instance()) {
    delete symbol_resolution_request_;
  }
  if (this != internal_default_instance()) {
    delete last_statement_balances_request_;
  }
  if (this != internal_default_instance()) {
    delete currency_rates_request_;
  }
  if (this != internal_default_instance()) {
    delete session_information_request_;
  }
}

void InformationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InformationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[17].descriptor;
}

const InformationRequest& InformationRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

InformationRequest* InformationRequest::New(::google::protobuf::Arena* arena) const {
  InformationRequest* n = new InformationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.InformationRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_accounts_request()) {
      GOOGLE_DCHECK(accounts_request_ != NULL);
      accounts_request_->::WebAPI_1::AccountsRequest::Clear();
    }
    if (has_symbol_resolution_request()) {
      GOOGLE_DCHECK(symbol_resolution_request_ != NULL);
      symbol_resolution_request_->::WebAPI_1::SymbolResolutionRequest::Clear();
    }
    if (has_last_statement_balances_request()) {
      GOOGLE_DCHECK(last_statement_balances_request_ != NULL);
      last_statement_balances_request_->::WebAPI_1::LastStatementBalancesRequest::Clear();
    }
    if (has_currency_rates_request()) {
      GOOGLE_DCHECK(currency_rates_request_ != NULL);
      currency_rates_request_->::WebAPI_1::CurrencyRatesRequest::Clear();
    }
    if (has_session_information_request()) {
      GOOGLE_DCHECK(session_information_request_ != NULL);
      session_information_request_->::WebAPI_1::SessionInformationRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&subscribe_) -
      reinterpret_cast<char*>(&id_) + sizeof(subscribe_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InformationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.InformationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool subscribe = 2;
      case 2: {
        if (tag == 16u) {
          set_has_subscribe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.AccountsRequest accounts_request = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accounts_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.SymbolResolutionRequest symbol_resolution_request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol_resolution_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.LastStatementBalancesRequest last_statement_balances_request = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_statement_balances_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.CurrencyRatesRequest currency_rates_request = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currency_rates_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.SessionInformationRequest session_information_request = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_information_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.InformationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.InformationRequest)
  return false;
#undef DO_
}

void InformationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.InformationRequest)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool subscribe = 2;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->subscribe(), output);
  }

  // optional .WebAPI_1.AccountsRequest accounts_request = 3;
  if (has_accounts_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->accounts_request_, output);
  }

  // optional .WebAPI_1.SymbolResolutionRequest symbol_resolution_request = 4;
  if (has_symbol_resolution_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->symbol_resolution_request_, output);
  }

  // optional .WebAPI_1.LastStatementBalancesRequest last_statement_balances_request = 5;
  if (has_last_statement_balances_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->last_statement_balances_request_, output);
  }

  // optional .WebAPI_1.CurrencyRatesRequest currency_rates_request = 6;
  if (has_currency_rates_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->currency_rates_request_, output);
  }

  // optional .WebAPI_1.SessionInformationRequest session_information_request = 7;
  if (has_session_information_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->session_information_request_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.InformationRequest)
}

::google::protobuf::uint8* InformationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.InformationRequest)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool subscribe = 2;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->subscribe(), target);
  }

  // optional .WebAPI_1.AccountsRequest accounts_request = 3;
  if (has_accounts_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->accounts_request_, false, target);
  }

  // optional .WebAPI_1.SymbolResolutionRequest symbol_resolution_request = 4;
  if (has_symbol_resolution_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->symbol_resolution_request_, false, target);
  }

  // optional .WebAPI_1.LastStatementBalancesRequest last_statement_balances_request = 5;
  if (has_last_statement_balances_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->last_statement_balances_request_, false, target);
  }

  // optional .WebAPI_1.CurrencyRatesRequest currency_rates_request = 6;
  if (has_currency_rates_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->currency_rates_request_, false, target);
  }

  // optional .WebAPI_1.SessionInformationRequest session_information_request = 7;
  if (has_session_information_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->session_information_request_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.InformationRequest)
  return target;
}

size_t InformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.InformationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .WebAPI_1.AccountsRequest accounts_request = 3;
    if (has_accounts_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accounts_request_);
    }

    // optional .WebAPI_1.SymbolResolutionRequest symbol_resolution_request = 4;
    if (has_symbol_resolution_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->symbol_resolution_request_);
    }

    // optional .WebAPI_1.LastStatementBalancesRequest last_statement_balances_request = 5;
    if (has_last_statement_balances_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_statement_balances_request_);
    }

    // optional .WebAPI_1.CurrencyRatesRequest currency_rates_request = 6;
    if (has_currency_rates_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->currency_rates_request_);
    }

    // optional .WebAPI_1.SessionInformationRequest session_information_request = 7;
    if (has_session_information_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_information_request_);
    }

  }
  // optional bool subscribe = 2;
  if (has_subscribe()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InformationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.InformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InformationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InformationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.InformationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.InformationRequest)
    MergeFrom(*source);
  }
}

void InformationRequest::MergeFrom(const InformationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.InformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_accounts_request()) {
      mutable_accounts_request()->::WebAPI_1::AccountsRequest::MergeFrom(from.accounts_request());
    }
    if (from.has_symbol_resolution_request()) {
      mutable_symbol_resolution_request()->::WebAPI_1::SymbolResolutionRequest::MergeFrom(from.symbol_resolution_request());
    }
    if (from.has_last_statement_balances_request()) {
      mutable_last_statement_balances_request()->::WebAPI_1::LastStatementBalancesRequest::MergeFrom(from.last_statement_balances_request());
    }
    if (from.has_currency_rates_request()) {
      mutable_currency_rates_request()->::WebAPI_1::CurrencyRatesRequest::MergeFrom(from.currency_rates_request());
    }
    if (from.has_session_information_request()) {
      mutable_session_information_request()->::WebAPI_1::SessionInformationRequest::MergeFrom(from.session_information_request());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_subscribe()) {
      set_subscribe(from.subscribe());
    }
  }
}

void InformationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.InformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InformationRequest::CopyFrom(const InformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.InformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_symbol_resolution_request()) {
    if (!this->symbol_resolution_request_->IsInitialized()) return false;
  }
  if (has_session_information_request()) {
    if (!this->session_information_request_->IsInitialized()) return false;
  }
  return true;
}

void InformationRequest::Swap(InformationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InformationRequest::InternalSwap(InformationRequest* other) {
  std::swap(accounts_request_, other->accounts_request_);
  std::swap(symbol_resolution_request_, other->symbol_resolution_request_);
  std::swap(last_statement_balances_request_, other->last_statement_balances_request_);
  std::swap(currency_rates_request_, other->currency_rates_request_);
  std::swap(session_information_request_, other->session_information_request_);
  std::swap(id_, other->id_);
  std::swap(subscribe_, other->subscribe_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InformationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InformationRequest

// required uint32 id = 1;
bool InformationRequest::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InformationRequest::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
void InformationRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void InformationRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 InformationRequest::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationRequest.id)
  return id_;
}
void InformationRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.InformationRequest.id)
}

// optional bool subscribe = 2;
bool InformationRequest::has_subscribe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InformationRequest::set_has_subscribe() {
  _has_bits_[0] |= 0x00000040u;
}
void InformationRequest::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000040u;
}
void InformationRequest::clear_subscribe() {
  subscribe_ = false;
  clear_has_subscribe();
}
bool InformationRequest::subscribe() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationRequest.subscribe)
  return subscribe_;
}
void InformationRequest::set_subscribe(bool value) {
  set_has_subscribe();
  subscribe_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.InformationRequest.subscribe)
}

// optional .WebAPI_1.AccountsRequest accounts_request = 3;
bool InformationRequest::has_accounts_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InformationRequest::set_has_accounts_request() {
  _has_bits_[0] |= 0x00000001u;
}
void InformationRequest::clear_has_accounts_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void InformationRequest::clear_accounts_request() {
  if (accounts_request_ != NULL) accounts_request_->::WebAPI_1::AccountsRequest::Clear();
  clear_has_accounts_request();
}
const ::WebAPI_1::AccountsRequest& InformationRequest::accounts_request() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationRequest.accounts_request)
  return accounts_request_ != NULL ? *accounts_request_
                         : *::WebAPI_1::AccountsRequest::internal_default_instance();
}
::WebAPI_1::AccountsRequest* InformationRequest::mutable_accounts_request() {
  set_has_accounts_request();
  if (accounts_request_ == NULL) {
    accounts_request_ = new ::WebAPI_1::AccountsRequest;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationRequest.accounts_request)
  return accounts_request_;
}
::WebAPI_1::AccountsRequest* InformationRequest::release_accounts_request() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationRequest.accounts_request)
  clear_has_accounts_request();
  ::WebAPI_1::AccountsRequest* temp = accounts_request_;
  accounts_request_ = NULL;
  return temp;
}
void InformationRequest::set_allocated_accounts_request(::WebAPI_1::AccountsRequest* accounts_request) {
  delete accounts_request_;
  accounts_request_ = accounts_request;
  if (accounts_request) {
    set_has_accounts_request();
  } else {
    clear_has_accounts_request();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationRequest.accounts_request)
}

// optional .WebAPI_1.SymbolResolutionRequest symbol_resolution_request = 4;
bool InformationRequest::has_symbol_resolution_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InformationRequest::set_has_symbol_resolution_request() {
  _has_bits_[0] |= 0x00000002u;
}
void InformationRequest::clear_has_symbol_resolution_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void InformationRequest::clear_symbol_resolution_request() {
  if (symbol_resolution_request_ != NULL) symbol_resolution_request_->::WebAPI_1::SymbolResolutionRequest::Clear();
  clear_has_symbol_resolution_request();
}
const ::WebAPI_1::SymbolResolutionRequest& InformationRequest::symbol_resolution_request() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationRequest.symbol_resolution_request)
  return symbol_resolution_request_ != NULL ? *symbol_resolution_request_
                         : *::WebAPI_1::SymbolResolutionRequest::internal_default_instance();
}
::WebAPI_1::SymbolResolutionRequest* InformationRequest::mutable_symbol_resolution_request() {
  set_has_symbol_resolution_request();
  if (symbol_resolution_request_ == NULL) {
    symbol_resolution_request_ = new ::WebAPI_1::SymbolResolutionRequest;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationRequest.symbol_resolution_request)
  return symbol_resolution_request_;
}
::WebAPI_1::SymbolResolutionRequest* InformationRequest::release_symbol_resolution_request() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationRequest.symbol_resolution_request)
  clear_has_symbol_resolution_request();
  ::WebAPI_1::SymbolResolutionRequest* temp = symbol_resolution_request_;
  symbol_resolution_request_ = NULL;
  return temp;
}
void InformationRequest::set_allocated_symbol_resolution_request(::WebAPI_1::SymbolResolutionRequest* symbol_resolution_request) {
  delete symbol_resolution_request_;
  symbol_resolution_request_ = symbol_resolution_request;
  if (symbol_resolution_request) {
    set_has_symbol_resolution_request();
  } else {
    clear_has_symbol_resolution_request();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationRequest.symbol_resolution_request)
}

// optional .WebAPI_1.LastStatementBalancesRequest last_statement_balances_request = 5;
bool InformationRequest::has_last_statement_balances_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InformationRequest::set_has_last_statement_balances_request() {
  _has_bits_[0] |= 0x00000004u;
}
void InformationRequest::clear_has_last_statement_balances_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void InformationRequest::clear_last_statement_balances_request() {
  if (last_statement_balances_request_ != NULL) last_statement_balances_request_->::WebAPI_1::LastStatementBalancesRequest::Clear();
  clear_has_last_statement_balances_request();
}
const ::WebAPI_1::LastStatementBalancesRequest& InformationRequest::last_statement_balances_request() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationRequest.last_statement_balances_request)
  return last_statement_balances_request_ != NULL ? *last_statement_balances_request_
                         : *::WebAPI_1::LastStatementBalancesRequest::internal_default_instance();
}
::WebAPI_1::LastStatementBalancesRequest* InformationRequest::mutable_last_statement_balances_request() {
  set_has_last_statement_balances_request();
  if (last_statement_balances_request_ == NULL) {
    last_statement_balances_request_ = new ::WebAPI_1::LastStatementBalancesRequest;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationRequest.last_statement_balances_request)
  return last_statement_balances_request_;
}
::WebAPI_1::LastStatementBalancesRequest* InformationRequest::release_last_statement_balances_request() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationRequest.last_statement_balances_request)
  clear_has_last_statement_balances_request();
  ::WebAPI_1::LastStatementBalancesRequest* temp = last_statement_balances_request_;
  last_statement_balances_request_ = NULL;
  return temp;
}
void InformationRequest::set_allocated_last_statement_balances_request(::WebAPI_1::LastStatementBalancesRequest* last_statement_balances_request) {
  delete last_statement_balances_request_;
  last_statement_balances_request_ = last_statement_balances_request;
  if (last_statement_balances_request) {
    set_has_last_statement_balances_request();
  } else {
    clear_has_last_statement_balances_request();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationRequest.last_statement_balances_request)
}

// optional .WebAPI_1.CurrencyRatesRequest currency_rates_request = 6;
bool InformationRequest::has_currency_rates_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InformationRequest::set_has_currency_rates_request() {
  _has_bits_[0] |= 0x00000008u;
}
void InformationRequest::clear_has_currency_rates_request() {
  _has_bits_[0] &= ~0x00000008u;
}
void InformationRequest::clear_currency_rates_request() {
  if (currency_rates_request_ != NULL) currency_rates_request_->::WebAPI_1::CurrencyRatesRequest::Clear();
  clear_has_currency_rates_request();
}
const ::WebAPI_1::CurrencyRatesRequest& InformationRequest::currency_rates_request() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationRequest.currency_rates_request)
  return currency_rates_request_ != NULL ? *currency_rates_request_
                         : *::WebAPI_1::CurrencyRatesRequest::internal_default_instance();
}
::WebAPI_1::CurrencyRatesRequest* InformationRequest::mutable_currency_rates_request() {
  set_has_currency_rates_request();
  if (currency_rates_request_ == NULL) {
    currency_rates_request_ = new ::WebAPI_1::CurrencyRatesRequest;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationRequest.currency_rates_request)
  return currency_rates_request_;
}
::WebAPI_1::CurrencyRatesRequest* InformationRequest::release_currency_rates_request() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationRequest.currency_rates_request)
  clear_has_currency_rates_request();
  ::WebAPI_1::CurrencyRatesRequest* temp = currency_rates_request_;
  currency_rates_request_ = NULL;
  return temp;
}
void InformationRequest::set_allocated_currency_rates_request(::WebAPI_1::CurrencyRatesRequest* currency_rates_request) {
  delete currency_rates_request_;
  currency_rates_request_ = currency_rates_request;
  if (currency_rates_request) {
    set_has_currency_rates_request();
  } else {
    clear_has_currency_rates_request();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationRequest.currency_rates_request)
}

// optional .WebAPI_1.SessionInformationRequest session_information_request = 7;
bool InformationRequest::has_session_information_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InformationRequest::set_has_session_information_request() {
  _has_bits_[0] |= 0x00000010u;
}
void InformationRequest::clear_has_session_information_request() {
  _has_bits_[0] &= ~0x00000010u;
}
void InformationRequest::clear_session_information_request() {
  if (session_information_request_ != NULL) session_information_request_->::WebAPI_1::SessionInformationRequest::Clear();
  clear_has_session_information_request();
}
const ::WebAPI_1::SessionInformationRequest& InformationRequest::session_information_request() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationRequest.session_information_request)
  return session_information_request_ != NULL ? *session_information_request_
                         : *::WebAPI_1::SessionInformationRequest::internal_default_instance();
}
::WebAPI_1::SessionInformationRequest* InformationRequest::mutable_session_information_request() {
  set_has_session_information_request();
  if (session_information_request_ == NULL) {
    session_information_request_ = new ::WebAPI_1::SessionInformationRequest;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationRequest.session_information_request)
  return session_information_request_;
}
::WebAPI_1::SessionInformationRequest* InformationRequest::release_session_information_request() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationRequest.session_information_request)
  clear_has_session_information_request();
  ::WebAPI_1::SessionInformationRequest* temp = session_information_request_;
  session_information_request_ = NULL;
  return temp;
}
void InformationRequest::set_allocated_session_information_request(::WebAPI_1::SessionInformationRequest* session_information_request) {
  delete session_information_request_;
  session_information_request_ = session_information_request;
  if (session_information_request) {
    set_has_session_information_request();
  } else {
    clear_has_session_information_request();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationRequest.session_information_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InformationReport::kIdFieldNumber;
const int InformationReport::kIsReportCompleteFieldNumber;
const int InformationReport::kStatusCodeFieldNumber;
const int InformationReport::kTextMessageFieldNumber;
const int InformationReport::kAccountsReportFieldNumber;
const int InformationReport::kSymbolResolutionReportFieldNumber;
const int InformationReport::kLastStatementBalancesReportFieldNumber;
const int InformationReport::kCurrencyRatesReportFieldNumber;
const int InformationReport::kSessionInformationReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InformationReport::InformationReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.InformationReport)
}
InformationReport::InformationReport(const InformationReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  if (from.has_accounts_report()) {
    accounts_report_ = new ::WebAPI_1::AccountsReport(*from.accounts_report_);
  } else {
    accounts_report_ = NULL;
  }
  if (from.has_symbol_resolution_report()) {
    symbol_resolution_report_ = new ::WebAPI_1::SymbolResolutionReport(*from.symbol_resolution_report_);
  } else {
    symbol_resolution_report_ = NULL;
  }
  if (from.has_last_statement_balances_report()) {
    last_statement_balances_report_ = new ::WebAPI_1::LastStatementBalancesReport(*from.last_statement_balances_report_);
  } else {
    last_statement_balances_report_ = NULL;
  }
  if (from.has_currency_rates_report()) {
    currency_rates_report_ = new ::WebAPI_1::CurrencyRatesReport(*from.currency_rates_report_);
  } else {
    currency_rates_report_ = NULL;
  }
  if (from.has_session_information_report()) {
    session_information_report_ = new ::WebAPI_1::SessionInformationReport(*from.session_information_report_);
  } else {
    session_information_report_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&is_report_complete_) -
    reinterpret_cast<char*>(&id_) + sizeof(is_report_complete_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.InformationReport)
}

void InformationReport::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accounts_report_, 0, reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&accounts_report_) + sizeof(status_code_));
  is_report_complete_ = true;
}

InformationReport::~InformationReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.InformationReport)
  SharedDtor();
}

void InformationReport::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete accounts_report_;
  }
  if (this != internal_default_instance()) {
    delete symbol_resolution_report_;
  }
  if (this != internal_default_instance()) {
    delete last_statement_balances_report_;
  }
  if (this != internal_default_instance()) {
    delete currency_rates_report_;
  }
  if (this != internal_default_instance()) {
    delete session_information_report_;
  }
}

void InformationReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InformationReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[18].descriptor;
}

const InformationReport& InformationReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

InformationReport* InformationReport::New(::google::protobuf::Arena* arena) const {
  InformationReport* n = new InformationReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InformationReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.InformationReport)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_text_message()) {
      GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_accounts_report()) {
      GOOGLE_DCHECK(accounts_report_ != NULL);
      accounts_report_->::WebAPI_1::AccountsReport::Clear();
    }
    if (has_symbol_resolution_report()) {
      GOOGLE_DCHECK(symbol_resolution_report_ != NULL);
      symbol_resolution_report_->::WebAPI_1::SymbolResolutionReport::Clear();
    }
    if (has_last_statement_balances_report()) {
      GOOGLE_DCHECK(last_statement_balances_report_ != NULL);
      last_statement_balances_report_->::WebAPI_1::LastStatementBalancesReport::Clear();
    }
    if (has_currency_rates_report()) {
      GOOGLE_DCHECK(currency_rates_report_ != NULL);
      currency_rates_report_->::WebAPI_1::CurrencyRatesReport::Clear();
    }
    if (has_session_information_report()) {
      GOOGLE_DCHECK(session_information_report_ != NULL);
      session_information_report_->::WebAPI_1::SessionInformationReport::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&id_) + sizeof(status_code_));
  }
  is_report_complete_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InformationReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.InformationReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_report_complete = 2 [default = true];
      case 2: {
        if (tag == 16u) {
          set_has_is_report_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_report_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 status_code = 3;
      case 3: {
        if (tag == 24u) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.InformationReport.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.AccountsReport accounts_report = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accounts_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.SymbolResolutionReport symbol_resolution_report = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol_resolution_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.LastStatementBalancesReport last_statement_balances_report = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_statement_balances_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.CurrencyRatesReport currency_rates_report = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currency_rates_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.SessionInformationReport session_information_report = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_information_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.InformationReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.InformationReport)
  return false;
#undef DO_
}

void InformationReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.InformationReport)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool is_report_complete = 2 [default = true];
  if (has_is_report_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_report_complete(), output);
  }

  // required uint32 status_code = 3;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status_code(), output);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.InformationReport.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text_message(), output);
  }

  // optional .WebAPI_1.AccountsReport accounts_report = 5;
  if (has_accounts_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->accounts_report_, output);
  }

  // optional .WebAPI_1.SymbolResolutionReport symbol_resolution_report = 6;
  if (has_symbol_resolution_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->symbol_resolution_report_, output);
  }

  // optional .WebAPI_1.LastStatementBalancesReport last_statement_balances_report = 7;
  if (has_last_statement_balances_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->last_statement_balances_report_, output);
  }

  // optional .WebAPI_1.CurrencyRatesReport currency_rates_report = 8;
  if (has_currency_rates_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->currency_rates_report_, output);
  }

  // optional .WebAPI_1.SessionInformationReport session_information_report = 9;
  if (has_session_information_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->session_information_report_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.InformationReport)
}

::google::protobuf::uint8* InformationReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.InformationReport)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool is_report_complete = 2 [default = true];
  if (has_is_report_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_report_complete(), target);
  }

  // required uint32 status_code = 3;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status_code(), target);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.InformationReport.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text_message(), target);
  }

  // optional .WebAPI_1.AccountsReport accounts_report = 5;
  if (has_accounts_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->accounts_report_, false, target);
  }

  // optional .WebAPI_1.SymbolResolutionReport symbol_resolution_report = 6;
  if (has_symbol_resolution_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->symbol_resolution_report_, false, target);
  }

  // optional .WebAPI_1.LastStatementBalancesReport last_statement_balances_report = 7;
  if (has_last_statement_balances_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->last_statement_balances_report_, false, target);
  }

  // optional .WebAPI_1.CurrencyRatesReport currency_rates_report = 8;
  if (has_currency_rates_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->currency_rates_report_, false, target);
  }

  // optional .WebAPI_1.SessionInformationReport session_information_report = 9;
  if (has_session_information_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->session_information_report_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.InformationReport)
  return target;
}

size_t InformationReport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.InformationReport)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_status_code()) {
    // required uint32 status_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());
  }

  return total_size;
}
size_t InformationReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.InformationReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000c0) ^ 0x000000c0) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 status_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string text_message = 4;
    if (has_text_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_message());
    }

    // optional .WebAPI_1.AccountsReport accounts_report = 5;
    if (has_accounts_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accounts_report_);
    }

    // optional .WebAPI_1.SymbolResolutionReport symbol_resolution_report = 6;
    if (has_symbol_resolution_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->symbol_resolution_report_);
    }

    // optional .WebAPI_1.LastStatementBalancesReport last_statement_balances_report = 7;
    if (has_last_statement_balances_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_statement_balances_report_);
    }

    // optional .WebAPI_1.CurrencyRatesReport currency_rates_report = 8;
    if (has_currency_rates_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->currency_rates_report_);
    }

    // optional .WebAPI_1.SessionInformationReport session_information_report = 9;
    if (has_session_information_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_information_report_);
    }

  }
  // optional bool is_report_complete = 2 [default = true];
  if (has_is_report_complete()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InformationReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.InformationReport)
  GOOGLE_DCHECK_NE(&from, this);
  const InformationReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InformationReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.InformationReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.InformationReport)
    MergeFrom(*source);
  }
}

void InformationReport::MergeFrom(const InformationReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.InformationReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_accounts_report()) {
      mutable_accounts_report()->::WebAPI_1::AccountsReport::MergeFrom(from.accounts_report());
    }
    if (from.has_symbol_resolution_report()) {
      mutable_symbol_resolution_report()->::WebAPI_1::SymbolResolutionReport::MergeFrom(from.symbol_resolution_report());
    }
    if (from.has_last_statement_balances_report()) {
      mutable_last_statement_balances_report()->::WebAPI_1::LastStatementBalancesReport::MergeFrom(from.last_statement_balances_report());
    }
    if (from.has_currency_rates_report()) {
      mutable_currency_rates_report()->::WebAPI_1::CurrencyRatesReport::MergeFrom(from.currency_rates_report());
    }
    if (from.has_session_information_report()) {
      mutable_session_information_report()->::WebAPI_1::SessionInformationReport::MergeFrom(from.session_information_report());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
  }
  if (from.has_is_report_complete()) {
    set_is_report_complete(from.is_report_complete());
  }
}

void InformationReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.InformationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InformationReport::CopyFrom(const InformationReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.InformationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformationReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c0) != 0x000000c0) return false;
  if (has_accounts_report()) {
    if (!this->accounts_report_->IsInitialized()) return false;
  }
  if (has_symbol_resolution_report()) {
    if (!this->symbol_resolution_report_->IsInitialized()) return false;
  }
  if (has_last_statement_balances_report()) {
    if (!this->last_statement_balances_report_->IsInitialized()) return false;
  }
  if (has_currency_rates_report()) {
    if (!this->currency_rates_report_->IsInitialized()) return false;
  }
  if (has_session_information_report()) {
    if (!this->session_information_report_->IsInitialized()) return false;
  }
  return true;
}

void InformationReport::Swap(InformationReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InformationReport::InternalSwap(InformationReport* other) {
  text_message_.Swap(&other->text_message_);
  std::swap(accounts_report_, other->accounts_report_);
  std::swap(symbol_resolution_report_, other->symbol_resolution_report_);
  std::swap(last_statement_balances_report_, other->last_statement_balances_report_);
  std::swap(currency_rates_report_, other->currency_rates_report_);
  std::swap(session_information_report_, other->session_information_report_);
  std::swap(id_, other->id_);
  std::swap(status_code_, other->status_code_);
  std::swap(is_report_complete_, other->is_report_complete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InformationReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InformationReport

// required uint32 id = 1;
bool InformationReport::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InformationReport::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
void InformationReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void InformationReport::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 InformationReport::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.id)
  return id_;
}
void InformationReport::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.InformationReport.id)
}

// optional bool is_report_complete = 2 [default = true];
bool InformationReport::has_is_report_complete() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InformationReport::set_has_is_report_complete() {
  _has_bits_[0] |= 0x00000100u;
}
void InformationReport::clear_has_is_report_complete() {
  _has_bits_[0] &= ~0x00000100u;
}
void InformationReport::clear_is_report_complete() {
  is_report_complete_ = true;
  clear_has_is_report_complete();
}
bool InformationReport::is_report_complete() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.is_report_complete)
  return is_report_complete_;
}
void InformationReport::set_is_report_complete(bool value) {
  set_has_is_report_complete();
  is_report_complete_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.InformationReport.is_report_complete)
}

// required uint32 status_code = 3;
bool InformationReport::has_status_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InformationReport::set_has_status_code() {
  _has_bits_[0] |= 0x00000080u;
}
void InformationReport::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000080u;
}
void InformationReport::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
::google::protobuf::uint32 InformationReport::status_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.status_code)
  return status_code_;
}
void InformationReport::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.InformationReport.status_code)
}

// optional string text_message = 4;
bool InformationReport::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InformationReport::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void InformationReport::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void InformationReport::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& InformationReport::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.text_message)
  return text_message_.GetNoArena();
}
void InformationReport::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.InformationReport.text_message)
}
void InformationReport::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.InformationReport.text_message)
}
void InformationReport::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.InformationReport.text_message)
}
::std::string* InformationReport::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationReport.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InformationReport::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationReport.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InformationReport::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationReport.text_message)
}

// optional .WebAPI_1.AccountsReport accounts_report = 5;
bool InformationReport::has_accounts_report() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InformationReport::set_has_accounts_report() {
  _has_bits_[0] |= 0x00000002u;
}
void InformationReport::clear_has_accounts_report() {
  _has_bits_[0] &= ~0x00000002u;
}
void InformationReport::clear_accounts_report() {
  if (accounts_report_ != NULL) accounts_report_->::WebAPI_1::AccountsReport::Clear();
  clear_has_accounts_report();
}
const ::WebAPI_1::AccountsReport& InformationReport::accounts_report() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.accounts_report)
  return accounts_report_ != NULL ? *accounts_report_
                         : *::WebAPI_1::AccountsReport::internal_default_instance();
}
::WebAPI_1::AccountsReport* InformationReport::mutable_accounts_report() {
  set_has_accounts_report();
  if (accounts_report_ == NULL) {
    accounts_report_ = new ::WebAPI_1::AccountsReport;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationReport.accounts_report)
  return accounts_report_;
}
::WebAPI_1::AccountsReport* InformationReport::release_accounts_report() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationReport.accounts_report)
  clear_has_accounts_report();
  ::WebAPI_1::AccountsReport* temp = accounts_report_;
  accounts_report_ = NULL;
  return temp;
}
void InformationReport::set_allocated_accounts_report(::WebAPI_1::AccountsReport* accounts_report) {
  delete accounts_report_;
  accounts_report_ = accounts_report;
  if (accounts_report) {
    set_has_accounts_report();
  } else {
    clear_has_accounts_report();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationReport.accounts_report)
}

// optional .WebAPI_1.SymbolResolutionReport symbol_resolution_report = 6;
bool InformationReport::has_symbol_resolution_report() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InformationReport::set_has_symbol_resolution_report() {
  _has_bits_[0] |= 0x00000004u;
}
void InformationReport::clear_has_symbol_resolution_report() {
  _has_bits_[0] &= ~0x00000004u;
}
void InformationReport::clear_symbol_resolution_report() {
  if (symbol_resolution_report_ != NULL) symbol_resolution_report_->::WebAPI_1::SymbolResolutionReport::Clear();
  clear_has_symbol_resolution_report();
}
const ::WebAPI_1::SymbolResolutionReport& InformationReport::symbol_resolution_report() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.symbol_resolution_report)
  return symbol_resolution_report_ != NULL ? *symbol_resolution_report_
                         : *::WebAPI_1::SymbolResolutionReport::internal_default_instance();
}
::WebAPI_1::SymbolResolutionReport* InformationReport::mutable_symbol_resolution_report() {
  set_has_symbol_resolution_report();
  if (symbol_resolution_report_ == NULL) {
    symbol_resolution_report_ = new ::WebAPI_1::SymbolResolutionReport;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationReport.symbol_resolution_report)
  return symbol_resolution_report_;
}
::WebAPI_1::SymbolResolutionReport* InformationReport::release_symbol_resolution_report() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationReport.symbol_resolution_report)
  clear_has_symbol_resolution_report();
  ::WebAPI_1::SymbolResolutionReport* temp = symbol_resolution_report_;
  symbol_resolution_report_ = NULL;
  return temp;
}
void InformationReport::set_allocated_symbol_resolution_report(::WebAPI_1::SymbolResolutionReport* symbol_resolution_report) {
  delete symbol_resolution_report_;
  symbol_resolution_report_ = symbol_resolution_report;
  if (symbol_resolution_report) {
    set_has_symbol_resolution_report();
  } else {
    clear_has_symbol_resolution_report();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationReport.symbol_resolution_report)
}

// optional .WebAPI_1.LastStatementBalancesReport last_statement_balances_report = 7;
bool InformationReport::has_last_statement_balances_report() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InformationReport::set_has_last_statement_balances_report() {
  _has_bits_[0] |= 0x00000008u;
}
void InformationReport::clear_has_last_statement_balances_report() {
  _has_bits_[0] &= ~0x00000008u;
}
void InformationReport::clear_last_statement_balances_report() {
  if (last_statement_balances_report_ != NULL) last_statement_balances_report_->::WebAPI_1::LastStatementBalancesReport::Clear();
  clear_has_last_statement_balances_report();
}
const ::WebAPI_1::LastStatementBalancesReport& InformationReport::last_statement_balances_report() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.last_statement_balances_report)
  return last_statement_balances_report_ != NULL ? *last_statement_balances_report_
                         : *::WebAPI_1::LastStatementBalancesReport::internal_default_instance();
}
::WebAPI_1::LastStatementBalancesReport* InformationReport::mutable_last_statement_balances_report() {
  set_has_last_statement_balances_report();
  if (last_statement_balances_report_ == NULL) {
    last_statement_balances_report_ = new ::WebAPI_1::LastStatementBalancesReport;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationReport.last_statement_balances_report)
  return last_statement_balances_report_;
}
::WebAPI_1::LastStatementBalancesReport* InformationReport::release_last_statement_balances_report() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationReport.last_statement_balances_report)
  clear_has_last_statement_balances_report();
  ::WebAPI_1::LastStatementBalancesReport* temp = last_statement_balances_report_;
  last_statement_balances_report_ = NULL;
  return temp;
}
void InformationReport::set_allocated_last_statement_balances_report(::WebAPI_1::LastStatementBalancesReport* last_statement_balances_report) {
  delete last_statement_balances_report_;
  last_statement_balances_report_ = last_statement_balances_report;
  if (last_statement_balances_report) {
    set_has_last_statement_balances_report();
  } else {
    clear_has_last_statement_balances_report();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationReport.last_statement_balances_report)
}

// optional .WebAPI_1.CurrencyRatesReport currency_rates_report = 8;
bool InformationReport::has_currency_rates_report() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InformationReport::set_has_currency_rates_report() {
  _has_bits_[0] |= 0x00000010u;
}
void InformationReport::clear_has_currency_rates_report() {
  _has_bits_[0] &= ~0x00000010u;
}
void InformationReport::clear_currency_rates_report() {
  if (currency_rates_report_ != NULL) currency_rates_report_->::WebAPI_1::CurrencyRatesReport::Clear();
  clear_has_currency_rates_report();
}
const ::WebAPI_1::CurrencyRatesReport& InformationReport::currency_rates_report() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.currency_rates_report)
  return currency_rates_report_ != NULL ? *currency_rates_report_
                         : *::WebAPI_1::CurrencyRatesReport::internal_default_instance();
}
::WebAPI_1::CurrencyRatesReport* InformationReport::mutable_currency_rates_report() {
  set_has_currency_rates_report();
  if (currency_rates_report_ == NULL) {
    currency_rates_report_ = new ::WebAPI_1::CurrencyRatesReport;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationReport.currency_rates_report)
  return currency_rates_report_;
}
::WebAPI_1::CurrencyRatesReport* InformationReport::release_currency_rates_report() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationReport.currency_rates_report)
  clear_has_currency_rates_report();
  ::WebAPI_1::CurrencyRatesReport* temp = currency_rates_report_;
  currency_rates_report_ = NULL;
  return temp;
}
void InformationReport::set_allocated_currency_rates_report(::WebAPI_1::CurrencyRatesReport* currency_rates_report) {
  delete currency_rates_report_;
  currency_rates_report_ = currency_rates_report;
  if (currency_rates_report) {
    set_has_currency_rates_report();
  } else {
    clear_has_currency_rates_report();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationReport.currency_rates_report)
}

// optional .WebAPI_1.SessionInformationReport session_information_report = 9;
bool InformationReport::has_session_information_report() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InformationReport::set_has_session_information_report() {
  _has_bits_[0] |= 0x00000020u;
}
void InformationReport::clear_has_session_information_report() {
  _has_bits_[0] &= ~0x00000020u;
}
void InformationReport::clear_session_information_report() {
  if (session_information_report_ != NULL) session_information_report_->::WebAPI_1::SessionInformationReport::Clear();
  clear_has_session_information_report();
}
const ::WebAPI_1::SessionInformationReport& InformationReport::session_information_report() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.InformationReport.session_information_report)
  return session_information_report_ != NULL ? *session_information_report_
                         : *::WebAPI_1::SessionInformationReport::internal_default_instance();
}
::WebAPI_1::SessionInformationReport* InformationReport::mutable_session_information_report() {
  set_has_session_information_report();
  if (session_information_report_ == NULL) {
    session_information_report_ = new ::WebAPI_1::SessionInformationReport;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.InformationReport.session_information_report)
  return session_information_report_;
}
::WebAPI_1::SessionInformationReport* InformationReport::release_session_information_report() {
  // @@protoc_insertion_point(field_release:WebAPI_1.InformationReport.session_information_report)
  clear_has_session_information_report();
  ::WebAPI_1::SessionInformationReport* temp = session_information_report_;
  session_information_report_ = NULL;
  return temp;
}
void InformationReport::set_allocated_session_information_report(::WebAPI_1::SessionInformationReport* session_information_report) {
  delete session_information_report_;
  session_information_report_ = session_information_report;
  if (session_information_report) {
    set_has_session_information_report();
  } else {
    clear_has_session_information_report();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.InformationReport.session_information_report)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountsRequest::AccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.AccountsRequest)
}
AccountsRequest::AccountsRequest(const AccountsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.AccountsRequest)
}

void AccountsRequest::SharedCtor() {
  _cached_size_ = 0;
}

AccountsRequest::~AccountsRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.AccountsRequest)
  SharedDtor();
}

void AccountsRequest::SharedDtor() {
}

void AccountsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[19].descriptor;
}

const AccountsRequest& AccountsRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

AccountsRequest* AccountsRequest::New(::google::protobuf::Arena* arena) const {
  AccountsRequest* n = new AccountsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.AccountsRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.AccountsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.AccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.AccountsRequest)
  return false;
#undef DO_
}

void AccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.AccountsRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.AccountsRequest)
}

::google::protobuf::uint8* AccountsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.AccountsRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.AccountsRequest)
  return target;
}

size_t AccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.AccountsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.AccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.AccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.AccountsRequest)
    MergeFrom(*source);
  }
}

void AccountsRequest::MergeFrom(const AccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.AccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void AccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.AccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountsRequest::CopyFrom(const AccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.AccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsRequest::IsInitialized() const {
  return true;
}

void AccountsRequest::Swap(AccountsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountsRequest::InternalSwap(AccountsRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountsRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountsReport::kBrokerageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountsReport::AccountsReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.AccountsReport)
}
AccountsReport::AccountsReport(const AccountsReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      brokerage_(from.brokerage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.AccountsReport)
}

void AccountsReport::SharedCtor() {
  _cached_size_ = 0;
}

AccountsReport::~AccountsReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.AccountsReport)
  SharedDtor();
}

void AccountsReport::SharedDtor() {
}

void AccountsReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountsReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[20].descriptor;
}

const AccountsReport& AccountsReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

AccountsReport* AccountsReport::New(::google::protobuf::Arena* arena) const {
  AccountsReport* n = new AccountsReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountsReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.AccountsReport)
  brokerage_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountsReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.AccountsReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WebAPI_1.Brokerage brokerage = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_brokerage()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.AccountsReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.AccountsReport)
  return false;
#undef DO_
}

void AccountsReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.AccountsReport)
  // repeated .WebAPI_1.Brokerage brokerage = 1;
  for (unsigned int i = 0, n = this->brokerage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brokerage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.AccountsReport)
}

::google::protobuf::uint8* AccountsReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.AccountsReport)
  // repeated .WebAPI_1.Brokerage brokerage = 1;
  for (unsigned int i = 0, n = this->brokerage_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->brokerage(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.AccountsReport)
  return target;
}

size_t AccountsReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.AccountsReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WebAPI_1.Brokerage brokerage = 1;
  {
    unsigned int count = this->brokerage_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brokerage(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountsReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.AccountsReport)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountsReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountsReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.AccountsReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.AccountsReport)
    MergeFrom(*source);
  }
}

void AccountsReport::MergeFrom(const AccountsReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.AccountsReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokerage_.MergeFrom(from.brokerage_);
}

void AccountsReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.AccountsReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountsReport::CopyFrom(const AccountsReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.AccountsReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsReport::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->brokerage())) return false;
  return true;
}

void AccountsReport::Swap(AccountsReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountsReport::InternalSwap(AccountsReport* other) {
  brokerage_.UnsafeArenaSwap(&other->brokerage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountsReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountsReport

// repeated .WebAPI_1.Brokerage brokerage = 1;
int AccountsReport::brokerage_size() const {
  return brokerage_.size();
}
void AccountsReport::clear_brokerage() {
  brokerage_.Clear();
}
const ::WebAPI_1::Brokerage& AccountsReport::brokerage(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.AccountsReport.brokerage)
  return brokerage_.Get(index);
}
::WebAPI_1::Brokerage* AccountsReport::mutable_brokerage(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.AccountsReport.brokerage)
  return brokerage_.Mutable(index);
}
::WebAPI_1::Brokerage* AccountsReport::add_brokerage() {
  // @@protoc_insertion_point(field_add:WebAPI_1.AccountsReport.brokerage)
  return brokerage_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::Brokerage >*
AccountsReport::mutable_brokerage() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.AccountsReport.brokerage)
  return &brokerage_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::Brokerage >&
AccountsReport::brokerage() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.AccountsReport.brokerage)
  return brokerage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brokerage::kIdFieldNumber;
const int Brokerage::kNameFieldNumber;
const int Brokerage::kSalesSeriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brokerage::Brokerage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Brokerage)
}
Brokerage::Brokerage(const Brokerage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sales_series_(from.sales_series_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Brokerage)
}

void Brokerage::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

Brokerage::~Brokerage() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Brokerage)
  SharedDtor();
}

void Brokerage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Brokerage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brokerage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[21].descriptor;
}

const Brokerage& Brokerage::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Brokerage* Brokerage::New(::google::protobuf::Arena* arena) const {
  Brokerage* n = new Brokerage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Brokerage::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Brokerage)
  sales_series_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brokerage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Brokerage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Brokerage.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.SalesSeries sales_series = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sales_series()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Brokerage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Brokerage)
  return false;
#undef DO_
}

void Brokerage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Brokerage)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Brokerage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .WebAPI_1.SalesSeries sales_series = 3;
  for (unsigned int i = 0, n = this->sales_series_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sales_series(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Brokerage)
}

::google::protobuf::uint8* Brokerage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Brokerage)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Brokerage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .WebAPI_1.SalesSeries sales_series = 3;
  for (unsigned int i = 0, n = this->sales_series_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sales_series(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Brokerage)
  return target;
}

size_t Brokerage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.Brokerage)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t Brokerage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Brokerage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.SalesSeries sales_series = 3;
  {
    unsigned int count = this->sales_series_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sales_series(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brokerage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Brokerage)
  GOOGLE_DCHECK_NE(&from, this);
  const Brokerage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brokerage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Brokerage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Brokerage)
    MergeFrom(*source);
  }
}

void Brokerage::MergeFrom(const Brokerage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Brokerage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sales_series_.MergeFrom(from.sales_series_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void Brokerage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Brokerage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brokerage::CopyFrom(const Brokerage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Brokerage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brokerage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sales_series())) return false;
  return true;
}

void Brokerage::Swap(Brokerage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brokerage::InternalSwap(Brokerage* other) {
  sales_series_.UnsafeArenaSwap(&other->sales_series_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Brokerage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Brokerage

// required uint32 id = 1;
bool Brokerage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Brokerage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Brokerage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Brokerage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Brokerage::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Brokerage.id)
  return id_;
}
void Brokerage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Brokerage.id)
}

// required string name = 2;
bool Brokerage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Brokerage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Brokerage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Brokerage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Brokerage::name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Brokerage.name)
  return name_.GetNoArena();
}
void Brokerage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Brokerage.name)
}
void Brokerage::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Brokerage.name)
}
void Brokerage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Brokerage.name)
}
::std::string* Brokerage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Brokerage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Brokerage::release_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Brokerage.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Brokerage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Brokerage.name)
}

// repeated .WebAPI_1.SalesSeries sales_series = 3;
int Brokerage::sales_series_size() const {
  return sales_series_.size();
}
void Brokerage::clear_sales_series() {
  sales_series_.Clear();
}
const ::WebAPI_1::SalesSeries& Brokerage::sales_series(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Brokerage.sales_series)
  return sales_series_.Get(index);
}
::WebAPI_1::SalesSeries* Brokerage::mutable_sales_series(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Brokerage.sales_series)
  return sales_series_.Mutable(index);
}
::WebAPI_1::SalesSeries* Brokerage::add_sales_series() {
  // @@protoc_insertion_point(field_add:WebAPI_1.Brokerage.sales_series)
  return sales_series_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::SalesSeries >*
Brokerage::mutable_sales_series() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.Brokerage.sales_series)
  return &sales_series_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::SalesSeries >&
Brokerage::sales_series() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.Brokerage.sales_series)
  return sales_series_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SalesSeries::kNumberFieldNumber;
const int SalesSeries::kNameFieldNumber;
const int SalesSeries::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SalesSeries::SalesSeries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SalesSeries)
}
SalesSeries::SalesSeries(const SalesSeries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_(from.account_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_number()) {
    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SalesSeries)
}

void SalesSeries::SharedCtor() {
  _cached_size_ = 0;
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SalesSeries::~SalesSeries() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SalesSeries)
  SharedDtor();
}

void SalesSeries::SharedDtor() {
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SalesSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SalesSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[22].descriptor;
}

const SalesSeries& SalesSeries::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SalesSeries* SalesSeries::New(::google::protobuf::Arena* arena) const {
  SalesSeries* n = new SalesSeries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SalesSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SalesSeries)
  account_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_number()) {
      GOOGLE_DCHECK(!number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*number_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SalesSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SalesSeries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string number = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.SalesSeries.number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.SalesSeries.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.Account account = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_account()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SalesSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SalesSeries)
  return false;
#undef DO_
}

void SalesSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SalesSeries)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SalesSeries.number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->number(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SalesSeries.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .WebAPI_1.Account account = 3;
  for (unsigned int i = 0, n = this->account_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SalesSeries)
}

::google::protobuf::uint8* SalesSeries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SalesSeries)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SalesSeries.number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SalesSeries.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .WebAPI_1.Account account = 3;
  for (unsigned int i = 0, n = this->account_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->account(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SalesSeries)
  return target;
}

size_t SalesSeries::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.SalesSeries)
  size_t total_size = 0;

  if (has_number()) {
    // required string number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
size_t SalesSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SalesSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.Account account = 3;
  {
    unsigned int count = this->account_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SalesSeries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SalesSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const SalesSeries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SalesSeries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SalesSeries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SalesSeries)
    MergeFrom(*source);
  }
}

void SalesSeries::MergeFrom(const SalesSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SalesSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.MergeFrom(from.account_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_number()) {
      set_has_number();
      number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
}

void SalesSeries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SalesSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalesSeries::CopyFrom(const SalesSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SalesSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalesSeries::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->account())) return false;
  return true;
}

void SalesSeries::Swap(SalesSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SalesSeries::InternalSwap(SalesSeries* other) {
  account_.UnsafeArenaSwap(&other->account_);
  number_.Swap(&other->number_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SalesSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SalesSeries

// required string number = 1;
bool SalesSeries::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SalesSeries::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
void SalesSeries::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void SalesSeries::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
const ::std::string& SalesSeries::number() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SalesSeries.number)
  return number_.GetNoArena();
}
void SalesSeries::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.SalesSeries.number)
}
void SalesSeries::set_number(const char* value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.SalesSeries.number)
}
void SalesSeries::set_number(const char* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.SalesSeries.number)
}
::std::string* SalesSeries::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SalesSeries.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SalesSeries::release_number() {
  // @@protoc_insertion_point(field_release:WebAPI_1.SalesSeries.number)
  clear_has_number();
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SalesSeries::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.SalesSeries.number)
}

// required string name = 2;
bool SalesSeries::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SalesSeries::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SalesSeries::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SalesSeries::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SalesSeries::name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SalesSeries.name)
  return name_.GetNoArena();
}
void SalesSeries::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.SalesSeries.name)
}
void SalesSeries::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.SalesSeries.name)
}
void SalesSeries::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.SalesSeries.name)
}
::std::string* SalesSeries::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SalesSeries.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SalesSeries::release_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.SalesSeries.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SalesSeries::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.SalesSeries.name)
}

// repeated .WebAPI_1.Account account = 3;
int SalesSeries::account_size() const {
  return account_.size();
}
void SalesSeries::clear_account() {
  account_.Clear();
}
const ::WebAPI_1::Account& SalesSeries::account(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SalesSeries.account)
  return account_.Get(index);
}
::WebAPI_1::Account* SalesSeries::mutable_account(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SalesSeries.account)
  return account_.Mutable(index);
}
::WebAPI_1::Account* SalesSeries::add_account() {
  // @@protoc_insertion_point(field_add:WebAPI_1.SalesSeries.account)
  return account_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::Account >*
SalesSeries::mutable_account() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.SalesSeries.account)
  return &account_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::Account >&
SalesSeries::account() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.SalesSeries.account)
  return account_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Account::kAccountIdFieldNumber;
const int Account::kBrokerageAccountIdFieldNumber;
const int Account::kNameFieldNumber;
const int Account::kLastStatementDateFieldNumber;
const int Account::kIsViewOnlyFieldNumber;
const int Account::kIsUnauthorizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Account::Account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Account)
}
Account::Account(const Account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokerage_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brokerage_account_id()) {
    brokerage_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerage_account_id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&last_statement_date_, &from.last_statement_date_,
    reinterpret_cast<char*>(&is_unauthorized_) -
    reinterpret_cast<char*>(&last_statement_date_) + sizeof(is_unauthorized_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Account)
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  brokerage_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_statement_date_, 0, reinterpret_cast<char*>(&is_unauthorized_) -
    reinterpret_cast<char*>(&last_statement_date_) + sizeof(is_unauthorized_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  brokerage_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[23].descriptor;
}

const Account& Account::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Account* Account::New(::google::protobuf::Arena* arena) const {
  Account* n = new Account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Account)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_brokerage_account_id()) {
      GOOGLE_DCHECK(!brokerage_account_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*brokerage_account_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&last_statement_date_, 0, reinterpret_cast<char*>(&is_unauthorized_) -
      reinterpret_cast<char*>(&last_statement_date_) + sizeof(is_unauthorized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 account_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string brokerage_account_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerage_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokerage_account_id().data(), this->brokerage_account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Account.brokerage_account_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Account.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 last_statement_date = 4;
      case 4: {
        if (tag == 32u) {
          set_has_last_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &last_statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_view_only = 5;
      case 5: {
        if (tag == 40u) {
          set_has_is_view_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_view_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_unauthorized = 6;
      case 6: {
        if (tag == 48u) {
          set_has_is_unauthorized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unauthorized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Account)
  return false;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Account)
  // required sint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->account_id(), output);
  }

  // required string brokerage_account_id = 2;
  if (has_brokerage_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerage_account_id().data(), this->brokerage_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Account.brokerage_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerage_account_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Account.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required sint64 last_statement_date = 4;
  if (has_last_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->last_statement_date(), output);
  }

  // optional bool is_view_only = 5;
  if (has_is_view_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_view_only(), output);
  }

  // optional bool is_unauthorized = 6;
  if (has_is_unauthorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_unauthorized(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Account)
}

::google::protobuf::uint8* Account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Account)
  // required sint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->account_id(), target);
  }

  // required string brokerage_account_id = 2;
  if (has_brokerage_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerage_account_id().data(), this->brokerage_account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Account.brokerage_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerage_account_id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Account.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required sint64 last_statement_date = 4;
  if (has_last_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->last_statement_date(), target);
  }

  // optional bool is_view_only = 5;
  if (has_is_view_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_view_only(), target);
  }

  // optional bool is_unauthorized = 6;
  if (has_is_unauthorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_unauthorized(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Account)
  return target;
}

size_t Account::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.Account)
  size_t total_size = 0;

  if (has_brokerage_account_id()) {
    // required string brokerage_account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerage_account_id());
  }

  if (has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_last_statement_date()) {
    // required sint64 last_statement_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->last_statement_date());
  }

  if (has_account_id()) {
    // required sint32 account_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  return total_size;
}
size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Account)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string brokerage_account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerage_account_id());

    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required sint64 last_statement_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->last_statement_date());

    // required sint32 account_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional bool is_view_only = 5;
    if (has_is_view_only()) {
      total_size += 1 + 1;
    }

    // optional bool is_unauthorized = 6;
    if (has_is_unauthorized()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_brokerage_account_id()) {
      set_has_brokerage_account_id();
      brokerage_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerage_account_id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_last_statement_date()) {
      set_last_statement_date(from.last_statement_date());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_is_view_only()) {
      set_is_view_only(from.is_view_only());
    }
    if (from.has_is_unauthorized()) {
      set_is_unauthorized(from.is_unauthorized());
    }
  }
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Account::Swap(Account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Account::InternalSwap(Account* other) {
  brokerage_account_id_.Swap(&other->brokerage_account_id_);
  name_.Swap(&other->name_);
  std::swap(last_statement_date_, other->last_statement_date_);
  std::swap(account_id_, other->account_id_);
  std::swap(is_view_only_, other->is_view_only_);
  std::swap(is_unauthorized_, other->is_unauthorized_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Account

// required sint32 account_id = 1;
bool Account::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Account::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Account::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Account::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 Account::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Account.account_id)
  return account_id_;
}
void Account::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Account.account_id)
}

// required string brokerage_account_id = 2;
bool Account::has_brokerage_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Account::set_has_brokerage_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Account::clear_has_brokerage_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Account::clear_brokerage_account_id() {
  brokerage_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokerage_account_id();
}
const ::std::string& Account::brokerage_account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Account.brokerage_account_id)
  return brokerage_account_id_.GetNoArena();
}
void Account::set_brokerage_account_id(const ::std::string& value) {
  set_has_brokerage_account_id();
  brokerage_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Account.brokerage_account_id)
}
void Account::set_brokerage_account_id(const char* value) {
  set_has_brokerage_account_id();
  brokerage_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Account.brokerage_account_id)
}
void Account::set_brokerage_account_id(const char* value, size_t size) {
  set_has_brokerage_account_id();
  brokerage_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Account.brokerage_account_id)
}
::std::string* Account::mutable_brokerage_account_id() {
  set_has_brokerage_account_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Account.brokerage_account_id)
  return brokerage_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_brokerage_account_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Account.brokerage_account_id)
  clear_has_brokerage_account_id();
  return brokerage_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_brokerage_account_id(::std::string* brokerage_account_id) {
  if (brokerage_account_id != NULL) {
    set_has_brokerage_account_id();
  } else {
    clear_has_brokerage_account_id();
  }
  brokerage_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerage_account_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Account.brokerage_account_id)
}

// required string name = 3;
bool Account::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Account::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Account::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Account::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Account.name)
  return name_.GetNoArena();
}
void Account::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Account.name)
}
void Account::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Account.name)
}
void Account::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Account.name)
}
::std::string* Account::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Account.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Account.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Account.name)
}

// required sint64 last_statement_date = 4;
bool Account::has_last_statement_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Account::set_has_last_statement_date() {
  _has_bits_[0] |= 0x00000004u;
}
void Account::clear_has_last_statement_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void Account::clear_last_statement_date() {
  last_statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_last_statement_date();
}
::google::protobuf::int64 Account::last_statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Account.last_statement_date)
  return last_statement_date_;
}
void Account::set_last_statement_date(::google::protobuf::int64 value) {
  set_has_last_statement_date();
  last_statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Account.last_statement_date)
}

// optional bool is_view_only = 5;
bool Account::has_is_view_only() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Account::set_has_is_view_only() {
  _has_bits_[0] |= 0x00000010u;
}
void Account::clear_has_is_view_only() {
  _has_bits_[0] &= ~0x00000010u;
}
void Account::clear_is_view_only() {
  is_view_only_ = false;
  clear_has_is_view_only();
}
bool Account::is_view_only() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Account.is_view_only)
  return is_view_only_;
}
void Account::set_is_view_only(bool value) {
  set_has_is_view_only();
  is_view_only_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Account.is_view_only)
}

// optional bool is_unauthorized = 6;
bool Account::has_is_unauthorized() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Account::set_has_is_unauthorized() {
  _has_bits_[0] |= 0x00000020u;
}
void Account::clear_has_is_unauthorized() {
  _has_bits_[0] &= ~0x00000020u;
}
void Account::clear_is_unauthorized() {
  is_unauthorized_ = false;
  clear_has_is_unauthorized();
}
bool Account::is_unauthorized() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Account.is_unauthorized)
  return is_unauthorized_;
}
void Account::set_is_unauthorized(bool value) {
  set_has_is_unauthorized();
  is_unauthorized_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Account.is_unauthorized)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolResolutionRequest::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolResolutionRequest::SymbolResolutionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SymbolResolutionRequest)
}
SymbolResolutionRequest::SymbolResolutionRequest(const SymbolResolutionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SymbolResolutionRequest)
}

void SymbolResolutionRequest::SharedCtor() {
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SymbolResolutionRequest::~SymbolResolutionRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SymbolResolutionRequest)
  SharedDtor();
}

void SymbolResolutionRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolResolutionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolResolutionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[24].descriptor;
}

const SymbolResolutionRequest& SymbolResolutionRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SymbolResolutionRequest* SymbolResolutionRequest::New(::google::protobuf::Arena* arena) const {
  SymbolResolutionRequest* n = new SymbolResolutionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolResolutionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SymbolResolutionRequest)
  if (has_symbol()) {
    GOOGLE_DCHECK(!symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*symbol_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolResolutionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SymbolResolutionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.SymbolResolutionRequest.symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SymbolResolutionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SymbolResolutionRequest)
  return false;
#undef DO_
}

void SymbolResolutionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SymbolResolutionRequest)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SymbolResolutionRequest.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SymbolResolutionRequest)
}

::google::protobuf::uint8* SymbolResolutionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SymbolResolutionRequest)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SymbolResolutionRequest.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SymbolResolutionRequest)
  return target;
}

size_t SymbolResolutionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SymbolResolutionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string symbol = 1;
  if (has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolResolutionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SymbolResolutionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolResolutionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolResolutionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SymbolResolutionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SymbolResolutionRequest)
    MergeFrom(*source);
  }
}

void SymbolResolutionRequest::MergeFrom(const SymbolResolutionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SymbolResolutionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    set_has_symbol();
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
}

void SymbolResolutionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SymbolResolutionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolResolutionRequest::CopyFrom(const SymbolResolutionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SymbolResolutionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolResolutionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SymbolResolutionRequest::Swap(SymbolResolutionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolResolutionRequest::InternalSwap(SymbolResolutionRequest* other) {
  symbol_.Swap(&other->symbol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolResolutionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolResolutionRequest

// required string symbol = 1;
bool SymbolResolutionRequest::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolResolutionRequest::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolResolutionRequest::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolResolutionRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
const ::std::string& SymbolResolutionRequest::symbol() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SymbolResolutionRequest.symbol)
  return symbol_.GetNoArena();
}
void SymbolResolutionRequest::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.SymbolResolutionRequest.symbol)
}
void SymbolResolutionRequest::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.SymbolResolutionRequest.symbol)
}
void SymbolResolutionRequest::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.SymbolResolutionRequest.symbol)
}
::std::string* SymbolResolutionRequest::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SymbolResolutionRequest.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolResolutionRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:WebAPI_1.SymbolResolutionRequest.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolResolutionRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.SymbolResolutionRequest.symbol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolResolutionReport::kContractMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolResolutionReport::SymbolResolutionReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SymbolResolutionReport)
}
SymbolResolutionReport::SymbolResolutionReport(const SymbolResolutionReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_contract_metadata()) {
    contract_metadata_ = new ::WebAPI_1::ContractMetadata(*from.contract_metadata_);
  } else {
    contract_metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SymbolResolutionReport)
}

void SymbolResolutionReport::SharedCtor() {
  _cached_size_ = 0;
  contract_metadata_ = NULL;
}

SymbolResolutionReport::~SymbolResolutionReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SymbolResolutionReport)
  SharedDtor();
}

void SymbolResolutionReport::SharedDtor() {
  if (this != internal_default_instance()) {
    delete contract_metadata_;
  }
}

void SymbolResolutionReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolResolutionReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[25].descriptor;
}

const SymbolResolutionReport& SymbolResolutionReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SymbolResolutionReport* SymbolResolutionReport::New(::google::protobuf::Arena* arena) const {
  SymbolResolutionReport* n = new SymbolResolutionReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolResolutionReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SymbolResolutionReport)
  if (has_contract_metadata()) {
    GOOGLE_DCHECK(contract_metadata_ != NULL);
    contract_metadata_->::WebAPI_1::ContractMetadata::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolResolutionReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SymbolResolutionReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WebAPI_1.ContractMetadata contract_metadata = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contract_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SymbolResolutionReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SymbolResolutionReport)
  return false;
#undef DO_
}

void SymbolResolutionReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SymbolResolutionReport)
  // required .WebAPI_1.ContractMetadata contract_metadata = 1;
  if (has_contract_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->contract_metadata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SymbolResolutionReport)
}

::google::protobuf::uint8* SymbolResolutionReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SymbolResolutionReport)
  // required .WebAPI_1.ContractMetadata contract_metadata = 1;
  if (has_contract_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->contract_metadata_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SymbolResolutionReport)
  return target;
}

size_t SymbolResolutionReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SymbolResolutionReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .WebAPI_1.ContractMetadata contract_metadata = 1;
  if (has_contract_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contract_metadata_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolResolutionReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SymbolResolutionReport)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolResolutionReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolResolutionReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SymbolResolutionReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SymbolResolutionReport)
    MergeFrom(*source);
  }
}

void SymbolResolutionReport::MergeFrom(const SymbolResolutionReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SymbolResolutionReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_contract_metadata()) {
    mutable_contract_metadata()->::WebAPI_1::ContractMetadata::MergeFrom(from.contract_metadata());
  }
}

void SymbolResolutionReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SymbolResolutionReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolResolutionReport::CopyFrom(const SymbolResolutionReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SymbolResolutionReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolResolutionReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_contract_metadata()) {
    if (!this->contract_metadata_->IsInitialized()) return false;
  }
  return true;
}

void SymbolResolutionReport::Swap(SymbolResolutionReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolResolutionReport::InternalSwap(SymbolResolutionReport* other) {
  std::swap(contract_metadata_, other->contract_metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolResolutionReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolResolutionReport

// required .WebAPI_1.ContractMetadata contract_metadata = 1;
bool SymbolResolutionReport::has_contract_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SymbolResolutionReport::set_has_contract_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void SymbolResolutionReport::clear_has_contract_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void SymbolResolutionReport::clear_contract_metadata() {
  if (contract_metadata_ != NULL) contract_metadata_->::WebAPI_1::ContractMetadata::Clear();
  clear_has_contract_metadata();
}
const ::WebAPI_1::ContractMetadata& SymbolResolutionReport::contract_metadata() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SymbolResolutionReport.contract_metadata)
  return contract_metadata_ != NULL ? *contract_metadata_
                         : *::WebAPI_1::ContractMetadata::internal_default_instance();
}
::WebAPI_1::ContractMetadata* SymbolResolutionReport::mutable_contract_metadata() {
  set_has_contract_metadata();
  if (contract_metadata_ == NULL) {
    contract_metadata_ = new ::WebAPI_1::ContractMetadata;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SymbolResolutionReport.contract_metadata)
  return contract_metadata_;
}
::WebAPI_1::ContractMetadata* SymbolResolutionReport::release_contract_metadata() {
  // @@protoc_insertion_point(field_release:WebAPI_1.SymbolResolutionReport.contract_metadata)
  clear_has_contract_metadata();
  ::WebAPI_1::ContractMetadata* temp = contract_metadata_;
  contract_metadata_ = NULL;
  return temp;
}
void SymbolResolutionReport::set_allocated_contract_metadata(::WebAPI_1::ContractMetadata* contract_metadata) {
  delete contract_metadata_;
  contract_metadata_ = contract_metadata;
  if (contract_metadata) {
    set_has_contract_metadata();
  } else {
    clear_has_contract_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.SymbolResolutionReport.contract_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastStatementBalancesRequest::LastStatementBalancesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.LastStatementBalancesRequest)
}
LastStatementBalancesRequest::LastStatementBalancesRequest(const LastStatementBalancesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.LastStatementBalancesRequest)
}

void LastStatementBalancesRequest::SharedCtor() {
  _cached_size_ = 0;
}

LastStatementBalancesRequest::~LastStatementBalancesRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.LastStatementBalancesRequest)
  SharedDtor();
}

void LastStatementBalancesRequest::SharedDtor() {
}

void LastStatementBalancesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastStatementBalancesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[26].descriptor;
}

const LastStatementBalancesRequest& LastStatementBalancesRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

LastStatementBalancesRequest* LastStatementBalancesRequest::New(::google::protobuf::Arena* arena) const {
  LastStatementBalancesRequest* n = new LastStatementBalancesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LastStatementBalancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.LastStatementBalancesRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LastStatementBalancesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.LastStatementBalancesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.LastStatementBalancesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.LastStatementBalancesRequest)
  return false;
#undef DO_
}

void LastStatementBalancesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.LastStatementBalancesRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.LastStatementBalancesRequest)
}

::google::protobuf::uint8* LastStatementBalancesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.LastStatementBalancesRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.LastStatementBalancesRequest)
  return target;
}

size_t LastStatementBalancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.LastStatementBalancesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastStatementBalancesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.LastStatementBalancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LastStatementBalancesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LastStatementBalancesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.LastStatementBalancesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.LastStatementBalancesRequest)
    MergeFrom(*source);
  }
}

void LastStatementBalancesRequest::MergeFrom(const LastStatementBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.LastStatementBalancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void LastStatementBalancesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.LastStatementBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastStatementBalancesRequest::CopyFrom(const LastStatementBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.LastStatementBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastStatementBalancesRequest::IsInitialized() const {
  return true;
}

void LastStatementBalancesRequest::Swap(LastStatementBalancesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastStatementBalancesRequest::InternalSwap(LastStatementBalancesRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LastStatementBalancesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LastStatementBalancesRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LastStatementBalancesReport::kBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastStatementBalancesReport::LastStatementBalancesReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.LastStatementBalancesReport)
}
LastStatementBalancesReport::LastStatementBalancesReport(const LastStatementBalancesReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      balance_(from.balance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.LastStatementBalancesReport)
}

void LastStatementBalancesReport::SharedCtor() {
  _cached_size_ = 0;
}

LastStatementBalancesReport::~LastStatementBalancesReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.LastStatementBalancesReport)
  SharedDtor();
}

void LastStatementBalancesReport::SharedDtor() {
}

void LastStatementBalancesReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastStatementBalancesReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[27].descriptor;
}

const LastStatementBalancesReport& LastStatementBalancesReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

LastStatementBalancesReport* LastStatementBalancesReport::New(::google::protobuf::Arena* arena) const {
  LastStatementBalancesReport* n = new LastStatementBalancesReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LastStatementBalancesReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.LastStatementBalancesReport)
  balance_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LastStatementBalancesReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.LastStatementBalancesReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WebAPI_1.Balance balance = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_balance()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.LastStatementBalancesReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.LastStatementBalancesReport)
  return false;
#undef DO_
}

void LastStatementBalancesReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.LastStatementBalancesReport)
  // repeated .WebAPI_1.Balance balance = 1;
  for (unsigned int i = 0, n = this->balance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->balance(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.LastStatementBalancesReport)
}

::google::protobuf::uint8* LastStatementBalancesReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.LastStatementBalancesReport)
  // repeated .WebAPI_1.Balance balance = 1;
  for (unsigned int i = 0, n = this->balance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->balance(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.LastStatementBalancesReport)
  return target;
}

size_t LastStatementBalancesReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.LastStatementBalancesReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WebAPI_1.Balance balance = 1;
  {
    unsigned int count = this->balance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balance(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastStatementBalancesReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.LastStatementBalancesReport)
  GOOGLE_DCHECK_NE(&from, this);
  const LastStatementBalancesReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LastStatementBalancesReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.LastStatementBalancesReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.LastStatementBalancesReport)
    MergeFrom(*source);
  }
}

void LastStatementBalancesReport::MergeFrom(const LastStatementBalancesReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.LastStatementBalancesReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  balance_.MergeFrom(from.balance_);
}

void LastStatementBalancesReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.LastStatementBalancesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastStatementBalancesReport::CopyFrom(const LastStatementBalancesReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.LastStatementBalancesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastStatementBalancesReport::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->balance())) return false;
  return true;
}

void LastStatementBalancesReport::Swap(LastStatementBalancesReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastStatementBalancesReport::InternalSwap(LastStatementBalancesReport* other) {
  balance_.UnsafeArenaSwap(&other->balance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LastStatementBalancesReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LastStatementBalancesReport

// repeated .WebAPI_1.Balance balance = 1;
int LastStatementBalancesReport::balance_size() const {
  return balance_.size();
}
void LastStatementBalancesReport::clear_balance() {
  balance_.Clear();
}
const ::WebAPI_1::Balance& LastStatementBalancesReport::balance(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.LastStatementBalancesReport.balance)
  return balance_.Get(index);
}
::WebAPI_1::Balance* LastStatementBalancesReport::mutable_balance(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.LastStatementBalancesReport.balance)
  return balance_.Mutable(index);
}
::WebAPI_1::Balance* LastStatementBalancesReport::add_balance() {
  // @@protoc_insertion_point(field_add:WebAPI_1.LastStatementBalancesReport.balance)
  return balance_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::Balance >*
LastStatementBalancesReport::mutable_balance() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.LastStatementBalancesReport.balance)
  return &balance_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::Balance >&
LastStatementBalancesReport::balance() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.LastStatementBalancesReport.balance)
  return balance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Balance::kIdFieldNumber;
const int Balance::kAccountIdFieldNumber;
const int Balance::kStatementDateFieldNumber;
const int Balance::kCurrencyFieldNumber;
const int Balance::kBalanceFieldNumber;
const int Balance::kTotalValueFieldNumber;
const int Balance::kOteFieldNumber;
const int Balance::kUplFieldNumber;
const int Balance::kMvoFieldNumber;
const int Balance::kCashExcessFieldNumber;
const int Balance::kCollateralFieldNumber;
const int Balance::kInitialMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Balance::Balance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Balance)
}
Balance::Balance(const Balance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&initial_margin_) -
    reinterpret_cast<char*>(&id_) + sizeof(initial_margin_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Balance)
}

void Balance::SharedCtor() {
  _cached_size_ = 0;
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&initial_margin_) -
    reinterpret_cast<char*>(&id_) + sizeof(initial_margin_));
}

Balance::~Balance() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Balance)
  SharedDtor();
}

void Balance::SharedDtor() {
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Balance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Balance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[28].descriptor;
}

const Balance& Balance::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Balance* Balance::New(::google::protobuf::Arena* arena) const {
  Balance* n = new Balance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Balance)
  if (has_currency()) {
    GOOGLE_DCHECK(!currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*currency_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&upl_) -
      reinterpret_cast<char*>(&id_) + sizeof(upl_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&mvo_, 0, reinterpret_cast<char*>(&initial_margin_) -
      reinterpret_cast<char*>(&mvo_) + sizeof(initial_margin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Balance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Balance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 account_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 statement_date = 3;
      case 3: {
        if (tag == 24u) {
          set_has_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string currency = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Balance.currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double balance = 5;
      case 5: {
        if (tag == 41u) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double total_value = 6;
      case 6: {
        if (tag == 49u) {
          set_has_total_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ote = 7;
      case 7: {
        if (tag == 57u) {
          set_has_ote();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double upl = 8;
      case 8: {
        if (tag == 65u) {
          set_has_upl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double mvo = 9;
      case 9: {
        if (tag == 73u) {
          set_has_mvo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mvo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cash_excess = 10;
      case 10: {
        if (tag == 81u) {
          set_has_cash_excess();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_excess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double collateral = 11;
      case 11: {
        if (tag == 89u) {
          set_has_collateral();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collateral_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double initial_margin = 12;
      case 12: {
        if (tag == 97u) {
          set_has_initial_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initial_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Balance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Balance)
  return false;
#undef DO_
}

void Balance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Balance)
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->account_id(), output);
  }

  // required sint64 statement_date = 3;
  if (has_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->statement_date(), output);
  }

  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Balance.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->currency(), output);
  }

  // required double balance = 5;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->balance(), output);
  }

  // required double total_value = 6;
  if (has_total_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->total_value(), output);
  }

  // required double ote = 7;
  if (has_ote()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ote(), output);
  }

  // required double upl = 8;
  if (has_upl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->upl(), output);
  }

  // required double mvo = 9;
  if (has_mvo()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->mvo(), output);
  }

  // required double cash_excess = 10;
  if (has_cash_excess()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->cash_excess(), output);
  }

  // required double collateral = 11;
  if (has_collateral()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->collateral(), output);
  }

  // required double initial_margin = 12;
  if (has_initial_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->initial_margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Balance)
}

::google::protobuf::uint8* Balance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Balance)
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->account_id(), target);
  }

  // required sint64 statement_date = 3;
  if (has_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->statement_date(), target);
  }

  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Balance.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency(), target);
  }

  // required double balance = 5;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->balance(), target);
  }

  // required double total_value = 6;
  if (has_total_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->total_value(), target);
  }

  // required double ote = 7;
  if (has_ote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ote(), target);
  }

  // required double upl = 8;
  if (has_upl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->upl(), target);
  }

  // required double mvo = 9;
  if (has_mvo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->mvo(), target);
  }

  // required double cash_excess = 10;
  if (has_cash_excess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->cash_excess(), target);
  }

  // required double collateral = 11;
  if (has_collateral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->collateral(), target);
  }

  // required double initial_margin = 12;
  if (has_initial_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->initial_margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Balance)
  return target;
}

size_t Balance::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.Balance)
  size_t total_size = 0;

  if (has_currency()) {
    // required string currency = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());
  }

  if (has_id()) {
    // required sint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  if (has_account_id()) {
    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  if (has_statement_date()) {
    // required sint64 statement_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());
  }

  if (has_balance()) {
    // required double balance = 5;
    total_size += 1 + 8;
  }

  if (has_total_value()) {
    // required double total_value = 6;
    total_size += 1 + 8;
  }

  if (has_ote()) {
    // required double ote = 7;
    total_size += 1 + 8;
  }

  if (has_upl()) {
    // required double upl = 8;
    total_size += 1 + 8;
  }

  if (has_mvo()) {
    // required double mvo = 9;
    total_size += 1 + 8;
  }

  if (has_cash_excess()) {
    // required double cash_excess = 10;
    total_size += 1 + 8;
  }

  if (has_collateral()) {
    // required double collateral = 11;
    total_size += 1 + 8;
  }

  if (has_initial_margin()) {
    // required double initial_margin = 12;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Balance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required string currency = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());

    // required sint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->id());

    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

    // required sint64 statement_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());

    // required double balance = 5;
    total_size += 1 + 8;

    // required double total_value = 6;
    total_size += 1 + 8;

    // required double ote = 7;
    total_size += 1 + 8;

    // required double upl = 8;
    total_size += 1 + 8;

    // required double mvo = 9;
    total_size += 1 + 8;

    // required double cash_excess = 10;
    total_size += 1 + 8;

    // required double collateral = 11;
    total_size += 1 + 8;

    // required double initial_margin = 12;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Balance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  const Balance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Balance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Balance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Balance)
    MergeFrom(*source);
  }
}

void Balance::MergeFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_currency()) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_statement_date()) {
      set_statement_date(from.statement_date());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_total_value()) {
      set_total_value(from.total_value());
    }
    if (from.has_ote()) {
      set_ote(from.ote());
    }
    if (from.has_upl()) {
      set_upl(from.upl());
    }
  }
  if (from._has_bits_[8 / 32] & 3840u) {
    if (from.has_mvo()) {
      set_mvo(from.mvo());
    }
    if (from.has_cash_excess()) {
      set_cash_excess(from.cash_excess());
    }
    if (from.has_collateral()) {
      set_collateral(from.collateral());
    }
    if (from.has_initial_margin()) {
      set_initial_margin(from.initial_margin());
    }
  }
}

void Balance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balance::CopyFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void Balance::Swap(Balance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Balance::InternalSwap(Balance* other) {
  currency_.Swap(&other->currency_);
  std::swap(id_, other->id_);
  std::swap(account_id_, other->account_id_);
  std::swap(statement_date_, other->statement_date_);
  std::swap(balance_, other->balance_);
  std::swap(total_value_, other->total_value_);
  std::swap(ote_, other->ote_);
  std::swap(upl_, other->upl_);
  std::swap(mvo_, other->mvo_);
  std::swap(cash_excess_, other->cash_excess_);
  std::swap(collateral_, other->collateral_);
  std::swap(initial_margin_, other->initial_margin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Balance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Balance

// required sint32 id = 1;
bool Balance::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Balance::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Balance::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Balance::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Balance::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.id)
  return id_;
}
void Balance::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.id)
}

// required sint32 account_id = 2;
bool Balance::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Balance::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Balance::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Balance::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 Balance::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.account_id)
  return account_id_;
}
void Balance::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.account_id)
}

// required sint64 statement_date = 3;
bool Balance::has_statement_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Balance::set_has_statement_date() {
  _has_bits_[0] |= 0x00000008u;
}
void Balance::clear_has_statement_date() {
  _has_bits_[0] &= ~0x00000008u;
}
void Balance::clear_statement_date() {
  statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_statement_date();
}
::google::protobuf::int64 Balance::statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.statement_date)
  return statement_date_;
}
void Balance::set_statement_date(::google::protobuf::int64 value) {
  set_has_statement_date();
  statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.statement_date)
}

// required string currency = 4;
bool Balance::has_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Balance::set_has_currency() {
  _has_bits_[0] |= 0x00000001u;
}
void Balance::clear_has_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
void Balance::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
const ::std::string& Balance::currency() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.currency)
  return currency_.GetNoArena();
}
void Balance::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.currency)
}
void Balance::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Balance.currency)
}
void Balance::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Balance.currency)
}
::std::string* Balance::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Balance.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Balance::release_currency() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Balance.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Balance::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Balance.currency)
}

// required double balance = 5;
bool Balance::has_balance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Balance::set_has_balance() {
  _has_bits_[0] |= 0x00000010u;
}
void Balance::clear_has_balance() {
  _has_bits_[0] &= ~0x00000010u;
}
void Balance::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
double Balance::balance() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.balance)
  return balance_;
}
void Balance::set_balance(double value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.balance)
}

// required double total_value = 6;
bool Balance::has_total_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Balance::set_has_total_value() {
  _has_bits_[0] |= 0x00000020u;
}
void Balance::clear_has_total_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void Balance::clear_total_value() {
  total_value_ = 0;
  clear_has_total_value();
}
double Balance::total_value() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.total_value)
  return total_value_;
}
void Balance::set_total_value(double value) {
  set_has_total_value();
  total_value_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.total_value)
}

// required double ote = 7;
bool Balance::has_ote() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Balance::set_has_ote() {
  _has_bits_[0] |= 0x00000040u;
}
void Balance::clear_has_ote() {
  _has_bits_[0] &= ~0x00000040u;
}
void Balance::clear_ote() {
  ote_ = 0;
  clear_has_ote();
}
double Balance::ote() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.ote)
  return ote_;
}
void Balance::set_ote(double value) {
  set_has_ote();
  ote_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.ote)
}

// required double upl = 8;
bool Balance::has_upl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Balance::set_has_upl() {
  _has_bits_[0] |= 0x00000080u;
}
void Balance::clear_has_upl() {
  _has_bits_[0] &= ~0x00000080u;
}
void Balance::clear_upl() {
  upl_ = 0;
  clear_has_upl();
}
double Balance::upl() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.upl)
  return upl_;
}
void Balance::set_upl(double value) {
  set_has_upl();
  upl_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.upl)
}

// required double mvo = 9;
bool Balance::has_mvo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Balance::set_has_mvo() {
  _has_bits_[0] |= 0x00000100u;
}
void Balance::clear_has_mvo() {
  _has_bits_[0] &= ~0x00000100u;
}
void Balance::clear_mvo() {
  mvo_ = 0;
  clear_has_mvo();
}
double Balance::mvo() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.mvo)
  return mvo_;
}
void Balance::set_mvo(double value) {
  set_has_mvo();
  mvo_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.mvo)
}

// required double cash_excess = 10;
bool Balance::has_cash_excess() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Balance::set_has_cash_excess() {
  _has_bits_[0] |= 0x00000200u;
}
void Balance::clear_has_cash_excess() {
  _has_bits_[0] &= ~0x00000200u;
}
void Balance::clear_cash_excess() {
  cash_excess_ = 0;
  clear_has_cash_excess();
}
double Balance::cash_excess() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.cash_excess)
  return cash_excess_;
}
void Balance::set_cash_excess(double value) {
  set_has_cash_excess();
  cash_excess_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.cash_excess)
}

// required double collateral = 11;
bool Balance::has_collateral() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Balance::set_has_collateral() {
  _has_bits_[0] |= 0x00000400u;
}
void Balance::clear_has_collateral() {
  _has_bits_[0] &= ~0x00000400u;
}
void Balance::clear_collateral() {
  collateral_ = 0;
  clear_has_collateral();
}
double Balance::collateral() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.collateral)
  return collateral_;
}
void Balance::set_collateral(double value) {
  set_has_collateral();
  collateral_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.collateral)
}

// required double initial_margin = 12;
bool Balance::has_initial_margin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Balance::set_has_initial_margin() {
  _has_bits_[0] |= 0x00000800u;
}
void Balance::clear_has_initial_margin() {
  _has_bits_[0] &= ~0x00000800u;
}
void Balance::clear_initial_margin() {
  initial_margin_ = 0;
  clear_has_initial_margin();
}
double Balance::initial_margin() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Balance.initial_margin)
  return initial_margin_;
}
void Balance::set_initial_margin(double value) {
  set_has_initial_margin();
  initial_margin_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Balance.initial_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyRatesRequest::CurrencyRatesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.CurrencyRatesRequest)
}
CurrencyRatesRequest::CurrencyRatesRequest(const CurrencyRatesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.CurrencyRatesRequest)
}

void CurrencyRatesRequest::SharedCtor() {
  _cached_size_ = 0;
}

CurrencyRatesRequest::~CurrencyRatesRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.CurrencyRatesRequest)
  SharedDtor();
}

void CurrencyRatesRequest::SharedDtor() {
}

void CurrencyRatesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyRatesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[29].descriptor;
}

const CurrencyRatesRequest& CurrencyRatesRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

CurrencyRatesRequest* CurrencyRatesRequest::New(::google::protobuf::Arena* arena) const {
  CurrencyRatesRequest* n = new CurrencyRatesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrencyRatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.CurrencyRatesRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrencyRatesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.CurrencyRatesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.CurrencyRatesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.CurrencyRatesRequest)
  return false;
#undef DO_
}

void CurrencyRatesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.CurrencyRatesRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.CurrencyRatesRequest)
}

::google::protobuf::uint8* CurrencyRatesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.CurrencyRatesRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.CurrencyRatesRequest)
  return target;
}

size_t CurrencyRatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.CurrencyRatesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyRatesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.CurrencyRatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyRatesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyRatesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.CurrencyRatesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.CurrencyRatesRequest)
    MergeFrom(*source);
  }
}

void CurrencyRatesRequest::MergeFrom(const CurrencyRatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.CurrencyRatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CurrencyRatesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.CurrencyRatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyRatesRequest::CopyFrom(const CurrencyRatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.CurrencyRatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyRatesRequest::IsInitialized() const {
  return true;
}

void CurrencyRatesRequest::Swap(CurrencyRatesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyRatesRequest::InternalSwap(CurrencyRatesRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrencyRatesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrencyRatesRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyRatesReport::kBrokerageCurrencyRatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyRatesReport::CurrencyRatesReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.CurrencyRatesReport)
}
CurrencyRatesReport::CurrencyRatesReport(const CurrencyRatesReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      brokerage_currency_rates_(from.brokerage_currency_rates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.CurrencyRatesReport)
}

void CurrencyRatesReport::SharedCtor() {
  _cached_size_ = 0;
}

CurrencyRatesReport::~CurrencyRatesReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.CurrencyRatesReport)
  SharedDtor();
}

void CurrencyRatesReport::SharedDtor() {
}

void CurrencyRatesReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyRatesReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[30].descriptor;
}

const CurrencyRatesReport& CurrencyRatesReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

CurrencyRatesReport* CurrencyRatesReport::New(::google::protobuf::Arena* arena) const {
  CurrencyRatesReport* n = new CurrencyRatesReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrencyRatesReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.CurrencyRatesReport)
  brokerage_currency_rates_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrencyRatesReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.CurrencyRatesReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WebAPI_1.BrokerageCurrencyRates brokerage_currency_rates = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_brokerage_currency_rates()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.CurrencyRatesReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.CurrencyRatesReport)
  return false;
#undef DO_
}

void CurrencyRatesReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.CurrencyRatesReport)
  // repeated .WebAPI_1.BrokerageCurrencyRates brokerage_currency_rates = 1;
  for (unsigned int i = 0, n = this->brokerage_currency_rates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brokerage_currency_rates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.CurrencyRatesReport)
}

::google::protobuf::uint8* CurrencyRatesReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.CurrencyRatesReport)
  // repeated .WebAPI_1.BrokerageCurrencyRates brokerage_currency_rates = 1;
  for (unsigned int i = 0, n = this->brokerage_currency_rates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->brokerage_currency_rates(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.CurrencyRatesReport)
  return target;
}

size_t CurrencyRatesReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.CurrencyRatesReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WebAPI_1.BrokerageCurrencyRates brokerage_currency_rates = 1;
  {
    unsigned int count = this->brokerage_currency_rates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brokerage_currency_rates(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyRatesReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.CurrencyRatesReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyRatesReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyRatesReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.CurrencyRatesReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.CurrencyRatesReport)
    MergeFrom(*source);
  }
}

void CurrencyRatesReport::MergeFrom(const CurrencyRatesReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.CurrencyRatesReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokerage_currency_rates_.MergeFrom(from.brokerage_currency_rates_);
}

void CurrencyRatesReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.CurrencyRatesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyRatesReport::CopyFrom(const CurrencyRatesReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.CurrencyRatesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyRatesReport::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->brokerage_currency_rates())) return false;
  return true;
}

void CurrencyRatesReport::Swap(CurrencyRatesReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyRatesReport::InternalSwap(CurrencyRatesReport* other) {
  brokerage_currency_rates_.UnsafeArenaSwap(&other->brokerage_currency_rates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrencyRatesReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrencyRatesReport

// repeated .WebAPI_1.BrokerageCurrencyRates brokerage_currency_rates = 1;
int CurrencyRatesReport::brokerage_currency_rates_size() const {
  return brokerage_currency_rates_.size();
}
void CurrencyRatesReport::clear_brokerage_currency_rates() {
  brokerage_currency_rates_.Clear();
}
const ::WebAPI_1::BrokerageCurrencyRates& CurrencyRatesReport::brokerage_currency_rates(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CurrencyRatesReport.brokerage_currency_rates)
  return brokerage_currency_rates_.Get(index);
}
::WebAPI_1::BrokerageCurrencyRates* CurrencyRatesReport::mutable_brokerage_currency_rates(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.CurrencyRatesReport.brokerage_currency_rates)
  return brokerage_currency_rates_.Mutable(index);
}
::WebAPI_1::BrokerageCurrencyRates* CurrencyRatesReport::add_brokerage_currency_rates() {
  // @@protoc_insertion_point(field_add:WebAPI_1.CurrencyRatesReport.brokerage_currency_rates)
  return brokerage_currency_rates_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::BrokerageCurrencyRates >*
CurrencyRatesReport::mutable_brokerage_currency_rates() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.CurrencyRatesReport.brokerage_currency_rates)
  return &brokerage_currency_rates_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::BrokerageCurrencyRates >&
CurrencyRatesReport::brokerage_currency_rates() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.CurrencyRatesReport.brokerage_currency_rates)
  return brokerage_currency_rates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerageCurrencyRates::kBrokerageIdFieldNumber;
const int BrokerageCurrencyRates::kMasterCurrencyFieldNumber;
const int BrokerageCurrencyRates::kStatementDateFieldNumber;
const int BrokerageCurrencyRates::kCurrencyRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerageCurrencyRates::BrokerageCurrencyRates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.BrokerageCurrencyRates)
}
BrokerageCurrencyRates::BrokerageCurrencyRates(const BrokerageCurrencyRates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      currency_rate_(from.currency_rate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  master_currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_master_currency()) {
    master_currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_currency_);
  }
  ::memcpy(&statement_date_, &from.statement_date_,
    reinterpret_cast<char*>(&brokerage_id_) -
    reinterpret_cast<char*>(&statement_date_) + sizeof(brokerage_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.BrokerageCurrencyRates)
}

void BrokerageCurrencyRates::SharedCtor() {
  _cached_size_ = 0;
  master_currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&statement_date_, 0, reinterpret_cast<char*>(&brokerage_id_) -
    reinterpret_cast<char*>(&statement_date_) + sizeof(brokerage_id_));
}

BrokerageCurrencyRates::~BrokerageCurrencyRates() {
  // @@protoc_insertion_point(destructor:WebAPI_1.BrokerageCurrencyRates)
  SharedDtor();
}

void BrokerageCurrencyRates::SharedDtor() {
  master_currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BrokerageCurrencyRates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerageCurrencyRates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[31].descriptor;
}

const BrokerageCurrencyRates& BrokerageCurrencyRates::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

BrokerageCurrencyRates* BrokerageCurrencyRates::New(::google::protobuf::Arena* arena) const {
  BrokerageCurrencyRates* n = new BrokerageCurrencyRates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrokerageCurrencyRates::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.BrokerageCurrencyRates)
  currency_rate_.Clear();
  if (has_master_currency()) {
    GOOGLE_DCHECK(!master_currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*master_currency_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&statement_date_, 0, reinterpret_cast<char*>(&brokerage_id_) -
      reinterpret_cast<char*>(&statement_date_) + sizeof(brokerage_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrokerageCurrencyRates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.BrokerageCurrencyRates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 brokerage_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_brokerage_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brokerage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string master_currency = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_currency().data(), this->master_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.BrokerageCurrencyRates.master_currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 statement_date = 3;
      case 3: {
        if (tag == 24u) {
          set_has_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.CurrencyRate currency_rate = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_currency_rate()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.BrokerageCurrencyRates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.BrokerageCurrencyRates)
  return false;
#undef DO_
}

void BrokerageCurrencyRates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.BrokerageCurrencyRates)
  // required uint32 brokerage_id = 1;
  if (has_brokerage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->brokerage_id(), output);
  }

  // required string master_currency = 2;
  if (has_master_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_currency().data(), this->master_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.BrokerageCurrencyRates.master_currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->master_currency(), output);
  }

  // required sint64 statement_date = 3;
  if (has_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->statement_date(), output);
  }

  // repeated .WebAPI_1.CurrencyRate currency_rate = 4;
  for (unsigned int i = 0, n = this->currency_rate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->currency_rate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.BrokerageCurrencyRates)
}

::google::protobuf::uint8* BrokerageCurrencyRates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.BrokerageCurrencyRates)
  // required uint32 brokerage_id = 1;
  if (has_brokerage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->brokerage_id(), target);
  }

  // required string master_currency = 2;
  if (has_master_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_currency().data(), this->master_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.BrokerageCurrencyRates.master_currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->master_currency(), target);
  }

  // required sint64 statement_date = 3;
  if (has_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->statement_date(), target);
  }

  // repeated .WebAPI_1.CurrencyRate currency_rate = 4;
  for (unsigned int i = 0, n = this->currency_rate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->currency_rate(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.BrokerageCurrencyRates)
  return target;
}

size_t BrokerageCurrencyRates::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.BrokerageCurrencyRates)
  size_t total_size = 0;

  if (has_master_currency()) {
    // required string master_currency = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->master_currency());
  }

  if (has_statement_date()) {
    // required sint64 statement_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());
  }

  if (has_brokerage_id()) {
    // required uint32 brokerage_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brokerage_id());
  }

  return total_size;
}
size_t BrokerageCurrencyRates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.BrokerageCurrencyRates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string master_currency = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->master_currency());

    // required sint64 statement_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());

    // required uint32 brokerage_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brokerage_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.CurrencyRate currency_rate = 4;
  {
    unsigned int count = this->currency_rate_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currency_rate(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerageCurrencyRates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.BrokerageCurrencyRates)
  GOOGLE_DCHECK_NE(&from, this);
  const BrokerageCurrencyRates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerageCurrencyRates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.BrokerageCurrencyRates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.BrokerageCurrencyRates)
    MergeFrom(*source);
  }
}

void BrokerageCurrencyRates::MergeFrom(const BrokerageCurrencyRates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.BrokerageCurrencyRates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_rate_.MergeFrom(from.currency_rate_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_master_currency()) {
      set_has_master_currency();
      master_currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_currency_);
    }
    if (from.has_statement_date()) {
      set_statement_date(from.statement_date());
    }
    if (from.has_brokerage_id()) {
      set_brokerage_id(from.brokerage_id());
    }
  }
}

void BrokerageCurrencyRates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.BrokerageCurrencyRates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerageCurrencyRates::CopyFrom(const BrokerageCurrencyRates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.BrokerageCurrencyRates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerageCurrencyRates::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->currency_rate())) return false;
  return true;
}

void BrokerageCurrencyRates::Swap(BrokerageCurrencyRates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerageCurrencyRates::InternalSwap(BrokerageCurrencyRates* other) {
  currency_rate_.UnsafeArenaSwap(&other->currency_rate_);
  master_currency_.Swap(&other->master_currency_);
  std::swap(statement_date_, other->statement_date_);
  std::swap(brokerage_id_, other->brokerage_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrokerageCurrencyRates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrokerageCurrencyRates

// required uint32 brokerage_id = 1;
bool BrokerageCurrencyRates::has_brokerage_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrokerageCurrencyRates::set_has_brokerage_id() {
  _has_bits_[0] |= 0x00000004u;
}
void BrokerageCurrencyRates::clear_has_brokerage_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrokerageCurrencyRates::clear_brokerage_id() {
  brokerage_id_ = 0u;
  clear_has_brokerage_id();
}
::google::protobuf::uint32 BrokerageCurrencyRates::brokerage_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.BrokerageCurrencyRates.brokerage_id)
  return brokerage_id_;
}
void BrokerageCurrencyRates::set_brokerage_id(::google::protobuf::uint32 value) {
  set_has_brokerage_id();
  brokerage_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.BrokerageCurrencyRates.brokerage_id)
}

// required string master_currency = 2;
bool BrokerageCurrencyRates::has_master_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrokerageCurrencyRates::set_has_master_currency() {
  _has_bits_[0] |= 0x00000001u;
}
void BrokerageCurrencyRates::clear_has_master_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrokerageCurrencyRates::clear_master_currency() {
  master_currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_master_currency();
}
const ::std::string& BrokerageCurrencyRates::master_currency() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.BrokerageCurrencyRates.master_currency)
  return master_currency_.GetNoArena();
}
void BrokerageCurrencyRates::set_master_currency(const ::std::string& value) {
  set_has_master_currency();
  master_currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.BrokerageCurrencyRates.master_currency)
}
void BrokerageCurrencyRates::set_master_currency(const char* value) {
  set_has_master_currency();
  master_currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.BrokerageCurrencyRates.master_currency)
}
void BrokerageCurrencyRates::set_master_currency(const char* value, size_t size) {
  set_has_master_currency();
  master_currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.BrokerageCurrencyRates.master_currency)
}
::std::string* BrokerageCurrencyRates::mutable_master_currency() {
  set_has_master_currency();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.BrokerageCurrencyRates.master_currency)
  return master_currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BrokerageCurrencyRates::release_master_currency() {
  // @@protoc_insertion_point(field_release:WebAPI_1.BrokerageCurrencyRates.master_currency)
  clear_has_master_currency();
  return master_currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BrokerageCurrencyRates::set_allocated_master_currency(::std::string* master_currency) {
  if (master_currency != NULL) {
    set_has_master_currency();
  } else {
    clear_has_master_currency();
  }
  master_currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_currency);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.BrokerageCurrencyRates.master_currency)
}

// required sint64 statement_date = 3;
bool BrokerageCurrencyRates::has_statement_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrokerageCurrencyRates::set_has_statement_date() {
  _has_bits_[0] |= 0x00000002u;
}
void BrokerageCurrencyRates::clear_has_statement_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrokerageCurrencyRates::clear_statement_date() {
  statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_statement_date();
}
::google::protobuf::int64 BrokerageCurrencyRates::statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.BrokerageCurrencyRates.statement_date)
  return statement_date_;
}
void BrokerageCurrencyRates::set_statement_date(::google::protobuf::int64 value) {
  set_has_statement_date();
  statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.BrokerageCurrencyRates.statement_date)
}

// repeated .WebAPI_1.CurrencyRate currency_rate = 4;
int BrokerageCurrencyRates::currency_rate_size() const {
  return currency_rate_.size();
}
void BrokerageCurrencyRates::clear_currency_rate() {
  currency_rate_.Clear();
}
const ::WebAPI_1::CurrencyRate& BrokerageCurrencyRates::currency_rate(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.BrokerageCurrencyRates.currency_rate)
  return currency_rate_.Get(index);
}
::WebAPI_1::CurrencyRate* BrokerageCurrencyRates::mutable_currency_rate(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.BrokerageCurrencyRates.currency_rate)
  return currency_rate_.Mutable(index);
}
::WebAPI_1::CurrencyRate* BrokerageCurrencyRates::add_currency_rate() {
  // @@protoc_insertion_point(field_add:WebAPI_1.BrokerageCurrencyRates.currency_rate)
  return currency_rate_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::CurrencyRate >*
BrokerageCurrencyRates::mutable_currency_rate() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.BrokerageCurrencyRates.currency_rate)
  return &currency_rate_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::CurrencyRate >&
BrokerageCurrencyRates::currency_rate() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.BrokerageCurrencyRates.currency_rate)
  return currency_rate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyRate::kCurrencyFieldNumber;
const int CurrencyRate::kRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyRate::CurrencyRate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.CurrencyRate)
}
CurrencyRate::CurrencyRate(const CurrencyRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  rate_ = from.rate_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.CurrencyRate)
}

void CurrencyRate::SharedCtor() {
  _cached_size_ = 0;
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rate_ = 0;
}

CurrencyRate::~CurrencyRate() {
  // @@protoc_insertion_point(destructor:WebAPI_1.CurrencyRate)
  SharedDtor();
}

void CurrencyRate::SharedDtor() {
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrencyRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[32].descriptor;
}

const CurrencyRate& CurrencyRate::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

CurrencyRate* CurrencyRate::New(::google::protobuf::Arena* arena) const {
  CurrencyRate* n = new CurrencyRate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrencyRate::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.CurrencyRate)
  if (has_currency()) {
    GOOGLE_DCHECK(!currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*currency_.UnsafeRawStringPointer())->clear();
  }
  rate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrencyRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.CurrencyRate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string currency = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.CurrencyRate.currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double rate = 3;
      case 3: {
        if (tag == 25u) {
          set_has_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.CurrencyRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.CurrencyRate)
  return false;
#undef DO_
}

void CurrencyRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.CurrencyRate)
  // required string currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CurrencyRate.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->currency(), output);
  }

  // required double rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.CurrencyRate)
}

::google::protobuf::uint8* CurrencyRate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.CurrencyRate)
  // required string currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CurrencyRate.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->currency(), target);
  }

  // required double rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.CurrencyRate)
  return target;
}

size_t CurrencyRate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.CurrencyRate)
  size_t total_size = 0;

  if (has_currency()) {
    // required string currency = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());
  }

  if (has_rate()) {
    // required double rate = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CurrencyRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.CurrencyRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string currency = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());

    // required double rate = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.CurrencyRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyRate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyRate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.CurrencyRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.CurrencyRate)
    MergeFrom(*source);
  }
}

void CurrencyRate::MergeFrom(const CurrencyRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.CurrencyRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_currency()) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
}

void CurrencyRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.CurrencyRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyRate::CopyFrom(const CurrencyRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.CurrencyRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyRate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CurrencyRate::Swap(CurrencyRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyRate::InternalSwap(CurrencyRate* other) {
  currency_.Swap(&other->currency_);
  std::swap(rate_, other->rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrencyRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrencyRate

// required string currency = 2;
bool CurrencyRate::has_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurrencyRate::set_has_currency() {
  _has_bits_[0] |= 0x00000001u;
}
void CurrencyRate::clear_has_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurrencyRate::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
const ::std::string& CurrencyRate::currency() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CurrencyRate.currency)
  return currency_.GetNoArena();
}
void CurrencyRate::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.CurrencyRate.currency)
}
void CurrencyRate::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.CurrencyRate.currency)
}
void CurrencyRate::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.CurrencyRate.currency)
}
::std::string* CurrencyRate::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.CurrencyRate.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CurrencyRate::release_currency() {
  // @@protoc_insertion_point(field_release:WebAPI_1.CurrencyRate.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CurrencyRate::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.CurrencyRate.currency)
}

// required double rate = 3;
bool CurrencyRate::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurrencyRate::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void CurrencyRate::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurrencyRate::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
double CurrencyRate::rate() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CurrencyRate.rate)
  return rate_;
}
void CurrencyRate::set_rate(double value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.CurrencyRate.rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionInformationRequest::kSessionGroupIdFieldNumber;
const int SessionInformationRequest::kFromUtcTimeFieldNumber;
const int SessionInformationRequest::kToUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionInformationRequest::SessionInformationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SessionInformationRequest)
}
SessionInformationRequest::SessionInformationRequest(const SessionInformationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_utc_time_, &from.from_utc_time_,
    reinterpret_cast<char*>(&session_group_id_) -
    reinterpret_cast<char*>(&from_utc_time_) + sizeof(session_group_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SessionInformationRequest)
}

void SessionInformationRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&from_utc_time_, 0, reinterpret_cast<char*>(&session_group_id_) -
    reinterpret_cast<char*>(&from_utc_time_) + sizeof(session_group_id_));
}

SessionInformationRequest::~SessionInformationRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SessionInformationRequest)
  SharedDtor();
}

void SessionInformationRequest::SharedDtor() {
}

void SessionInformationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInformationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[33].descriptor;
}

const SessionInformationRequest& SessionInformationRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SessionInformationRequest* SessionInformationRequest::New(::google::protobuf::Arena* arena) const {
  SessionInformationRequest* n = new SessionInformationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionInformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SessionInformationRequest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&from_utc_time_, 0, reinterpret_cast<char*>(&session_group_id_) -
      reinterpret_cast<char*>(&from_utc_time_) + sizeof(session_group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionInformationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SessionInformationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 session_group_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_session_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &session_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 from_utc_time = 2;
      case 2: {
        if (tag == 16u) {
          set_has_from_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &from_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 to_utc_time = 3;
      case 3: {
        if (tag == 24u) {
          set_has_to_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &to_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SessionInformationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SessionInformationRequest)
  return false;
#undef DO_
}

void SessionInformationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SessionInformationRequest)
  // required sint32 session_group_id = 1;
  if (has_session_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->session_group_id(), output);
  }

  // optional sint64 from_utc_time = 2;
  if (has_from_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->from_utc_time(), output);
  }

  // optional sint64 to_utc_time = 3;
  if (has_to_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->to_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SessionInformationRequest)
}

::google::protobuf::uint8* SessionInformationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SessionInformationRequest)
  // required sint32 session_group_id = 1;
  if (has_session_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->session_group_id(), target);
  }

  // optional sint64 from_utc_time = 2;
  if (has_from_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->from_utc_time(), target);
  }

  // optional sint64 to_utc_time = 3;
  if (has_to_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->to_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SessionInformationRequest)
  return target;
}

size_t SessionInformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SessionInformationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required sint32 session_group_id = 1;
  if (has_session_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->session_group_id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint64 from_utc_time = 2;
    if (has_from_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->from_utc_time());
    }

    // optional sint64 to_utc_time = 3;
    if (has_to_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->to_utc_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInformationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SessionInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionInformationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionInformationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SessionInformationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SessionInformationRequest)
    MergeFrom(*source);
  }
}

void SessionInformationRequest::MergeFrom(const SessionInformationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SessionInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_from_utc_time()) {
      set_from_utc_time(from.from_utc_time());
    }
    if (from.has_to_utc_time()) {
      set_to_utc_time(from.to_utc_time());
    }
    if (from.has_session_group_id()) {
      set_session_group_id(from.session_group_id());
    }
  }
}

void SessionInformationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SessionInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInformationRequest::CopyFrom(const SessionInformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SessionInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInformationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void SessionInformationRequest::Swap(SessionInformationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionInformationRequest::InternalSwap(SessionInformationRequest* other) {
  std::swap(from_utc_time_, other->from_utc_time_);
  std::swap(to_utc_time_, other->to_utc_time_);
  std::swap(session_group_id_, other->session_group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionInformationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionInformationRequest

// required sint32 session_group_id = 1;
bool SessionInformationRequest::has_session_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionInformationRequest::set_has_session_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionInformationRequest::clear_has_session_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionInformationRequest::clear_session_group_id() {
  session_group_id_ = 0;
  clear_has_session_group_id();
}
::google::protobuf::int32 SessionInformationRequest::session_group_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInformationRequest.session_group_id)
  return session_group_id_;
}
void SessionInformationRequest::set_session_group_id(::google::protobuf::int32 value) {
  set_has_session_group_id();
  session_group_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInformationRequest.session_group_id)
}

// optional sint64 from_utc_time = 2;
bool SessionInformationRequest::has_from_utc_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionInformationRequest::set_has_from_utc_time() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionInformationRequest::clear_has_from_utc_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionInformationRequest::clear_from_utc_time() {
  from_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_from_utc_time();
}
::google::protobuf::int64 SessionInformationRequest::from_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInformationRequest.from_utc_time)
  return from_utc_time_;
}
void SessionInformationRequest::set_from_utc_time(::google::protobuf::int64 value) {
  set_has_from_utc_time();
  from_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInformationRequest.from_utc_time)
}

// optional sint64 to_utc_time = 3;
bool SessionInformationRequest::has_to_utc_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionInformationRequest::set_has_to_utc_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionInformationRequest::clear_has_to_utc_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionInformationRequest::clear_to_utc_time() {
  to_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_to_utc_time();
}
::google::protobuf::int64 SessionInformationRequest::to_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInformationRequest.to_utc_time)
  return to_utc_time_;
}
void SessionInformationRequest::set_to_utc_time(::google::protobuf::int64 value) {
  set_has_to_utc_time();
  to_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInformationRequest.to_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionInformationReport::kSessionGroupIdFieldNumber;
const int SessionInformationReport::kSessionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionInformationReport::SessionInformationReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SessionInformationReport)
}
SessionInformationReport::SessionInformationReport(const SessionInformationReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      session_info_(from.session_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_group_id_ = from.session_group_id_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SessionInformationReport)
}

void SessionInformationReport::SharedCtor() {
  _cached_size_ = 0;
  session_group_id_ = 0;
}

SessionInformationReport::~SessionInformationReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SessionInformationReport)
  SharedDtor();
}

void SessionInformationReport::SharedDtor() {
}

void SessionInformationReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInformationReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[34].descriptor;
}

const SessionInformationReport& SessionInformationReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SessionInformationReport* SessionInformationReport::New(::google::protobuf::Arena* arena) const {
  SessionInformationReport* n = new SessionInformationReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionInformationReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SessionInformationReport)
  session_info_.Clear();
  session_group_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionInformationReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SessionInformationReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 session_group_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_session_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &session_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.SessionInfo session_info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_session_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SessionInformationReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SessionInformationReport)
  return false;
#undef DO_
}

void SessionInformationReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SessionInformationReport)
  // required sint32 session_group_id = 1;
  if (has_session_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->session_group_id(), output);
  }

  // repeated .WebAPI_1.SessionInfo session_info = 2;
  for (unsigned int i = 0, n = this->session_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SessionInformationReport)
}

::google::protobuf::uint8* SessionInformationReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SessionInformationReport)
  // required sint32 session_group_id = 1;
  if (has_session_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->session_group_id(), target);
  }

  // repeated .WebAPI_1.SessionInfo session_info = 2;
  for (unsigned int i = 0, n = this->session_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->session_info(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SessionInformationReport)
  return target;
}

size_t SessionInformationReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SessionInformationReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required sint32 session_group_id = 1;
  if (has_session_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->session_group_id());
  }
  // repeated .WebAPI_1.SessionInfo session_info = 2;
  {
    unsigned int count = this->session_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInformationReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SessionInformationReport)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionInformationReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionInformationReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SessionInformationReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SessionInformationReport)
    MergeFrom(*source);
  }
}

void SessionInformationReport::MergeFrom(const SessionInformationReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SessionInformationReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_info_.MergeFrom(from.session_info_);
  if (from.has_session_group_id()) {
    set_session_group_id(from.session_group_id());
  }
}

void SessionInformationReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SessionInformationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInformationReport::CopyFrom(const SessionInformationReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SessionInformationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInformationReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->session_info())) return false;
  return true;
}

void SessionInformationReport::Swap(SessionInformationReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionInformationReport::InternalSwap(SessionInformationReport* other) {
  session_info_.UnsafeArenaSwap(&other->session_info_);
  std::swap(session_group_id_, other->session_group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionInformationReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionInformationReport

// required sint32 session_group_id = 1;
bool SessionInformationReport::has_session_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionInformationReport::set_has_session_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionInformationReport::clear_has_session_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionInformationReport::clear_session_group_id() {
  session_group_id_ = 0;
  clear_has_session_group_id();
}
::google::protobuf::int32 SessionInformationReport::session_group_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInformationReport.session_group_id)
  return session_group_id_;
}
void SessionInformationReport::set_session_group_id(::google::protobuf::int32 value) {
  set_has_session_group_id();
  session_group_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInformationReport.session_group_id)
}

// repeated .WebAPI_1.SessionInfo session_info = 2;
int SessionInformationReport::session_info_size() const {
  return session_info_.size();
}
void SessionInformationReport::clear_session_info() {
  session_info_.Clear();
}
const ::WebAPI_1::SessionInfo& SessionInformationReport::session_info(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInformationReport.session_info)
  return session_info_.Get(index);
}
::WebAPI_1::SessionInfo* SessionInformationReport::mutable_session_info(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SessionInformationReport.session_info)
  return session_info_.Mutable(index);
}
::WebAPI_1::SessionInfo* SessionInformationReport::add_session_info() {
  // @@protoc_insertion_point(field_add:WebAPI_1.SessionInformationReport.session_info)
  return session_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::SessionInfo >*
SessionInformationReport::mutable_session_info() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.SessionInformationReport.session_info)
  return &session_info_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::SessionInfo >&
SessionInformationReport::session_info() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.SessionInformationReport.session_info)
  return session_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionInfo::kSessionIdFieldNumber;
const int SessionInfo::kFromUtcTimeFieldNumber;
const int SessionInfo::kToUtcTimeFieldNumber;
const int SessionInfo::kNameFieldNumber;
const int SessionInfo::kSessionDayFieldNumber;
const int SessionInfo::kSessionHolidayFieldNumber;
const int SessionInfo::kIsPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionInfo::SessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SessionInfo)
}
SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      session_day_(from.session_day_),
      session_holiday_(from.session_holiday_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&from_utc_time_, &from.from_utc_time_,
    reinterpret_cast<char*>(&is_primary_) -
    reinterpret_cast<char*>(&from_utc_time_) + sizeof(is_primary_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SessionInfo)
}

void SessionInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_utc_time_, 0, reinterpret_cast<char*>(&is_primary_) -
    reinterpret_cast<char*>(&from_utc_time_) + sizeof(is_primary_));
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[35].descriptor;
}

const SessionInfo& SessionInfo::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SessionInfo* SessionInfo::New(::google::protobuf::Arena* arena) const {
  SessionInfo* n = new SessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SessionInfo)
  session_day_.Clear();
  session_holiday_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&from_utc_time_, 0, reinterpret_cast<char*>(&is_primary_) -
      reinterpret_cast<char*>(&from_utc_time_) + sizeof(is_primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 from_utc_time = 2;
      case 2: {
        if (tag == 16u) {
          set_has_from_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &from_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 to_utc_time = 3;
      case 3: {
        if (tag == 24u) {
          set_has_to_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &to_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.SessionInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.SessionDay session_day = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_session_day()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.SessionHoliday session_holiday = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_session_holiday()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional bool is_primary = 7;
      case 7: {
        if (tag == 56u) {
          set_has_is_primary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SessionInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // optional sint64 from_utc_time = 2;
  if (has_from_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->from_utc_time(), output);
  }

  // optional sint64 to_utc_time = 3;
  if (has_to_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->to_utc_time(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SessionInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated .WebAPI_1.SessionDay session_day = 5;
  for (unsigned int i = 0, n = this->session_day_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->session_day(i), output);
  }

  // repeated .WebAPI_1.SessionHoliday session_holiday = 6;
  for (unsigned int i = 0, n = this->session_holiday_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->session_holiday(i), output);
  }

  // optional bool is_primary = 7;
  if (has_is_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SessionInfo)
}

::google::protobuf::uint8* SessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SessionInfo)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // optional sint64 from_utc_time = 2;
  if (has_from_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->from_utc_time(), target);
  }

  // optional sint64 to_utc_time = 3;
  if (has_to_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->to_utc_time(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SessionInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated .WebAPI_1.SessionDay session_day = 5;
  for (unsigned int i = 0, n = this->session_day_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->session_day(i), false, target);
  }

  // repeated .WebAPI_1.SessionHoliday session_holiday = 6;
  for (unsigned int i = 0, n = this->session_holiday_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->session_holiday(i), false, target);
  }

  // optional bool is_primary = 7;
  if (has_is_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SessionInfo)
  return target;
}

size_t SessionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.SessionInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_session_id()) {
    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  return total_size;
}
size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SessionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 session_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.SessionDay session_day = 5;
  {
    unsigned int count = this->session_day_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_day(i));
    }
  }

  // repeated .WebAPI_1.SessionHoliday session_holiday = 6;
  {
    unsigned int count = this->session_holiday_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_holiday(i));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional sint64 from_utc_time = 2;
    if (has_from_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->from_utc_time());
    }

    // optional sint64 to_utc_time = 3;
    if (has_to_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->to_utc_time());
    }

  }
  // optional bool is_primary = 7;
  if (has_is_primary()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SessionInfo)
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_day_.MergeFrom(from.session_day_);
  session_holiday_.MergeFrom(from.session_holiday_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_from_utc_time()) {
      set_from_utc_time(from.from_utc_time());
    }
    if (from.has_to_utc_time()) {
      set_to_utc_time(from.to_utc_time());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_is_primary()) {
      set_is_primary(from.is_primary());
    }
  }
}

void SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->session_holiday())) return false;
  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionInfo::InternalSwap(SessionInfo* other) {
  session_day_.UnsafeArenaSwap(&other->session_day_);
  session_holiday_.UnsafeArenaSwap(&other->session_holiday_);
  name_.Swap(&other->name_);
  std::swap(from_utc_time_, other->from_utc_time_);
  std::swap(to_utc_time_, other->to_utc_time_);
  std::swap(session_id_, other->session_id_);
  std::swap(is_primary_, other->is_primary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionInfo

// required uint32 session_id = 1;
bool SessionInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionInfo::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
::google::protobuf::uint32 SessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInfo.session_id)
  return session_id_;
}
void SessionInfo::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInfo.session_id)
}

// optional sint64 from_utc_time = 2;
bool SessionInfo::has_from_utc_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionInfo::set_has_from_utc_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionInfo::clear_has_from_utc_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionInfo::clear_from_utc_time() {
  from_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_from_utc_time();
}
::google::protobuf::int64 SessionInfo::from_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInfo.from_utc_time)
  return from_utc_time_;
}
void SessionInfo::set_from_utc_time(::google::protobuf::int64 value) {
  set_has_from_utc_time();
  from_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInfo.from_utc_time)
}

// optional sint64 to_utc_time = 3;
bool SessionInfo::has_to_utc_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionInfo::set_has_to_utc_time() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionInfo::clear_has_to_utc_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionInfo::clear_to_utc_time() {
  to_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_to_utc_time();
}
::google::protobuf::int64 SessionInfo::to_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInfo.to_utc_time)
  return to_utc_time_;
}
void SessionInfo::set_to_utc_time(::google::protobuf::int64 value) {
  set_has_to_utc_time();
  to_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInfo.to_utc_time)
}

// required string name = 4;
bool SessionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SessionInfo::name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInfo.name)
  return name_.GetNoArena();
}
void SessionInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInfo.name)
}
void SessionInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.SessionInfo.name)
}
void SessionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.SessionInfo.name)
}
::std::string* SessionInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SessionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionInfo::release_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.SessionInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.SessionInfo.name)
}

// repeated .WebAPI_1.SessionDay session_day = 5;
int SessionInfo::session_day_size() const {
  return session_day_.size();
}
void SessionInfo::clear_session_day() {
  session_day_.Clear();
}
const ::WebAPI_1::SessionDay& SessionInfo::session_day(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInfo.session_day)
  return session_day_.Get(index);
}
::WebAPI_1::SessionDay* SessionInfo::mutable_session_day(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SessionInfo.session_day)
  return session_day_.Mutable(index);
}
::WebAPI_1::SessionDay* SessionInfo::add_session_day() {
  // @@protoc_insertion_point(field_add:WebAPI_1.SessionInfo.session_day)
  return session_day_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::SessionDay >*
SessionInfo::mutable_session_day() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.SessionInfo.session_day)
  return &session_day_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::SessionDay >&
SessionInfo::session_day() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.SessionInfo.session_day)
  return session_day_;
}

// repeated .WebAPI_1.SessionHoliday session_holiday = 6;
int SessionInfo::session_holiday_size() const {
  return session_holiday_.size();
}
void SessionInfo::clear_session_holiday() {
  session_holiday_.Clear();
}
const ::WebAPI_1::SessionHoliday& SessionInfo::session_holiday(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInfo.session_holiday)
  return session_holiday_.Get(index);
}
::WebAPI_1::SessionHoliday* SessionInfo::mutable_session_holiday(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SessionInfo.session_holiday)
  return session_holiday_.Mutable(index);
}
::WebAPI_1::SessionHoliday* SessionInfo::add_session_holiday() {
  // @@protoc_insertion_point(field_add:WebAPI_1.SessionInfo.session_holiday)
  return session_holiday_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::SessionHoliday >*
SessionInfo::mutable_session_holiday() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.SessionInfo.session_holiday)
  return &session_holiday_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::SessionHoliday >&
SessionInfo::session_holiday() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.SessionInfo.session_holiday)
  return session_holiday_;
}

// optional bool is_primary = 7;
bool SessionInfo::has_is_primary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SessionInfo::set_has_is_primary() {
  _has_bits_[0] |= 0x00000010u;
}
void SessionInfo::clear_has_is_primary() {
  _has_bits_[0] &= ~0x00000010u;
}
void SessionInfo::clear_is_primary() {
  is_primary_ = false;
  clear_has_is_primary();
}
bool SessionInfo::is_primary() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionInfo.is_primary)
  return is_primary_;
}
void SessionInfo::set_is_primary(bool value) {
  set_has_is_primary();
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionInfo.is_primary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionDay::kDayOfWeekFieldNumber;
const int SessionDay::kPreOpenOffsetFieldNumber;
const int SessionDay::kOpenOffsetFieldNumber;
const int SessionDay::kCloseOffsetFieldNumber;
const int SessionDay::kPostCloseOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionDay::SessionDay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SessionDay)
}
SessionDay::SessionDay(const SessionDay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      day_of_week_(from.day_of_week_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_open_offset_, &from.pre_open_offset_,
    reinterpret_cast<char*>(&post_close_offset_) -
    reinterpret_cast<char*>(&pre_open_offset_) + sizeof(post_close_offset_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SessionDay)
}

void SessionDay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pre_open_offset_, 0, reinterpret_cast<char*>(&post_close_offset_) -
    reinterpret_cast<char*>(&pre_open_offset_) + sizeof(post_close_offset_));
}

SessionDay::~SessionDay() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SessionDay)
  SharedDtor();
}

void SessionDay::SharedDtor() {
}

void SessionDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[36].descriptor;
}

const SessionDay& SessionDay::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SessionDay* SessionDay::New(::google::protobuf::Arena* arena) const {
  SessionDay* n = new SessionDay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionDay::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SessionDay)
  day_of_week_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&pre_open_offset_, 0, reinterpret_cast<char*>(&post_close_offset_) -
      reinterpret_cast<char*>(&pre_open_offset_) + sizeof(post_close_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SessionDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WebAPI_1.DayOfWeek day_of_week = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WebAPI_1::DayOfWeek_IsValid(value)) {
            add_day_of_week(static_cast< ::WebAPI_1::DayOfWeek >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::WebAPI_1::DayOfWeek_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_day_of_week())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 pre_open_offset = 2;
      case 2: {
        if (tag == 16u) {
          set_has_pre_open_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &pre_open_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 open_offset = 3;
      case 3: {
        if (tag == 24u) {
          set_has_open_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &open_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 close_offset = 4;
      case 4: {
        if (tag == 32u) {
          set_has_close_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &close_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 post_close_offset = 5;
      case 5: {
        if (tag == 40u) {
          set_has_post_close_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &post_close_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SessionDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SessionDay)
  return false;
#undef DO_
}

void SessionDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SessionDay)
  // repeated .WebAPI_1.DayOfWeek day_of_week = 1;
  for (int i = 0; i < this->day_of_week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->day_of_week(i), output);
  }

  // optional sint64 pre_open_offset = 2;
  if (has_pre_open_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->pre_open_offset(), output);
  }

  // optional sint64 open_offset = 3;
  if (has_open_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->open_offset(), output);
  }

  // optional sint64 close_offset = 4;
  if (has_close_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->close_offset(), output);
  }

  // optional sint64 post_close_offset = 5;
  if (has_post_close_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->post_close_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SessionDay)
}

::google::protobuf::uint8* SessionDay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SessionDay)
  // repeated .WebAPI_1.DayOfWeek day_of_week = 1;
  for (int i = 0; i < this->day_of_week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->day_of_week(i), target);
  }

  // optional sint64 pre_open_offset = 2;
  if (has_pre_open_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->pre_open_offset(), target);
  }

  // optional sint64 open_offset = 3;
  if (has_open_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->open_offset(), target);
  }

  // optional sint64 close_offset = 4;
  if (has_close_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->close_offset(), target);
  }

  // optional sint64 post_close_offset = 5;
  if (has_post_close_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->post_close_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SessionDay)
  return target;
}

size_t SessionDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SessionDay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .WebAPI_1.DayOfWeek day_of_week = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->day_of_week_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->day_of_week(i));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional sint64 pre_open_offset = 2;
    if (has_pre_open_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->pre_open_offset());
    }

    // optional sint64 open_offset = 3;
    if (has_open_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->open_offset());
    }

    // optional sint64 close_offset = 4;
    if (has_close_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->close_offset());
    }

    // optional sint64 post_close_offset = 5;
    if (has_post_close_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->post_close_offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionDay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SessionDay)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionDay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionDay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SessionDay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SessionDay)
    MergeFrom(*source);
  }
}

void SessionDay::MergeFrom(const SessionDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SessionDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  day_of_week_.MergeFrom(from.day_of_week_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_pre_open_offset()) {
      set_pre_open_offset(from.pre_open_offset());
    }
    if (from.has_open_offset()) {
      set_open_offset(from.open_offset());
    }
    if (from.has_close_offset()) {
      set_close_offset(from.close_offset());
    }
    if (from.has_post_close_offset()) {
      set_post_close_offset(from.post_close_offset());
    }
  }
}

void SessionDay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SessionDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionDay::CopyFrom(const SessionDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SessionDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionDay::IsInitialized() const {
  return true;
}

void SessionDay::Swap(SessionDay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionDay::InternalSwap(SessionDay* other) {
  day_of_week_.UnsafeArenaSwap(&other->day_of_week_);
  std::swap(pre_open_offset_, other->pre_open_offset_);
  std::swap(open_offset_, other->open_offset_);
  std::swap(close_offset_, other->close_offset_);
  std::swap(post_close_offset_, other->post_close_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionDay

// repeated .WebAPI_1.DayOfWeek day_of_week = 1;
int SessionDay::day_of_week_size() const {
  return day_of_week_.size();
}
void SessionDay::clear_day_of_week() {
  day_of_week_.Clear();
}
::WebAPI_1::DayOfWeek SessionDay::day_of_week(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionDay.day_of_week)
  return static_cast< ::WebAPI_1::DayOfWeek >(day_of_week_.Get(index));
}
void SessionDay::set_day_of_week(int index, ::WebAPI_1::DayOfWeek value) {
  assert(::WebAPI_1::DayOfWeek_IsValid(value));
  day_of_week_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionDay.day_of_week)
}
void SessionDay::add_day_of_week(::WebAPI_1::DayOfWeek value) {
  assert(::WebAPI_1::DayOfWeek_IsValid(value));
  day_of_week_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.SessionDay.day_of_week)
}
const ::google::protobuf::RepeatedField<int>&
SessionDay::day_of_week() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.SessionDay.day_of_week)
  return day_of_week_;
}
::google::protobuf::RepeatedField<int>*
SessionDay::mutable_day_of_week() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.SessionDay.day_of_week)
  return &day_of_week_;
}

// optional sint64 pre_open_offset = 2;
bool SessionDay::has_pre_open_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionDay::set_has_pre_open_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionDay::clear_has_pre_open_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionDay::clear_pre_open_offset() {
  pre_open_offset_ = GOOGLE_LONGLONG(0);
  clear_has_pre_open_offset();
}
::google::protobuf::int64 SessionDay::pre_open_offset() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionDay.pre_open_offset)
  return pre_open_offset_;
}
void SessionDay::set_pre_open_offset(::google::protobuf::int64 value) {
  set_has_pre_open_offset();
  pre_open_offset_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionDay.pre_open_offset)
}

// optional sint64 open_offset = 3;
bool SessionDay::has_open_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionDay::set_has_open_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionDay::clear_has_open_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionDay::clear_open_offset() {
  open_offset_ = GOOGLE_LONGLONG(0);
  clear_has_open_offset();
}
::google::protobuf::int64 SessionDay::open_offset() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionDay.open_offset)
  return open_offset_;
}
void SessionDay::set_open_offset(::google::protobuf::int64 value) {
  set_has_open_offset();
  open_offset_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionDay.open_offset)
}

// optional sint64 close_offset = 4;
bool SessionDay::has_close_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionDay::set_has_close_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionDay::clear_has_close_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionDay::clear_close_offset() {
  close_offset_ = GOOGLE_LONGLONG(0);
  clear_has_close_offset();
}
::google::protobuf::int64 SessionDay::close_offset() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionDay.close_offset)
  return close_offset_;
}
void SessionDay::set_close_offset(::google::protobuf::int64 value) {
  set_has_close_offset();
  close_offset_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionDay.close_offset)
}

// optional sint64 post_close_offset = 5;
bool SessionDay::has_post_close_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionDay::set_has_post_close_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionDay::clear_has_post_close_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionDay::clear_post_close_offset() {
  post_close_offset_ = GOOGLE_LONGLONG(0);
  clear_has_post_close_offset();
}
::google::protobuf::int64 SessionDay::post_close_offset() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionDay.post_close_offset)
  return post_close_offset_;
}
void SessionDay::set_post_close_offset(::google::protobuf::int64 value) {
  set_has_post_close_offset();
  post_close_offset_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionDay.post_close_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionHoliday::kHolidayDateFieldNumber;
const int SessionHoliday::kHolidayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionHoliday::SessionHoliday()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.SessionHoliday)
}
SessionHoliday::SessionHoliday(const SessionHoliday& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  holiday_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_holiday_name()) {
    holiday_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holiday_name_);
  }
  holiday_date_ = from.holiday_date_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.SessionHoliday)
}

void SessionHoliday::SharedCtor() {
  _cached_size_ = 0;
  holiday_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  holiday_date_ = GOOGLE_LONGLONG(0);
}

SessionHoliday::~SessionHoliday() {
  // @@protoc_insertion_point(destructor:WebAPI_1.SessionHoliday)
  SharedDtor();
}

void SessionHoliday::SharedDtor() {
  holiday_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionHoliday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionHoliday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[37].descriptor;
}

const SessionHoliday& SessionHoliday::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

SessionHoliday* SessionHoliday::New(::google::protobuf::Arena* arena) const {
  SessionHoliday* n = new SessionHoliday;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionHoliday::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.SessionHoliday)
  if (has_holiday_name()) {
    GOOGLE_DCHECK(!holiday_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*holiday_name_.UnsafeRawStringPointer())->clear();
  }
  holiday_date_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionHoliday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.SessionHoliday)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 holiday_date = 1;
      case 1: {
        if (tag == 8u) {
          set_has_holiday_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &holiday_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string holiday_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holiday_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->holiday_name().data(), this->holiday_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.SessionHoliday.holiday_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.SessionHoliday)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.SessionHoliday)
  return false;
#undef DO_
}

void SessionHoliday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.SessionHoliday)
  // required sint64 holiday_date = 1;
  if (has_holiday_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->holiday_date(), output);
  }

  // required string holiday_name = 2;
  if (has_holiday_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holiday_name().data(), this->holiday_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SessionHoliday.holiday_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->holiday_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.SessionHoliday)
}

::google::protobuf::uint8* SessionHoliday::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.SessionHoliday)
  // required sint64 holiday_date = 1;
  if (has_holiday_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->holiday_date(), target);
  }

  // required string holiday_name = 2;
  if (has_holiday_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holiday_name().data(), this->holiday_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.SessionHoliday.holiday_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->holiday_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.SessionHoliday)
  return target;
}

size_t SessionHoliday::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.SessionHoliday)
  size_t total_size = 0;

  if (has_holiday_name()) {
    // required string holiday_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->holiday_name());
  }

  if (has_holiday_date()) {
    // required sint64 holiday_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->holiday_date());
  }

  return total_size;
}
size_t SessionHoliday::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.SessionHoliday)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string holiday_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->holiday_name());

    // required sint64 holiday_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->holiday_date());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionHoliday::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.SessionHoliday)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionHoliday* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionHoliday>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.SessionHoliday)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.SessionHoliday)
    MergeFrom(*source);
  }
}

void SessionHoliday::MergeFrom(const SessionHoliday& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.SessionHoliday)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_holiday_name()) {
      set_has_holiday_name();
      holiday_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holiday_name_);
    }
    if (from.has_holiday_date()) {
      set_holiday_date(from.holiday_date());
    }
  }
}

void SessionHoliday::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.SessionHoliday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionHoliday::CopyFrom(const SessionHoliday& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.SessionHoliday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHoliday::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SessionHoliday::Swap(SessionHoliday* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionHoliday::InternalSwap(SessionHoliday* other) {
  holiday_name_.Swap(&other->holiday_name_);
  std::swap(holiday_date_, other->holiday_date_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionHoliday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionHoliday

// required sint64 holiday_date = 1;
bool SessionHoliday::has_holiday_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionHoliday::set_has_holiday_date() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionHoliday::clear_has_holiday_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionHoliday::clear_holiday_date() {
  holiday_date_ = GOOGLE_LONGLONG(0);
  clear_has_holiday_date();
}
::google::protobuf::int64 SessionHoliday::holiday_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionHoliday.holiday_date)
  return holiday_date_;
}
void SessionHoliday::set_holiday_date(::google::protobuf::int64 value) {
  set_has_holiday_date();
  holiday_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionHoliday.holiday_date)
}

// required string holiday_name = 2;
bool SessionHoliday::has_holiday_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionHoliday::set_has_holiday_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionHoliday::clear_has_holiday_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionHoliday::clear_holiday_name() {
  holiday_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holiday_name();
}
const ::std::string& SessionHoliday::holiday_name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.SessionHoliday.holiday_name)
  return holiday_name_.GetNoArena();
}
void SessionHoliday::set_holiday_name(const ::std::string& value) {
  set_has_holiday_name();
  holiday_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.SessionHoliday.holiday_name)
}
void SessionHoliday::set_holiday_name(const char* value) {
  set_has_holiday_name();
  holiday_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.SessionHoliday.holiday_name)
}
void SessionHoliday::set_holiday_name(const char* value, size_t size) {
  set_has_holiday_name();
  holiday_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.SessionHoliday.holiday_name)
}
::std::string* SessionHoliday::mutable_holiday_name() {
  set_has_holiday_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.SessionHoliday.holiday_name)
  return holiday_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionHoliday::release_holiday_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.SessionHoliday.holiday_name)
  clear_has_holiday_name();
  return holiday_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionHoliday::set_allocated_holiday_name(::std::string* holiday_name) {
  if (holiday_name != NULL) {
    set_has_holiday_name();
  } else {
    clear_has_holiday_name();
  }
  holiday_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holiday_name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.SessionHoliday.holiday_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeSubscription::kIdFieldNumber;
const int TradeSubscription::kSubscriptionScopeFieldNumber;
const int TradeSubscription::kPublicationTypeFieldNumber;
const int TradeSubscription::kAccountIdFieldNumber;
const int TradeSubscription::kSalesSeriesNumberFieldNumber;
const int TradeSubscription::kBrokerageIdFieldNumber;
const int TradeSubscription::kSubscribeFieldNumber;
const int TradeSubscription::kLastOrderUpdateUtcTimeFieldNumber;
const int TradeSubscription::kSkipOrdersSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeSubscription::TradeSubscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TradeSubscription)
}
TradeSubscription::TradeSubscription(const TradeSubscription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subscription_scope_(from.subscription_scope_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sales_series_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sales_series_number()) {
    sales_series_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sales_series_number_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&skip_orders_snapshot_) -
    reinterpret_cast<char*>(&id_) + sizeof(skip_orders_snapshot_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TradeSubscription)
}

void TradeSubscription::SharedCtor() {
  _cached_size_ = 0;
  sales_series_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&skip_orders_snapshot_) -
    reinterpret_cast<char*>(&id_) + sizeof(skip_orders_snapshot_));
}

TradeSubscription::~TradeSubscription() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TradeSubscription)
  SharedDtor();
}

void TradeSubscription::SharedDtor() {
  sales_series_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[38].descriptor;
}

const TradeSubscription& TradeSubscription::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TradeSubscription* TradeSubscription::New(::google::protobuf::Arena* arena) const {
  TradeSubscription* n = new TradeSubscription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TradeSubscription)
  subscription_scope_.Clear();
  if (has_sales_series_number()) {
    GOOGLE_DCHECK(!sales_series_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sales_series_number_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&skip_orders_snapshot_) -
      reinterpret_cast<char*>(&id_) + sizeof(skip_orders_snapshot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TradeSubscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 subscription_scope = 2;
      case 2: {
        if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_subscription_scope())));
        } else if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subscription_scope())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publication_type = 3;
      case 3: {
        if (tag == 24u) {
          set_has_publication_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publication_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 4;
      case 4: {
        if (tag == 32u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sales_series_number = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sales_series_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sales_series_number().data(), this->sales_series_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TradeSubscription.sales_series_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 brokerage_id = 6;
      case 6: {
        if (tag == 48u) {
          set_has_brokerage_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brokerage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool subscribe = 7;
      case 7: {
        if (tag == 56u) {
          set_has_subscribe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 last_order_update_utc_time = 8;
      case 8: {
        if (tag == 64u) {
          set_has_last_order_update_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &last_order_update_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_orders_snapshot = 9;
      case 9: {
        if (tag == 72u) {
          set_has_skip_orders_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_orders_snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TradeSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TradeSubscription)
  return false;
#undef DO_
}

void TradeSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TradeSubscription)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 subscription_scope = 2;
  for (int i = 0; i < this->subscription_scope_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->subscription_scope(i), output);
  }

  // optional uint32 publication_type = 3;
  if (has_publication_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->publication_type(), output);
  }

  // optional uint32 account_id = 4;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id(), output);
  }

  // optional string sales_series_number = 5;
  if (has_sales_series_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sales_series_number().data(), this->sales_series_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TradeSubscription.sales_series_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sales_series_number(), output);
  }

  // optional uint32 brokerage_id = 6;
  if (has_brokerage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->brokerage_id(), output);
  }

  // required bool subscribe = 7;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->subscribe(), output);
  }

  // optional sint64 last_order_update_utc_time = 8;
  if (has_last_order_update_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->last_order_update_utc_time(), output);
  }

  // optional bool skip_orders_snapshot = 9;
  if (has_skip_orders_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->skip_orders_snapshot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TradeSubscription)
}

::google::protobuf::uint8* TradeSubscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TradeSubscription)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 subscription_scope = 2;
  for (int i = 0; i < this->subscription_scope_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->subscription_scope(i), target);
  }

  // optional uint32 publication_type = 3;
  if (has_publication_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->publication_type(), target);
  }

  // optional uint32 account_id = 4;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id(), target);
  }

  // optional string sales_series_number = 5;
  if (has_sales_series_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sales_series_number().data(), this->sales_series_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TradeSubscription.sales_series_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sales_series_number(), target);
  }

  // optional uint32 brokerage_id = 6;
  if (has_brokerage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->brokerage_id(), target);
  }

  // required bool subscribe = 7;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->subscribe(), target);
  }

  // optional sint64 last_order_update_utc_time = 8;
  if (has_last_order_update_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->last_order_update_utc_time(), target);
  }

  // optional bool skip_orders_snapshot = 9;
  if (has_skip_orders_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->skip_orders_snapshot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TradeSubscription)
  return target;
}

size_t TradeSubscription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.TradeSubscription)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_subscribe()) {
    // required bool subscribe = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TradeSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TradeSubscription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000042) ^ 0x00000042) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required bool subscribe = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 subscription_scope = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->subscription_scope_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subscription_scope(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->subscription_scope_size());
    total_size += data_size;
  }

  // optional string sales_series_number = 5;
  if (has_sales_series_number()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sales_series_number());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional uint32 publication_type = 3;
    if (has_publication_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publication_type());
    }

    // optional uint32 account_id = 4;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 brokerage_id = 6;
    if (has_brokerage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->brokerage_id());
    }

    // optional sint64 last_order_update_utc_time = 8;
    if (has_last_order_update_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->last_order_update_utc_time());
    }

  }
  // optional bool skip_orders_snapshot = 9;
  if (has_skip_orders_snapshot()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeSubscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TradeSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSubscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeSubscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TradeSubscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TradeSubscription)
    MergeFrom(*source);
  }
}

void TradeSubscription::MergeFrom(const TradeSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TradeSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_scope_.MergeFrom(from.subscription_scope_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_sales_series_number()) {
      set_has_sales_series_number();
      sales_series_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sales_series_number_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_publication_type()) {
      set_publication_type(from.publication_type());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_brokerage_id()) {
      set_brokerage_id(from.brokerage_id());
    }
    if (from.has_last_order_update_utc_time()) {
      set_last_order_update_utc_time(from.last_order_update_utc_time());
    }
    if (from.has_subscribe()) {
      set_subscribe(from.subscribe());
    }
    if (from.has_skip_orders_snapshot()) {
      set_skip_orders_snapshot(from.skip_orders_snapshot());
    }
  }
}

void TradeSubscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TradeSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSubscription::CopyFrom(const TradeSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TradeSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000042) != 0x00000042) return false;
  return true;
}

void TradeSubscription::Swap(TradeSubscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeSubscription::InternalSwap(TradeSubscription* other) {
  subscription_scope_.UnsafeArenaSwap(&other->subscription_scope_);
  sales_series_number_.Swap(&other->sales_series_number_);
  std::swap(id_, other->id_);
  std::swap(publication_type_, other->publication_type_);
  std::swap(account_id_, other->account_id_);
  std::swap(brokerage_id_, other->brokerage_id_);
  std::swap(last_order_update_utc_time_, other->last_order_update_utc_time_);
  std::swap(subscribe_, other->subscribe_);
  std::swap(skip_orders_snapshot_, other->skip_orders_snapshot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TradeSubscription

// required uint32 id = 1;
bool TradeSubscription::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TradeSubscription::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TradeSubscription::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TradeSubscription::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 TradeSubscription::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.id)
  return id_;
}
void TradeSubscription::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.id)
}

// repeated uint32 subscription_scope = 2;
int TradeSubscription::subscription_scope_size() const {
  return subscription_scope_.size();
}
void TradeSubscription::clear_subscription_scope() {
  subscription_scope_.Clear();
}
::google::protobuf::uint32 TradeSubscription::subscription_scope(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.subscription_scope)
  return subscription_scope_.Get(index);
}
void TradeSubscription::set_subscription_scope(int index, ::google::protobuf::uint32 value) {
  subscription_scope_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.subscription_scope)
}
void TradeSubscription::add_subscription_scope(::google::protobuf::uint32 value) {
  subscription_scope_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.TradeSubscription.subscription_scope)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TradeSubscription::subscription_scope() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.TradeSubscription.subscription_scope)
  return subscription_scope_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TradeSubscription::mutable_subscription_scope() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.TradeSubscription.subscription_scope)
  return &subscription_scope_;
}

// optional uint32 publication_type = 3;
bool TradeSubscription::has_publication_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TradeSubscription::set_has_publication_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TradeSubscription::clear_has_publication_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TradeSubscription::clear_publication_type() {
  publication_type_ = 0u;
  clear_has_publication_type();
}
::google::protobuf::uint32 TradeSubscription::publication_type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.publication_type)
  return publication_type_;
}
void TradeSubscription::set_publication_type(::google::protobuf::uint32 value) {
  set_has_publication_type();
  publication_type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.publication_type)
}

// optional uint32 account_id = 4;
bool TradeSubscription::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TradeSubscription::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void TradeSubscription::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void TradeSubscription::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 TradeSubscription::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.account_id)
  return account_id_;
}
void TradeSubscription::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.account_id)
}

// optional string sales_series_number = 5;
bool TradeSubscription::has_sales_series_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TradeSubscription::set_has_sales_series_number() {
  _has_bits_[0] |= 0x00000001u;
}
void TradeSubscription::clear_has_sales_series_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void TradeSubscription::clear_sales_series_number() {
  sales_series_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sales_series_number();
}
const ::std::string& TradeSubscription::sales_series_number() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.sales_series_number)
  return sales_series_number_.GetNoArena();
}
void TradeSubscription::set_sales_series_number(const ::std::string& value) {
  set_has_sales_series_number();
  sales_series_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.sales_series_number)
}
void TradeSubscription::set_sales_series_number(const char* value) {
  set_has_sales_series_number();
  sales_series_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TradeSubscription.sales_series_number)
}
void TradeSubscription::set_sales_series_number(const char* value, size_t size) {
  set_has_sales_series_number();
  sales_series_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TradeSubscription.sales_series_number)
}
::std::string* TradeSubscription::mutable_sales_series_number() {
  set_has_sales_series_number();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TradeSubscription.sales_series_number)
  return sales_series_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TradeSubscription::release_sales_series_number() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TradeSubscription.sales_series_number)
  clear_has_sales_series_number();
  return sales_series_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeSubscription::set_allocated_sales_series_number(::std::string* sales_series_number) {
  if (sales_series_number != NULL) {
    set_has_sales_series_number();
  } else {
    clear_has_sales_series_number();
  }
  sales_series_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sales_series_number);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TradeSubscription.sales_series_number)
}

// optional uint32 brokerage_id = 6;
bool TradeSubscription::has_brokerage_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TradeSubscription::set_has_brokerage_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TradeSubscription::clear_has_brokerage_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TradeSubscription::clear_brokerage_id() {
  brokerage_id_ = 0u;
  clear_has_brokerage_id();
}
::google::protobuf::uint32 TradeSubscription::brokerage_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.brokerage_id)
  return brokerage_id_;
}
void TradeSubscription::set_brokerage_id(::google::protobuf::uint32 value) {
  set_has_brokerage_id();
  brokerage_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.brokerage_id)
}

// required bool subscribe = 7;
bool TradeSubscription::has_subscribe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TradeSubscription::set_has_subscribe() {
  _has_bits_[0] |= 0x00000040u;
}
void TradeSubscription::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000040u;
}
void TradeSubscription::clear_subscribe() {
  subscribe_ = false;
  clear_has_subscribe();
}
bool TradeSubscription::subscribe() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.subscribe)
  return subscribe_;
}
void TradeSubscription::set_subscribe(bool value) {
  set_has_subscribe();
  subscribe_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.subscribe)
}

// optional sint64 last_order_update_utc_time = 8;
bool TradeSubscription::has_last_order_update_utc_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TradeSubscription::set_has_last_order_update_utc_time() {
  _has_bits_[0] |= 0x00000020u;
}
void TradeSubscription::clear_has_last_order_update_utc_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void TradeSubscription::clear_last_order_update_utc_time() {
  last_order_update_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_order_update_utc_time();
}
::google::protobuf::int64 TradeSubscription::last_order_update_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.last_order_update_utc_time)
  return last_order_update_utc_time_;
}
void TradeSubscription::set_last_order_update_utc_time(::google::protobuf::int64 value) {
  set_has_last_order_update_utc_time();
  last_order_update_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.last_order_update_utc_time)
}

// optional bool skip_orders_snapshot = 9;
bool TradeSubscription::has_skip_orders_snapshot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TradeSubscription::set_has_skip_orders_snapshot() {
  _has_bits_[0] |= 0x00000080u;
}
void TradeSubscription::clear_has_skip_orders_snapshot() {
  _has_bits_[0] &= ~0x00000080u;
}
void TradeSubscription::clear_skip_orders_snapshot() {
  skip_orders_snapshot_ = false;
  clear_has_skip_orders_snapshot();
}
bool TradeSubscription::skip_orders_snapshot() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscription.skip_orders_snapshot)
  return skip_orders_snapshot_;
}
void TradeSubscription::set_skip_orders_snapshot(bool value) {
  set_has_skip_orders_snapshot();
  skip_orders_snapshot_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscription.skip_orders_snapshot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeSubscriptionStatus::kIdFieldNumber;
const int TradeSubscriptionStatus::kStatusCodeFieldNumber;
const int TradeSubscriptionStatus::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeSubscriptionStatus::TradeSubscriptionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TradeSubscriptionStatus)
}
TradeSubscriptionStatus::TradeSubscriptionStatus(const TradeSubscriptionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&id_) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TradeSubscriptionStatus)
}

void TradeSubscriptionStatus::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&id_) + sizeof(status_code_));
}

TradeSubscriptionStatus::~TradeSubscriptionStatus() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TradeSubscriptionStatus)
  SharedDtor();
}

void TradeSubscriptionStatus::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeSubscriptionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeSubscriptionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[39].descriptor;
}

const TradeSubscriptionStatus& TradeSubscriptionStatus::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TradeSubscriptionStatus* TradeSubscriptionStatus::New(::google::protobuf::Arena* arena) const {
  TradeSubscriptionStatus* n = new TradeSubscriptionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeSubscriptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TradeSubscriptionStatus)
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&id_) + sizeof(status_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeSubscriptionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TradeSubscriptionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 status_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TradeSubscriptionStatus.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TradeSubscriptionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TradeSubscriptionStatus)
  return false;
#undef DO_
}

void TradeSubscriptionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TradeSubscriptionStatus)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 status_code = 2;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_code(), output);
  }

  // optional string text_message = 3;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TradeSubscriptionStatus.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TradeSubscriptionStatus)
}

::google::protobuf::uint8* TradeSubscriptionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TradeSubscriptionStatus)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 status_code = 2;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_code(), target);
  }

  // optional string text_message = 3;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TradeSubscriptionStatus.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TradeSubscriptionStatus)
  return target;
}

size_t TradeSubscriptionStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.TradeSubscriptionStatus)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_status_code()) {
    // required uint32 status_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());
  }

  return total_size;
}
size_t TradeSubscriptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TradeSubscriptionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 status_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string text_message = 3;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeSubscriptionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TradeSubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSubscriptionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeSubscriptionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TradeSubscriptionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TradeSubscriptionStatus)
    MergeFrom(*source);
  }
}

void TradeSubscriptionStatus::MergeFrom(const TradeSubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TradeSubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
  }
}

void TradeSubscriptionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TradeSubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSubscriptionStatus::CopyFrom(const TradeSubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TradeSubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSubscriptionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void TradeSubscriptionStatus::Swap(TradeSubscriptionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeSubscriptionStatus::InternalSwap(TradeSubscriptionStatus* other) {
  text_message_.Swap(&other->text_message_);
  std::swap(id_, other->id_);
  std::swap(status_code_, other->status_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeSubscriptionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TradeSubscriptionStatus

// required uint32 id = 1;
bool TradeSubscriptionStatus::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TradeSubscriptionStatus::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TradeSubscriptionStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TradeSubscriptionStatus::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 TradeSubscriptionStatus::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscriptionStatus.id)
  return id_;
}
void TradeSubscriptionStatus::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscriptionStatus.id)
}

// required uint32 status_code = 2;
bool TradeSubscriptionStatus::has_status_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TradeSubscriptionStatus::set_has_status_code() {
  _has_bits_[0] |= 0x00000004u;
}
void TradeSubscriptionStatus::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void TradeSubscriptionStatus::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
::google::protobuf::uint32 TradeSubscriptionStatus::status_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscriptionStatus.status_code)
  return status_code_;
}
void TradeSubscriptionStatus::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscriptionStatus.status_code)
}

// optional string text_message = 3;
bool TradeSubscriptionStatus::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TradeSubscriptionStatus::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void TradeSubscriptionStatus::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void TradeSubscriptionStatus::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& TradeSubscriptionStatus::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSubscriptionStatus.text_message)
  return text_message_.GetNoArena();
}
void TradeSubscriptionStatus::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSubscriptionStatus.text_message)
}
void TradeSubscriptionStatus::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TradeSubscriptionStatus.text_message)
}
void TradeSubscriptionStatus::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TradeSubscriptionStatus.text_message)
}
::std::string* TradeSubscriptionStatus::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TradeSubscriptionStatus.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TradeSubscriptionStatus::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TradeSubscriptionStatus.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TradeSubscriptionStatus::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TradeSubscriptionStatus.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeSnapshotCompletion::kSubscriptionIdFieldNumber;
const int TradeSnapshotCompletion::kSubscriptionScopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeSnapshotCompletion::TradeSnapshotCompletion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TradeSnapshotCompletion)
}
TradeSnapshotCompletion::TradeSnapshotCompletion(const TradeSnapshotCompletion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subscription_scope_(from.subscription_scope_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_ = from.subscription_id_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TradeSnapshotCompletion)
}

void TradeSnapshotCompletion::SharedCtor() {
  _cached_size_ = 0;
  subscription_id_ = 0u;
}

TradeSnapshotCompletion::~TradeSnapshotCompletion() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TradeSnapshotCompletion)
  SharedDtor();
}

void TradeSnapshotCompletion::SharedDtor() {
}

void TradeSnapshotCompletion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeSnapshotCompletion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[40].descriptor;
}

const TradeSnapshotCompletion& TradeSnapshotCompletion::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TradeSnapshotCompletion* TradeSnapshotCompletion::New(::google::protobuf::Arena* arena) const {
  TradeSnapshotCompletion* n = new TradeSnapshotCompletion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradeSnapshotCompletion::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TradeSnapshotCompletion)
  subscription_scope_.Clear();
  subscription_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeSnapshotCompletion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TradeSnapshotCompletion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 subscription_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_subscription_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscription_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 subscription_scope = 2;
      case 2: {
        if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_subscription_scope())));
        } else if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subscription_scope())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TradeSnapshotCompletion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TradeSnapshotCompletion)
  return false;
#undef DO_
}

void TradeSnapshotCompletion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TradeSnapshotCompletion)
  // required uint32 subscription_id = 1;
  if (has_subscription_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->subscription_id(), output);
  }

  // repeated uint32 subscription_scope = 2;
  for (int i = 0; i < this->subscription_scope_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->subscription_scope(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TradeSnapshotCompletion)
}

::google::protobuf::uint8* TradeSnapshotCompletion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TradeSnapshotCompletion)
  // required uint32 subscription_id = 1;
  if (has_subscription_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->subscription_id(), target);
  }

  // repeated uint32 subscription_scope = 2;
  for (int i = 0; i < this->subscription_scope_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->subscription_scope(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TradeSnapshotCompletion)
  return target;
}

size_t TradeSnapshotCompletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TradeSnapshotCompletion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 subscription_id = 1;
  if (has_subscription_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subscription_id());
  }
  // repeated uint32 subscription_scope = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->subscription_scope_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subscription_scope(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->subscription_scope_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeSnapshotCompletion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TradeSnapshotCompletion)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSnapshotCompletion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeSnapshotCompletion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TradeSnapshotCompletion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TradeSnapshotCompletion)
    MergeFrom(*source);
  }
}

void TradeSnapshotCompletion::MergeFrom(const TradeSnapshotCompletion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TradeSnapshotCompletion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_scope_.MergeFrom(from.subscription_scope_);
  if (from.has_subscription_id()) {
    set_subscription_id(from.subscription_id());
  }
}

void TradeSnapshotCompletion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TradeSnapshotCompletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSnapshotCompletion::CopyFrom(const TradeSnapshotCompletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TradeSnapshotCompletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSnapshotCompletion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TradeSnapshotCompletion::Swap(TradeSnapshotCompletion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeSnapshotCompletion::InternalSwap(TradeSnapshotCompletion* other) {
  subscription_scope_.UnsafeArenaSwap(&other->subscription_scope_);
  std::swap(subscription_id_, other->subscription_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradeSnapshotCompletion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TradeSnapshotCompletion

// required uint32 subscription_id = 1;
bool TradeSnapshotCompletion::has_subscription_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TradeSnapshotCompletion::set_has_subscription_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TradeSnapshotCompletion::clear_has_subscription_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TradeSnapshotCompletion::clear_subscription_id() {
  subscription_id_ = 0u;
  clear_has_subscription_id();
}
::google::protobuf::uint32 TradeSnapshotCompletion::subscription_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSnapshotCompletion.subscription_id)
  return subscription_id_;
}
void TradeSnapshotCompletion::set_subscription_id(::google::protobuf::uint32 value) {
  set_has_subscription_id();
  subscription_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSnapshotCompletion.subscription_id)
}

// repeated uint32 subscription_scope = 2;
int TradeSnapshotCompletion::subscription_scope_size() const {
  return subscription_scope_.size();
}
void TradeSnapshotCompletion::clear_subscription_scope() {
  subscription_scope_.Clear();
}
::google::protobuf::uint32 TradeSnapshotCompletion::subscription_scope(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TradeSnapshotCompletion.subscription_scope)
  return subscription_scope_.Get(index);
}
void TradeSnapshotCompletion::set_subscription_scope(int index, ::google::protobuf::uint32 value) {
  subscription_scope_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TradeSnapshotCompletion.subscription_scope)
}
void TradeSnapshotCompletion::add_subscription_scope(::google::protobuf::uint32 value) {
  subscription_scope_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.TradeSnapshotCompletion.subscription_scope)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TradeSnapshotCompletion::subscription_scope() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.TradeSnapshotCompletion.subscription_scope)
  return subscription_scope_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TradeSnapshotCompletion::mutable_subscription_scope() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.TradeSnapshotCompletion.subscription_scope)
  return &subscription_scope_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderRequest::kRequestIdFieldNumber;
const int OrderRequest::kNewOrderFieldNumber;
const int OrderRequest::kModifyOrderFieldNumber;
const int OrderRequest::kCancelOrderFieldNumber;
const int OrderRequest::kActivateOrderFieldNumber;
const int OrderRequest::kModifyUserAttributesFieldNumber;
const int OrderRequest::kOnBehalfOfUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderRequest::OrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.OrderRequest)
}
OrderRequest::OrderRequest(const OrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  on_behalf_of_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_on_behalf_of_user()) {
    on_behalf_of_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.on_behalf_of_user_);
  }
  if (from.has_new_order()) {
    new_order_ = new ::WebAPI_1::NewOrder(*from.new_order_);
  } else {
    new_order_ = NULL;
  }
  if (from.has_modify_order()) {
    modify_order_ = new ::WebAPI_1::ModifyOrder(*from.modify_order_);
  } else {
    modify_order_ = NULL;
  }
  if (from.has_cancel_order()) {
    cancel_order_ = new ::WebAPI_1::CancelOrder(*from.cancel_order_);
  } else {
    cancel_order_ = NULL;
  }
  if (from.has_activate_order()) {
    activate_order_ = new ::WebAPI_1::ActivateOrder(*from.activate_order_);
  } else {
    activate_order_ = NULL;
  }
  if (from.has_modify_user_attributes()) {
    modify_user_attributes_ = new ::WebAPI_1::ModifyUserAttributes(*from.modify_user_attributes_);
  } else {
    modify_user_attributes_ = NULL;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.OrderRequest)
}

void OrderRequest::SharedCtor() {
  _cached_size_ = 0;
  on_behalf_of_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_order_, 0, reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&new_order_) + sizeof(request_id_));
}

OrderRequest::~OrderRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.OrderRequest)
  SharedDtor();
}

void OrderRequest::SharedDtor() {
  on_behalf_of_user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete new_order_;
  }
  if (this != internal_default_instance()) {
    delete modify_order_;
  }
  if (this != internal_default_instance()) {
    delete cancel_order_;
  }
  if (this != internal_default_instance()) {
    delete activate_order_;
  }
  if (this != internal_default_instance()) {
    delete modify_user_attributes_;
  }
}

void OrderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[41].descriptor;
}

const OrderRequest& OrderRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

OrderRequest* OrderRequest::New(::google::protobuf::Arena* arena) const {
  OrderRequest* n = new OrderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.OrderRequest)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_on_behalf_of_user()) {
      GOOGLE_DCHECK(!on_behalf_of_user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*on_behalf_of_user_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_order()) {
      GOOGLE_DCHECK(new_order_ != NULL);
      new_order_->::WebAPI_1::NewOrder::Clear();
    }
    if (has_modify_order()) {
      GOOGLE_DCHECK(modify_order_ != NULL);
      modify_order_->::WebAPI_1::ModifyOrder::Clear();
    }
    if (has_cancel_order()) {
      GOOGLE_DCHECK(cancel_order_ != NULL);
      cancel_order_->::WebAPI_1::CancelOrder::Clear();
    }
    if (has_activate_order()) {
      GOOGLE_DCHECK(activate_order_ != NULL);
      activate_order_->::WebAPI_1::ActivateOrder::Clear();
    }
    if (has_modify_user_attributes()) {
      GOOGLE_DCHECK(modify_user_attributes_ != NULL);
      modify_user_attributes_->::WebAPI_1::ModifyUserAttributes::Clear();
    }
  }
  request_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.OrderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.NewOrder new_order = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.ModifyOrder modify_order = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.CancelOrder cancel_order = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cancel_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.ActivateOrder activate_order = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activate_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.ModifyUserAttributes modify_user_attributes = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_user_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string on_behalf_of_user = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_behalf_of_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->on_behalf_of_user().data(), this->on_behalf_of_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.OrderRequest.on_behalf_of_user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.OrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.OrderRequest)
  return false;
#undef DO_
}

void OrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.OrderRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional .WebAPI_1.NewOrder new_order = 2;
  if (has_new_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new_order_, output);
  }

  // optional .WebAPI_1.ModifyOrder modify_order = 3;
  if (has_modify_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->modify_order_, output);
  }

  // optional .WebAPI_1.CancelOrder cancel_order = 4;
  if (has_cancel_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cancel_order_, output);
  }

  // optional .WebAPI_1.ActivateOrder activate_order = 5;
  if (has_activate_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->activate_order_, output);
  }

  // optional .WebAPI_1.ModifyUserAttributes modify_user_attributes = 6;
  if (has_modify_user_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->modify_user_attributes_, output);
  }

  // optional string on_behalf_of_user = 7;
  if (has_on_behalf_of_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_user().data(), this->on_behalf_of_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderRequest.on_behalf_of_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->on_behalf_of_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.OrderRequest)
}

::google::protobuf::uint8* OrderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.OrderRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional .WebAPI_1.NewOrder new_order = 2;
  if (has_new_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->new_order_, false, target);
  }

  // optional .WebAPI_1.ModifyOrder modify_order = 3;
  if (has_modify_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->modify_order_, false, target);
  }

  // optional .WebAPI_1.CancelOrder cancel_order = 4;
  if (has_cancel_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cancel_order_, false, target);
  }

  // optional .WebAPI_1.ActivateOrder activate_order = 5;
  if (has_activate_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->activate_order_, false, target);
  }

  // optional .WebAPI_1.ModifyUserAttributes modify_user_attributes = 6;
  if (has_modify_user_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->modify_user_attributes_, false, target);
  }

  // optional string on_behalf_of_user = 7;
  if (has_on_behalf_of_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_user().data(), this->on_behalf_of_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderRequest.on_behalf_of_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->on_behalf_of_user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.OrderRequest)
  return target;
}

size_t OrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.OrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string on_behalf_of_user = 7;
    if (has_on_behalf_of_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->on_behalf_of_user());
    }

    // optional .WebAPI_1.NewOrder new_order = 2;
    if (has_new_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_order_);
    }

    // optional .WebAPI_1.ModifyOrder modify_order = 3;
    if (has_modify_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modify_order_);
    }

    // optional .WebAPI_1.CancelOrder cancel_order = 4;
    if (has_cancel_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cancel_order_);
    }

    // optional .WebAPI_1.ActivateOrder activate_order = 5;
    if (has_activate_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->activate_order_);
    }

    // optional .WebAPI_1.ModifyUserAttributes modify_user_attributes = 6;
    if (has_modify_user_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modify_user_attributes_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.OrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.OrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.OrderRequest)
    MergeFrom(*source);
  }
}

void OrderRequest::MergeFrom(const OrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.OrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_on_behalf_of_user()) {
      set_has_on_behalf_of_user();
      on_behalf_of_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.on_behalf_of_user_);
    }
    if (from.has_new_order()) {
      mutable_new_order()->::WebAPI_1::NewOrder::MergeFrom(from.new_order());
    }
    if (from.has_modify_order()) {
      mutable_modify_order()->::WebAPI_1::ModifyOrder::MergeFrom(from.modify_order());
    }
    if (from.has_cancel_order()) {
      mutable_cancel_order()->::WebAPI_1::CancelOrder::MergeFrom(from.cancel_order());
    }
    if (from.has_activate_order()) {
      mutable_activate_order()->::WebAPI_1::ActivateOrder::MergeFrom(from.activate_order());
    }
    if (from.has_modify_user_attributes()) {
      mutable_modify_user_attributes()->::WebAPI_1::ModifyUserAttributes::MergeFrom(from.modify_user_attributes());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
}

void OrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.OrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderRequest::CopyFrom(const OrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.OrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_new_order()) {
    if (!this->new_order_->IsInitialized()) return false;
  }
  if (has_modify_order()) {
    if (!this->modify_order_->IsInitialized()) return false;
  }
  if (has_cancel_order()) {
    if (!this->cancel_order_->IsInitialized()) return false;
  }
  if (has_activate_order()) {
    if (!this->activate_order_->IsInitialized()) return false;
  }
  if (has_modify_user_attributes()) {
    if (!this->modify_user_attributes_->IsInitialized()) return false;
  }
  return true;
}

void OrderRequest::Swap(OrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderRequest::InternalSwap(OrderRequest* other) {
  on_behalf_of_user_.Swap(&other->on_behalf_of_user_);
  std::swap(new_order_, other->new_order_);
  std::swap(modify_order_, other->modify_order_);
  std::swap(cancel_order_, other->cancel_order_);
  std::swap(activate_order_, other->activate_order_);
  std::swap(modify_user_attributes_, other->modify_user_attributes_);
  std::swap(request_id_, other->request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderRequest

// required uint32 request_id = 1;
bool OrderRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrderRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000040u;
}
void OrderRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrderRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 OrderRequest::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequest.request_id)
  return request_id_;
}
void OrderRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderRequest.request_id)
}

// optional .WebAPI_1.NewOrder new_order = 2;
bool OrderRequest::has_new_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderRequest::set_has_new_order() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderRequest::clear_has_new_order() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderRequest::clear_new_order() {
  if (new_order_ != NULL) new_order_->::WebAPI_1::NewOrder::Clear();
  clear_has_new_order();
}
const ::WebAPI_1::NewOrder& OrderRequest::new_order() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequest.new_order)
  return new_order_ != NULL ? *new_order_
                         : *::WebAPI_1::NewOrder::internal_default_instance();
}
::WebAPI_1::NewOrder* OrderRequest::mutable_new_order() {
  set_has_new_order();
  if (new_order_ == NULL) {
    new_order_ = new ::WebAPI_1::NewOrder;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderRequest.new_order)
  return new_order_;
}
::WebAPI_1::NewOrder* OrderRequest::release_new_order() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderRequest.new_order)
  clear_has_new_order();
  ::WebAPI_1::NewOrder* temp = new_order_;
  new_order_ = NULL;
  return temp;
}
void OrderRequest::set_allocated_new_order(::WebAPI_1::NewOrder* new_order) {
  delete new_order_;
  new_order_ = new_order;
  if (new_order) {
    set_has_new_order();
  } else {
    clear_has_new_order();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderRequest.new_order)
}

// optional .WebAPI_1.ModifyOrder modify_order = 3;
bool OrderRequest::has_modify_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderRequest::set_has_modify_order() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderRequest::clear_has_modify_order() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderRequest::clear_modify_order() {
  if (modify_order_ != NULL) modify_order_->::WebAPI_1::ModifyOrder::Clear();
  clear_has_modify_order();
}
const ::WebAPI_1::ModifyOrder& OrderRequest::modify_order() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequest.modify_order)
  return modify_order_ != NULL ? *modify_order_
                         : *::WebAPI_1::ModifyOrder::internal_default_instance();
}
::WebAPI_1::ModifyOrder* OrderRequest::mutable_modify_order() {
  set_has_modify_order();
  if (modify_order_ == NULL) {
    modify_order_ = new ::WebAPI_1::ModifyOrder;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderRequest.modify_order)
  return modify_order_;
}
::WebAPI_1::ModifyOrder* OrderRequest::release_modify_order() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderRequest.modify_order)
  clear_has_modify_order();
  ::WebAPI_1::ModifyOrder* temp = modify_order_;
  modify_order_ = NULL;
  return temp;
}
void OrderRequest::set_allocated_modify_order(::WebAPI_1::ModifyOrder* modify_order) {
  delete modify_order_;
  modify_order_ = modify_order;
  if (modify_order) {
    set_has_modify_order();
  } else {
    clear_has_modify_order();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderRequest.modify_order)
}

// optional .WebAPI_1.CancelOrder cancel_order = 4;
bool OrderRequest::has_cancel_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrderRequest::set_has_cancel_order() {
  _has_bits_[0] |= 0x00000008u;
}
void OrderRequest::clear_has_cancel_order() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrderRequest::clear_cancel_order() {
  if (cancel_order_ != NULL) cancel_order_->::WebAPI_1::CancelOrder::Clear();
  clear_has_cancel_order();
}
const ::WebAPI_1::CancelOrder& OrderRequest::cancel_order() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequest.cancel_order)
  return cancel_order_ != NULL ? *cancel_order_
                         : *::WebAPI_1::CancelOrder::internal_default_instance();
}
::WebAPI_1::CancelOrder* OrderRequest::mutable_cancel_order() {
  set_has_cancel_order();
  if (cancel_order_ == NULL) {
    cancel_order_ = new ::WebAPI_1::CancelOrder;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderRequest.cancel_order)
  return cancel_order_;
}
::WebAPI_1::CancelOrder* OrderRequest::release_cancel_order() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderRequest.cancel_order)
  clear_has_cancel_order();
  ::WebAPI_1::CancelOrder* temp = cancel_order_;
  cancel_order_ = NULL;
  return temp;
}
void OrderRequest::set_allocated_cancel_order(::WebAPI_1::CancelOrder* cancel_order) {
  delete cancel_order_;
  cancel_order_ = cancel_order;
  if (cancel_order) {
    set_has_cancel_order();
  } else {
    clear_has_cancel_order();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderRequest.cancel_order)
}

// optional .WebAPI_1.ActivateOrder activate_order = 5;
bool OrderRequest::has_activate_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrderRequest::set_has_activate_order() {
  _has_bits_[0] |= 0x00000010u;
}
void OrderRequest::clear_has_activate_order() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrderRequest::clear_activate_order() {
  if (activate_order_ != NULL) activate_order_->::WebAPI_1::ActivateOrder::Clear();
  clear_has_activate_order();
}
const ::WebAPI_1::ActivateOrder& OrderRequest::activate_order() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequest.activate_order)
  return activate_order_ != NULL ? *activate_order_
                         : *::WebAPI_1::ActivateOrder::internal_default_instance();
}
::WebAPI_1::ActivateOrder* OrderRequest::mutable_activate_order() {
  set_has_activate_order();
  if (activate_order_ == NULL) {
    activate_order_ = new ::WebAPI_1::ActivateOrder;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderRequest.activate_order)
  return activate_order_;
}
::WebAPI_1::ActivateOrder* OrderRequest::release_activate_order() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderRequest.activate_order)
  clear_has_activate_order();
  ::WebAPI_1::ActivateOrder* temp = activate_order_;
  activate_order_ = NULL;
  return temp;
}
void OrderRequest::set_allocated_activate_order(::WebAPI_1::ActivateOrder* activate_order) {
  delete activate_order_;
  activate_order_ = activate_order;
  if (activate_order) {
    set_has_activate_order();
  } else {
    clear_has_activate_order();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderRequest.activate_order)
}

// optional .WebAPI_1.ModifyUserAttributes modify_user_attributes = 6;
bool OrderRequest::has_modify_user_attributes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrderRequest::set_has_modify_user_attributes() {
  _has_bits_[0] |= 0x00000020u;
}
void OrderRequest::clear_has_modify_user_attributes() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrderRequest::clear_modify_user_attributes() {
  if (modify_user_attributes_ != NULL) modify_user_attributes_->::WebAPI_1::ModifyUserAttributes::Clear();
  clear_has_modify_user_attributes();
}
const ::WebAPI_1::ModifyUserAttributes& OrderRequest::modify_user_attributes() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequest.modify_user_attributes)
  return modify_user_attributes_ != NULL ? *modify_user_attributes_
                         : *::WebAPI_1::ModifyUserAttributes::internal_default_instance();
}
::WebAPI_1::ModifyUserAttributes* OrderRequest::mutable_modify_user_attributes() {
  set_has_modify_user_attributes();
  if (modify_user_attributes_ == NULL) {
    modify_user_attributes_ = new ::WebAPI_1::ModifyUserAttributes;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderRequest.modify_user_attributes)
  return modify_user_attributes_;
}
::WebAPI_1::ModifyUserAttributes* OrderRequest::release_modify_user_attributes() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderRequest.modify_user_attributes)
  clear_has_modify_user_attributes();
  ::WebAPI_1::ModifyUserAttributes* temp = modify_user_attributes_;
  modify_user_attributes_ = NULL;
  return temp;
}
void OrderRequest::set_allocated_modify_user_attributes(::WebAPI_1::ModifyUserAttributes* modify_user_attributes) {
  delete modify_user_attributes_;
  modify_user_attributes_ = modify_user_attributes;
  if (modify_user_attributes) {
    set_has_modify_user_attributes();
  } else {
    clear_has_modify_user_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderRequest.modify_user_attributes)
}

// optional string on_behalf_of_user = 7;
bool OrderRequest::has_on_behalf_of_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderRequest::set_has_on_behalf_of_user() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderRequest::clear_has_on_behalf_of_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderRequest::clear_on_behalf_of_user() {
  on_behalf_of_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_on_behalf_of_user();
}
const ::std::string& OrderRequest::on_behalf_of_user() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequest.on_behalf_of_user)
  return on_behalf_of_user_.GetNoArena();
}
void OrderRequest::set_on_behalf_of_user(const ::std::string& value) {
  set_has_on_behalf_of_user();
  on_behalf_of_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderRequest.on_behalf_of_user)
}
void OrderRequest::set_on_behalf_of_user(const char* value) {
  set_has_on_behalf_of_user();
  on_behalf_of_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.OrderRequest.on_behalf_of_user)
}
void OrderRequest::set_on_behalf_of_user(const char* value, size_t size) {
  set_has_on_behalf_of_user();
  on_behalf_of_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.OrderRequest.on_behalf_of_user)
}
::std::string* OrderRequest::mutable_on_behalf_of_user() {
  set_has_on_behalf_of_user();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderRequest.on_behalf_of_user)
  return on_behalf_of_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderRequest::release_on_behalf_of_user() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderRequest.on_behalf_of_user)
  clear_has_on_behalf_of_user();
  return on_behalf_of_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderRequest::set_allocated_on_behalf_of_user(::std::string* on_behalf_of_user) {
  if (on_behalf_of_user != NULL) {
    set_has_on_behalf_of_user();
  } else {
    clear_has_on_behalf_of_user();
  }
  on_behalf_of_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), on_behalf_of_user);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderRequest.on_behalf_of_user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderRequestReject::kRequestIdFieldNumber;
const int OrderRequestReject::kRejectCodeFieldNumber;
const int OrderRequestReject::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderRequestReject::OrderRequestReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.OrderRequestReject)
}
OrderRequestReject::OrderRequestReject(const OrderRequestReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&reject_code_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(reject_code_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.OrderRequestReject)
}

void OrderRequestReject::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&reject_code_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(reject_code_));
}

OrderRequestReject::~OrderRequestReject() {
  // @@protoc_insertion_point(destructor:WebAPI_1.OrderRequestReject)
  SharedDtor();
}

void OrderRequestReject::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderRequestReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderRequestReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[42].descriptor;
}

const OrderRequestReject& OrderRequestReject::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

OrderRequestReject* OrderRequestReject::New(::google::protobuf::Arena* arena) const {
  OrderRequestReject* n = new OrderRequestReject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderRequestReject::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.OrderRequestReject)
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&reject_code_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(reject_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderRequestReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.OrderRequestReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 reject_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_reject_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reject_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.OrderRequestReject.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.OrderRequestReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.OrderRequestReject)
  return false;
#undef DO_
}

void OrderRequestReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.OrderRequestReject)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 reject_code = 2;
  if (has_reject_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reject_code(), output);
  }

  // optional string text_message = 3;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderRequestReject.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.OrderRequestReject)
}

::google::protobuf::uint8* OrderRequestReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.OrderRequestReject)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required uint32 reject_code = 2;
  if (has_reject_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reject_code(), target);
  }

  // optional string text_message = 3;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderRequestReject.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.OrderRequestReject)
  return target;
}

size_t OrderRequestReject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.OrderRequestReject)
  size_t total_size = 0;

  if (has_request_id()) {
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  if (has_reject_code()) {
    // required uint32 reject_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reject_code());
  }

  return total_size;
}
size_t OrderRequestReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.OrderRequestReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());

    // required uint32 reject_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reject_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string text_message = 3;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderRequestReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.OrderRequestReject)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderRequestReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderRequestReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.OrderRequestReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.OrderRequestReject)
    MergeFrom(*source);
  }
}

void OrderRequestReject::MergeFrom(const OrderRequestReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.OrderRequestReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_reject_code()) {
      set_reject_code(from.reject_code());
    }
  }
}

void OrderRequestReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.OrderRequestReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderRequestReject::CopyFrom(const OrderRequestReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.OrderRequestReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRequestReject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void OrderRequestReject::Swap(OrderRequestReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderRequestReject::InternalSwap(OrderRequestReject* other) {
  text_message_.Swap(&other->text_message_);
  std::swap(request_id_, other->request_id_);
  std::swap(reject_code_, other->reject_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderRequestReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderRequestReject

// required uint32 request_id = 1;
bool OrderRequestReject::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderRequestReject::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderRequestReject::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderRequestReject::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 OrderRequestReject::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequestReject.request_id)
  return request_id_;
}
void OrderRequestReject::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderRequestReject.request_id)
}

// required uint32 reject_code = 2;
bool OrderRequestReject::has_reject_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderRequestReject::set_has_reject_code() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderRequestReject::clear_has_reject_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderRequestReject::clear_reject_code() {
  reject_code_ = 0u;
  clear_has_reject_code();
}
::google::protobuf::uint32 OrderRequestReject::reject_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequestReject.reject_code)
  return reject_code_;
}
void OrderRequestReject::set_reject_code(::google::protobuf::uint32 value) {
  set_has_reject_code();
  reject_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderRequestReject.reject_code)
}

// optional string text_message = 3;
bool OrderRequestReject::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderRequestReject::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderRequestReject::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderRequestReject::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& OrderRequestReject::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderRequestReject.text_message)
  return text_message_.GetNoArena();
}
void OrderRequestReject::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderRequestReject.text_message)
}
void OrderRequestReject::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.OrderRequestReject.text_message)
}
void OrderRequestReject::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.OrderRequestReject.text_message)
}
::std::string* OrderRequestReject::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderRequestReject.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderRequestReject::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderRequestReject.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderRequestReject::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderRequestReject.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewOrder::kOrderFieldNumber;
const int NewOrder::kSuspendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewOrder::NewOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.NewOrder)
}
NewOrder::NewOrder(const NewOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order()) {
    order_ = new ::WebAPI_1::Order(*from.order_);
  } else {
    order_ = NULL;
  }
  suspend_ = from.suspend_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.NewOrder)
}

void NewOrder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&order_, 0, reinterpret_cast<char*>(&suspend_) -
    reinterpret_cast<char*>(&order_) + sizeof(suspend_));
}

NewOrder::~NewOrder() {
  // @@protoc_insertion_point(destructor:WebAPI_1.NewOrder)
  SharedDtor();
}

void NewOrder::SharedDtor() {
  if (this != internal_default_instance()) {
    delete order_;
  }
}

void NewOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[43].descriptor;
}

const NewOrder& NewOrder::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

NewOrder* NewOrder::New(::google::protobuf::Arena* arena) const {
  NewOrder* n = new NewOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.NewOrder)
  if (has_order()) {
    GOOGLE_DCHECK(order_ != NULL);
    order_->::WebAPI_1::Order::Clear();
  }
  suspend_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.NewOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WebAPI_1.Order order = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool suspend = 2;
      case 2: {
        if (tag == 16u) {
          set_has_suspend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.NewOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.NewOrder)
  return false;
#undef DO_
}

void NewOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.NewOrder)
  // required .WebAPI_1.Order order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->order_, output);
  }

  // optional bool suspend = 2;
  if (has_suspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->suspend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.NewOrder)
}

::google::protobuf::uint8* NewOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.NewOrder)
  // required .WebAPI_1.Order order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->order_, false, target);
  }

  // optional bool suspend = 2;
  if (has_suspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->suspend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.NewOrder)
  return target;
}

size_t NewOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.NewOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .WebAPI_1.Order order = 1;
  if (has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }
  // optional bool suspend = 2;
  if (has_suspend()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.NewOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.NewOrder)
    MergeFrom(*source);
  }
}

void NewOrder::MergeFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_order()) {
      mutable_order()->::WebAPI_1::Order::MergeFrom(from.order());
    }
    if (from.has_suspend()) {
      set_suspend(from.suspend());
    }
  }
}

void NewOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrder::CopyFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_order()) {
    if (!this->order_->IsInitialized()) return false;
  }
  return true;
}

void NewOrder::Swap(NewOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewOrder::InternalSwap(NewOrder* other) {
  std::swap(order_, other->order_);
  std::swap(suspend_, other->suspend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewOrder

// required .WebAPI_1.Order order = 1;
bool NewOrder::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewOrder::set_has_order() {
  _has_bits_[0] |= 0x00000001u;
}
void NewOrder::clear_has_order() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewOrder::clear_order() {
  if (order_ != NULL) order_->::WebAPI_1::Order::Clear();
  clear_has_order();
}
const ::WebAPI_1::Order& NewOrder::order() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.NewOrder.order)
  return order_ != NULL ? *order_
                         : *::WebAPI_1::Order::internal_default_instance();
}
::WebAPI_1::Order* NewOrder::mutable_order() {
  set_has_order();
  if (order_ == NULL) {
    order_ = new ::WebAPI_1::Order;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.NewOrder.order)
  return order_;
}
::WebAPI_1::Order* NewOrder::release_order() {
  // @@protoc_insertion_point(field_release:WebAPI_1.NewOrder.order)
  clear_has_order();
  ::WebAPI_1::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void NewOrder::set_allocated_order(::WebAPI_1::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    set_has_order();
  } else {
    clear_has_order();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.NewOrder.order)
}

// optional bool suspend = 2;
bool NewOrder::has_suspend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewOrder::set_has_suspend() {
  _has_bits_[0] |= 0x00000002u;
}
void NewOrder::clear_has_suspend() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewOrder::clear_suspend() {
  suspend_ = false;
  clear_has_suspend();
}
bool NewOrder::suspend() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.NewOrder.suspend)
  return suspend_;
}
void NewOrder::set_suspend(bool value) {
  set_has_suspend();
  suspend_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.NewOrder.suspend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Order::kAccountIdFieldNumber;
const int Order::kWhenUtcTimeFieldNumber;
const int Order::kContractIdFieldNumber;
const int Order::kClOrderIdFieldNumber;
const int Order::kOrderTypeFieldNumber;
const int Order::kExecInstructionFieldNumber;
const int Order::kDurationFieldNumber;
const int Order::kGoodThruDateFieldNumber;
const int Order::kSideFieldNumber;
const int Order::kLimitPriceFieldNumber;
const int Order::kStopPriceFieldNumber;
const int Order::kQtyFieldNumber;
const int Order::kVisibleQtyFieldNumber;
const int Order::kMinVisibleQtyFieldNumber;
const int Order::kIsManualFieldNumber;
const int Order::kIsCloseFieldNumber;
const int Order::kIsAggressiveFieldNumber;
const int Order::kTrailOffsetFieldNumber;
const int Order::kTrailingPegFieldNumber;
const int Order::kTriggerQtyFieldNumber;
const int Order::kActivationUtcTimeFieldNumber;
const int Order::kSuspensionUtcTimeFieldNumber;
const int Order::kUserAttributeFieldNumber;
const int Order::kGoodThruUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Order::Order()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Order)
}
Order::Order(const Order& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      exec_instruction_(from.exec_instruction_),
      user_attribute_(from.user_attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cl_order_id()) {
    cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
  }
  ::memcpy(&when_utc_time_, &from.when_utc_time_,
    reinterpret_cast<char*>(&good_thru_utc_time_) -
    reinterpret_cast<char*>(&when_utc_time_) + sizeof(good_thru_utc_time_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Order)
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&when_utc_time_, 0, reinterpret_cast<char*>(&good_thru_utc_time_) -
    reinterpret_cast<char*>(&when_utc_time_) + sizeof(good_thru_utc_time_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[44].descriptor;
}

const Order& Order::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Order* Order::New(::google::protobuf::Arena* arena) const {
  Order* n = new Order;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Order)
  exec_instruction_.Clear();
  user_attribute_.Clear();
  if (has_cl_order_id()) {
    GOOGLE_DCHECK(!cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cl_order_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&when_utc_time_, 0, reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&when_utc_time_) + sizeof(side_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&limit_price_, 0, reinterpret_cast<char*>(&is_aggressive_) -
      reinterpret_cast<char*>(&limit_price_) + sizeof(is_aggressive_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&trail_offset_, 0, reinterpret_cast<char*>(&good_thru_utc_time_) -
      reinterpret_cast<char*>(&trail_offset_) + sizeof(good_thru_utc_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 account_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 when_utc_time = 2;
      case 2: {
        if (tag == 16u) {
          set_has_when_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &when_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 contract_id = 3;
      case 3: {
        if (tag == 24u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cl_order_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_order_id().data(), this->cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Order.cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 order_type = 5;
      case 5: {
        if (tag == 40u) {
          set_has_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 exec_instruction = 6;
      case 6: {
        if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_exec_instruction())));
        } else if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exec_instruction())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 duration = 7;
      case 7: {
        if (tag == 56u) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 good_thru_date = 8;
      case 8: {
        if (tag == 64u) {
          set_has_good_thru_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &good_thru_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 side = 9;
      case 9: {
        if (tag == 72u) {
          set_has_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 limit_price = 10;
      case 10: {
        if (tag == 80u) {
          set_has_limit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 stop_price = 11;
      case 11: {
        if (tag == 88u) {
          set_has_stop_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stop_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 12;
      case 12: {
        if (tag == 96u) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visible_qty = 13;
      case 13: {
        if (tag == 104u) {
          set_has_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_visible_qty = 14;
      case 14: {
        if (tag == 112u) {
          set_has_min_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_manual = 15;
      case 15: {
        if (tag == 120u) {
          set_has_is_manual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_manual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_close = 16;
      case 16: {
        if (tag == 128u) {
          set_has_is_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_aggressive = 17;
      case 17: {
        if (tag == 136u) {
          set_has_is_aggressive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_aggressive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 trail_offset = 18;
      case 18: {
        if (tag == 144u) {
          set_has_trail_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trail_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trailing_peg = 19;
      case 19: {
        if (tag == 152u) {
          set_has_trailing_peg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trailing_peg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trigger_qty = 20;
      case 20: {
        if (tag == 160u) {
          set_has_trigger_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trigger_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 activation_utc_time = 21;
      case 21: {
        if (tag == 168u) {
          set_has_activation_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &activation_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 suspension_utc_time = 22;
      case 22: {
        if (tag == 176u) {
          set_has_suspension_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &suspension_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.UserAttribute user_attribute = 23;
      case 23: {
        if (tag == 186u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_attribute()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional sint64 good_thru_utc_time = 24;
      case 24: {
        if (tag == 192u) {
          set_has_good_thru_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &good_thru_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Order)
  return false;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Order)
  // required sint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->account_id(), output);
  }

  // required sint64 when_utc_time = 2;
  if (has_when_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->when_utc_time(), output);
  }

  // required uint32 contract_id = 3;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contract_id(), output);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Order.cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cl_order_id(), output);
  }

  // required uint32 order_type = 5;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->order_type(), output);
  }

  // repeated uint32 exec_instruction = 6;
  for (int i = 0; i < this->exec_instruction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->exec_instruction(i), output);
  }

  // required uint32 duration = 7;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  // optional sint64 good_thru_date = 8;
  if (has_good_thru_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->good_thru_date(), output);
  }

  // required uint32 side = 9;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->side(), output);
  }

  // optional sint32 limit_price = 10;
  if (has_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->limit_price(), output);
  }

  // optional sint32 stop_price = 11;
  if (has_stop_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->stop_price(), output);
  }

  // required uint32 qty = 12;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->qty(), output);
  }

  // optional uint32 visible_qty = 13;
  if (has_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->visible_qty(), output);
  }

  // optional uint32 min_visible_qty = 14;
  if (has_min_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->min_visible_qty(), output);
  }

  // required bool is_manual = 15;
  if (has_is_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_manual(), output);
  }

  // optional bool is_close = 16;
  if (has_is_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_close(), output);
  }

  // optional bool is_aggressive = 17;
  if (has_is_aggressive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_aggressive(), output);
  }

  // optional sint32 trail_offset = 18;
  if (has_trail_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->trail_offset(), output);
  }

  // optional uint32 trailing_peg = 19;
  if (has_trailing_peg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->trailing_peg(), output);
  }

  // optional uint32 trigger_qty = 20;
  if (has_trigger_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->trigger_qty(), output);
  }

  // optional sint64 activation_utc_time = 21;
  if (has_activation_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(21, this->activation_utc_time(), output);
  }

  // optional sint64 suspension_utc_time = 22;
  if (has_suspension_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(22, this->suspension_utc_time(), output);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 23;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->user_attribute(i), output);
  }

  // optional sint64 good_thru_utc_time = 24;
  if (has_good_thru_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(24, this->good_thru_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Order)
}

::google::protobuf::uint8* Order::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Order)
  // required sint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->account_id(), target);
  }

  // required sint64 when_utc_time = 2;
  if (has_when_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->when_utc_time(), target);
  }

  // required uint32 contract_id = 3;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contract_id(), target);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Order.cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cl_order_id(), target);
  }

  // required uint32 order_type = 5;
  if (has_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->order_type(), target);
  }

  // repeated uint32 exec_instruction = 6;
  for (int i = 0; i < this->exec_instruction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->exec_instruction(i), target);
  }

  // required uint32 duration = 7;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  // optional sint64 good_thru_date = 8;
  if (has_good_thru_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->good_thru_date(), target);
  }

  // required uint32 side = 9;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->side(), target);
  }

  // optional sint32 limit_price = 10;
  if (has_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->limit_price(), target);
  }

  // optional sint32 stop_price = 11;
  if (has_stop_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->stop_price(), target);
  }

  // required uint32 qty = 12;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->qty(), target);
  }

  // optional uint32 visible_qty = 13;
  if (has_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->visible_qty(), target);
  }

  // optional uint32 min_visible_qty = 14;
  if (has_min_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->min_visible_qty(), target);
  }

  // required bool is_manual = 15;
  if (has_is_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_manual(), target);
  }

  // optional bool is_close = 16;
  if (has_is_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_close(), target);
  }

  // optional bool is_aggressive = 17;
  if (has_is_aggressive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_aggressive(), target);
  }

  // optional sint32 trail_offset = 18;
  if (has_trail_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->trail_offset(), target);
  }

  // optional uint32 trailing_peg = 19;
  if (has_trailing_peg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->trailing_peg(), target);
  }

  // optional uint32 trigger_qty = 20;
  if (has_trigger_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->trigger_qty(), target);
  }

  // optional sint64 activation_utc_time = 21;
  if (has_activation_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(21, this->activation_utc_time(), target);
  }

  // optional sint64 suspension_utc_time = 22;
  if (has_suspension_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(22, this->suspension_utc_time(), target);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 23;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->user_attribute(i), false, target);
  }

  // optional sint64 good_thru_utc_time = 24;
  if (has_good_thru_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(24, this->good_thru_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Order)
  return target;
}

size_t Order::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.Order)
  size_t total_size = 0;

  if (has_cl_order_id()) {
    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());
  }

  if (has_when_utc_time()) {
    // required sint64 when_utc_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());
  }

  if (has_account_id()) {
    // required sint32 account_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  if (has_contract_id()) {
    // required uint32 contract_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  if (has_order_type()) {
    // required uint32 order_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_type());
  }

  if (has_duration()) {
    // required uint32 duration = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  if (has_side()) {
    // required uint32 side = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->side());
  }

  if (has_qty()) {
    // required uint32 qty = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  if (has_is_manual()) {
    // required bool is_manual = 15;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Order)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000024bf) ^ 0x000024bf) == 0) {  // All required fields are present.
    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());

    // required sint64 when_utc_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());

    // required sint32 account_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

    // required uint32 contract_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

    // required uint32 order_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->order_type());

    // required uint32 duration = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());

    // required uint32 side = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->side());

    // required uint32 qty = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

    // required bool is_manual = 15;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 exec_instruction = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->exec_instruction_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exec_instruction(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->exec_instruction_size());
    total_size += data_size;
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 23;
  {
    unsigned int count = this->user_attribute_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_attribute(i));
    }
  }

  // optional sint64 good_thru_date = 8;
  if (has_good_thru_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->good_thru_date());
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional sint32 limit_price = 10;
    if (has_limit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->limit_price());
    }

    // optional sint32 stop_price = 11;
    if (has_stop_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->stop_price());
    }

  }
  if (_has_bits_[8 / 32] & 6144u) {
    // optional uint32 visible_qty = 13;
    if (has_visible_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visible_qty());
    }

    // optional uint32 min_visible_qty = 14;
    if (has_min_visible_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_visible_qty());
    }

  }
  if (_has_bits_[8 / 32] & 49152u) {
    // optional bool is_close = 16;
    if (has_is_close()) {
      total_size += 2 + 1;
    }

    // optional bool is_aggressive = 17;
    if (has_is_aggressive()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional sint32 trail_offset = 18;
    if (has_trail_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trail_offset());
    }

    // optional uint32 trailing_peg = 19;
    if (has_trailing_peg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trailing_peg());
    }

    // optional uint32 trigger_qty = 20;
    if (has_trigger_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trigger_qty());
    }

    // optional sint64 activation_utc_time = 21;
    if (has_activation_utc_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->activation_utc_time());
    }

    // optional sint64 suspension_utc_time = 22;
    if (has_suspension_utc_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->suspension_utc_time());
    }

    // optional sint64 good_thru_utc_time = 24;
    if (has_good_thru_utc_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->good_thru_utc_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Order>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Order)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exec_instruction_.MergeFrom(from.exec_instruction_);
  user_attribute_.MergeFrom(from.user_attribute_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_cl_order_id()) {
      set_has_cl_order_id();
      cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
    }
    if (from.has_when_utc_time()) {
      set_when_utc_time(from.when_utc_time());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_good_thru_date()) {
      set_good_thru_date(from.good_thru_date());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_limit_price()) {
      set_limit_price(from.limit_price());
    }
    if (from.has_stop_price()) {
      set_stop_price(from.stop_price());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_visible_qty()) {
      set_visible_qty(from.visible_qty());
    }
    if (from.has_min_visible_qty()) {
      set_min_visible_qty(from.min_visible_qty());
    }
    if (from.has_is_manual()) {
      set_is_manual(from.is_manual());
    }
    if (from.has_is_close()) {
      set_is_close(from.is_close());
    }
    if (from.has_is_aggressive()) {
      set_is_aggressive(from.is_aggressive());
    }
  }
  if (from._has_bits_[16 / 32] & 4128768u) {
    if (from.has_trail_offset()) {
      set_trail_offset(from.trail_offset());
    }
    if (from.has_trailing_peg()) {
      set_trailing_peg(from.trailing_peg());
    }
    if (from.has_trigger_qty()) {
      set_trigger_qty(from.trigger_qty());
    }
    if (from.has_activation_utc_time()) {
      set_activation_utc_time(from.activation_utc_time());
    }
    if (from.has_suspension_utc_time()) {
      set_suspension_utc_time(from.suspension_utc_time());
    }
    if (from.has_good_thru_utc_time()) {
      set_good_thru_utc_time(from.good_thru_utc_time());
    }
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x000024bf) != 0x000024bf) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user_attribute())) return false;
  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  exec_instruction_.UnsafeArenaSwap(&other->exec_instruction_);
  user_attribute_.UnsafeArenaSwap(&other->user_attribute_);
  cl_order_id_.Swap(&other->cl_order_id_);
  std::swap(when_utc_time_, other->when_utc_time_);
  std::swap(account_id_, other->account_id_);
  std::swap(contract_id_, other->contract_id_);
  std::swap(order_type_, other->order_type_);
  std::swap(duration_, other->duration_);
  std::swap(good_thru_date_, other->good_thru_date_);
  std::swap(side_, other->side_);
  std::swap(limit_price_, other->limit_price_);
  std::swap(stop_price_, other->stop_price_);
  std::swap(qty_, other->qty_);
  std::swap(visible_qty_, other->visible_qty_);
  std::swap(min_visible_qty_, other->min_visible_qty_);
  std::swap(is_manual_, other->is_manual_);
  std::swap(is_close_, other->is_close_);
  std::swap(is_aggressive_, other->is_aggressive_);
  std::swap(trail_offset_, other->trail_offset_);
  std::swap(trailing_peg_, other->trailing_peg_);
  std::swap(trigger_qty_, other->trigger_qty_);
  std::swap(activation_utc_time_, other->activation_utc_time_);
  std::swap(suspension_utc_time_, other->suspension_utc_time_);
  std::swap(good_thru_utc_time_, other->good_thru_utc_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Order

// required sint32 account_id = 1;
bool Order::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Order::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Order::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Order::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 Order::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.account_id)
  return account_id_;
}
void Order::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.account_id)
}

// required sint64 when_utc_time = 2;
bool Order::has_when_utc_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Order::set_has_when_utc_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Order::clear_has_when_utc_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Order::clear_when_utc_time() {
  when_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_when_utc_time();
}
::google::protobuf::int64 Order::when_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.when_utc_time)
  return when_utc_time_;
}
void Order::set_when_utc_time(::google::protobuf::int64 value) {
  set_has_when_utc_time();
  when_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.when_utc_time)
}

// required uint32 contract_id = 3;
bool Order::has_contract_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Order::set_has_contract_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Order::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Order::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 Order::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.contract_id)
  return contract_id_;
}
void Order::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.contract_id)
}

// required string cl_order_id = 4;
bool Order::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Order::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Order::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Order::clear_cl_order_id() {
  cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cl_order_id();
}
const ::std::string& Order::cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.cl_order_id)
  return cl_order_id_.GetNoArena();
}
void Order::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.cl_order_id)
}
void Order::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Order.cl_order_id)
}
void Order::set_cl_order_id(const char* value, size_t size) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Order.cl_order_id)
}
::std::string* Order::mutable_cl_order_id() {
  set_has_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Order.cl_order_id)
  return cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Order::release_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Order.cl_order_id)
  clear_has_cl_order_id();
  return cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Order::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id != NULL) {
    set_has_cl_order_id();
  } else {
    clear_has_cl_order_id();
  }
  cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Order.cl_order_id)
}

// required uint32 order_type = 5;
bool Order::has_order_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Order::set_has_order_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Order::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Order::clear_order_type() {
  order_type_ = 0u;
  clear_has_order_type();
}
::google::protobuf::uint32 Order::order_type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.order_type)
  return order_type_;
}
void Order::set_order_type(::google::protobuf::uint32 value) {
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.order_type)
}

// repeated uint32 exec_instruction = 6;
int Order::exec_instruction_size() const {
  return exec_instruction_.size();
}
void Order::clear_exec_instruction() {
  exec_instruction_.Clear();
}
::google::protobuf::uint32 Order::exec_instruction(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.exec_instruction)
  return exec_instruction_.Get(index);
}
void Order::set_exec_instruction(int index, ::google::protobuf::uint32 value) {
  exec_instruction_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.exec_instruction)
}
void Order::add_exec_instruction(::google::protobuf::uint32 value) {
  exec_instruction_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.Order.exec_instruction)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Order::exec_instruction() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.Order.exec_instruction)
  return exec_instruction_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Order::mutable_exec_instruction() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.Order.exec_instruction)
  return &exec_instruction_;
}

// required uint32 duration = 7;
bool Order::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Order::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void Order::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void Order::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 Order::duration() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.duration)
  return duration_;
}
void Order::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.duration)
}

// optional sint64 good_thru_date = 8;
bool Order::has_good_thru_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Order::set_has_good_thru_date() {
  _has_bits_[0] |= 0x00000040u;
}
void Order::clear_has_good_thru_date() {
  _has_bits_[0] &= ~0x00000040u;
}
void Order::clear_good_thru_date() {
  good_thru_date_ = GOOGLE_LONGLONG(0);
  clear_has_good_thru_date();
}
::google::protobuf::int64 Order::good_thru_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.good_thru_date)
  return good_thru_date_;
}
void Order::set_good_thru_date(::google::protobuf::int64 value) {
  set_has_good_thru_date();
  good_thru_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.good_thru_date)
}

// required uint32 side = 9;
bool Order::has_side() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Order::set_has_side() {
  _has_bits_[0] |= 0x00000080u;
}
void Order::clear_has_side() {
  _has_bits_[0] &= ~0x00000080u;
}
void Order::clear_side() {
  side_ = 0u;
  clear_has_side();
}
::google::protobuf::uint32 Order::side() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.side)
  return side_;
}
void Order::set_side(::google::protobuf::uint32 value) {
  set_has_side();
  side_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.side)
}

// optional sint32 limit_price = 10;
bool Order::has_limit_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Order::set_has_limit_price() {
  _has_bits_[0] |= 0x00000100u;
}
void Order::clear_has_limit_price() {
  _has_bits_[0] &= ~0x00000100u;
}
void Order::clear_limit_price() {
  limit_price_ = 0;
  clear_has_limit_price();
}
::google::protobuf::int32 Order::limit_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.limit_price)
  return limit_price_;
}
void Order::set_limit_price(::google::protobuf::int32 value) {
  set_has_limit_price();
  limit_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.limit_price)
}

// optional sint32 stop_price = 11;
bool Order::has_stop_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Order::set_has_stop_price() {
  _has_bits_[0] |= 0x00000200u;
}
void Order::clear_has_stop_price() {
  _has_bits_[0] &= ~0x00000200u;
}
void Order::clear_stop_price() {
  stop_price_ = 0;
  clear_has_stop_price();
}
::google::protobuf::int32 Order::stop_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.stop_price)
  return stop_price_;
}
void Order::set_stop_price(::google::protobuf::int32 value) {
  set_has_stop_price();
  stop_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.stop_price)
}

// required uint32 qty = 12;
bool Order::has_qty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Order::set_has_qty() {
  _has_bits_[0] |= 0x00000400u;
}
void Order::clear_has_qty() {
  _has_bits_[0] &= ~0x00000400u;
}
void Order::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
::google::protobuf::uint32 Order::qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.qty)
  return qty_;
}
void Order::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.qty)
}

// optional uint32 visible_qty = 13;
bool Order::has_visible_qty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Order::set_has_visible_qty() {
  _has_bits_[0] |= 0x00000800u;
}
void Order::clear_has_visible_qty() {
  _has_bits_[0] &= ~0x00000800u;
}
void Order::clear_visible_qty() {
  visible_qty_ = 0u;
  clear_has_visible_qty();
}
::google::protobuf::uint32 Order::visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.visible_qty)
  return visible_qty_;
}
void Order::set_visible_qty(::google::protobuf::uint32 value) {
  set_has_visible_qty();
  visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.visible_qty)
}

// optional uint32 min_visible_qty = 14;
bool Order::has_min_visible_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Order::set_has_min_visible_qty() {
  _has_bits_[0] |= 0x00001000u;
}
void Order::clear_has_min_visible_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
void Order::clear_min_visible_qty() {
  min_visible_qty_ = 0u;
  clear_has_min_visible_qty();
}
::google::protobuf::uint32 Order::min_visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.min_visible_qty)
  return min_visible_qty_;
}
void Order::set_min_visible_qty(::google::protobuf::uint32 value) {
  set_has_min_visible_qty();
  min_visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.min_visible_qty)
}

// required bool is_manual = 15;
bool Order::has_is_manual() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Order::set_has_is_manual() {
  _has_bits_[0] |= 0x00002000u;
}
void Order::clear_has_is_manual() {
  _has_bits_[0] &= ~0x00002000u;
}
void Order::clear_is_manual() {
  is_manual_ = false;
  clear_has_is_manual();
}
bool Order::is_manual() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.is_manual)
  return is_manual_;
}
void Order::set_is_manual(bool value) {
  set_has_is_manual();
  is_manual_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.is_manual)
}

// optional bool is_close = 16;
bool Order::has_is_close() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Order::set_has_is_close() {
  _has_bits_[0] |= 0x00004000u;
}
void Order::clear_has_is_close() {
  _has_bits_[0] &= ~0x00004000u;
}
void Order::clear_is_close() {
  is_close_ = false;
  clear_has_is_close();
}
bool Order::is_close() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.is_close)
  return is_close_;
}
void Order::set_is_close(bool value) {
  set_has_is_close();
  is_close_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.is_close)
}

// optional bool is_aggressive = 17;
bool Order::has_is_aggressive() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Order::set_has_is_aggressive() {
  _has_bits_[0] |= 0x00008000u;
}
void Order::clear_has_is_aggressive() {
  _has_bits_[0] &= ~0x00008000u;
}
void Order::clear_is_aggressive() {
  is_aggressive_ = false;
  clear_has_is_aggressive();
}
bool Order::is_aggressive() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.is_aggressive)
  return is_aggressive_;
}
void Order::set_is_aggressive(bool value) {
  set_has_is_aggressive();
  is_aggressive_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.is_aggressive)
}

// optional sint32 trail_offset = 18;
bool Order::has_trail_offset() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Order::set_has_trail_offset() {
  _has_bits_[0] |= 0x00010000u;
}
void Order::clear_has_trail_offset() {
  _has_bits_[0] &= ~0x00010000u;
}
void Order::clear_trail_offset() {
  trail_offset_ = 0;
  clear_has_trail_offset();
}
::google::protobuf::int32 Order::trail_offset() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.trail_offset)
  return trail_offset_;
}
void Order::set_trail_offset(::google::protobuf::int32 value) {
  set_has_trail_offset();
  trail_offset_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.trail_offset)
}

// optional uint32 trailing_peg = 19;
bool Order::has_trailing_peg() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Order::set_has_trailing_peg() {
  _has_bits_[0] |= 0x00020000u;
}
void Order::clear_has_trailing_peg() {
  _has_bits_[0] &= ~0x00020000u;
}
void Order::clear_trailing_peg() {
  trailing_peg_ = 0u;
  clear_has_trailing_peg();
}
::google::protobuf::uint32 Order::trailing_peg() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.trailing_peg)
  return trailing_peg_;
}
void Order::set_trailing_peg(::google::protobuf::uint32 value) {
  set_has_trailing_peg();
  trailing_peg_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.trailing_peg)
}

// optional uint32 trigger_qty = 20;
bool Order::has_trigger_qty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Order::set_has_trigger_qty() {
  _has_bits_[0] |= 0x00040000u;
}
void Order::clear_has_trigger_qty() {
  _has_bits_[0] &= ~0x00040000u;
}
void Order::clear_trigger_qty() {
  trigger_qty_ = 0u;
  clear_has_trigger_qty();
}
::google::protobuf::uint32 Order::trigger_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.trigger_qty)
  return trigger_qty_;
}
void Order::set_trigger_qty(::google::protobuf::uint32 value) {
  set_has_trigger_qty();
  trigger_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.trigger_qty)
}

// optional sint64 activation_utc_time = 21;
bool Order::has_activation_utc_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Order::set_has_activation_utc_time() {
  _has_bits_[0] |= 0x00080000u;
}
void Order::clear_has_activation_utc_time() {
  _has_bits_[0] &= ~0x00080000u;
}
void Order::clear_activation_utc_time() {
  activation_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_activation_utc_time();
}
::google::protobuf::int64 Order::activation_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.activation_utc_time)
  return activation_utc_time_;
}
void Order::set_activation_utc_time(::google::protobuf::int64 value) {
  set_has_activation_utc_time();
  activation_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.activation_utc_time)
}

// optional sint64 suspension_utc_time = 22;
bool Order::has_suspension_utc_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Order::set_has_suspension_utc_time() {
  _has_bits_[0] |= 0x00100000u;
}
void Order::clear_has_suspension_utc_time() {
  _has_bits_[0] &= ~0x00100000u;
}
void Order::clear_suspension_utc_time() {
  suspension_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_suspension_utc_time();
}
::google::protobuf::int64 Order::suspension_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.suspension_utc_time)
  return suspension_utc_time_;
}
void Order::set_suspension_utc_time(::google::protobuf::int64 value) {
  set_has_suspension_utc_time();
  suspension_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.suspension_utc_time)
}

// repeated .WebAPI_1.UserAttribute user_attribute = 23;
int Order::user_attribute_size() const {
  return user_attribute_.size();
}
void Order::clear_user_attribute() {
  user_attribute_.Clear();
}
const ::WebAPI_1::UserAttribute& Order::user_attribute(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.user_attribute)
  return user_attribute_.Get(index);
}
::WebAPI_1::UserAttribute* Order::mutable_user_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Order.user_attribute)
  return user_attribute_.Mutable(index);
}
::WebAPI_1::UserAttribute* Order::add_user_attribute() {
  // @@protoc_insertion_point(field_add:WebAPI_1.Order.user_attribute)
  return user_attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >*
Order::mutable_user_attribute() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.Order.user_attribute)
  return &user_attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >&
Order::user_attribute() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.Order.user_attribute)
  return user_attribute_;
}

// optional sint64 good_thru_utc_time = 24;
bool Order::has_good_thru_utc_time() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Order::set_has_good_thru_utc_time() {
  _has_bits_[0] |= 0x00200000u;
}
void Order::clear_has_good_thru_utc_time() {
  _has_bits_[0] &= ~0x00200000u;
}
void Order::clear_good_thru_utc_time() {
  good_thru_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_good_thru_utc_time();
}
::google::protobuf::int64 Order::good_thru_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Order.good_thru_utc_time)
  return good_thru_utc_time_;
}
void Order::set_good_thru_utc_time(::google::protobuf::int64 value) {
  set_has_good_thru_utc_time();
  good_thru_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Order.good_thru_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserAttribute::kNameFieldNumber;
const int UserAttribute::kValueFieldNumber;
const int UserAttribute::kDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserAttribute::UserAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.UserAttribute)
}
UserAttribute::UserAttribute(const UserAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  delete__ = from.delete__;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.UserAttribute)
}

void UserAttribute::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delete__ = false;
}

UserAttribute::~UserAttribute() {
  // @@protoc_insertion_point(destructor:WebAPI_1.UserAttribute)
  SharedDtor();
}

void UserAttribute::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[45].descriptor;
}

const UserAttribute& UserAttribute::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

UserAttribute* UserAttribute::New(::google::protobuf::Arena* arena) const {
  UserAttribute* n = new UserAttribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.UserAttribute)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  delete__ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.UserAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserAttribute.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.UserAttribute.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delete = 3;
      case 3: {
        if (tag == 24u) {
          set_has_delete_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.UserAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.UserAttribute)
  return false;
#undef DO_
}

void UserAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.UserAttribute)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserAttribute.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserAttribute.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional bool delete = 3;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->delete_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.UserAttribute)
}

::google::protobuf::uint8* UserAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.UserAttribute)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserAttribute.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.UserAttribute.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional bool delete = 3;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->delete_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.UserAttribute)
  return target;
}

size_t UserAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.UserAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional bool delete = 3;
    if (has_delete_()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.UserAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.UserAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.UserAttribute)
    MergeFrom(*source);
  }
}

void UserAttribute::MergeFrom(const UserAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.UserAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_delete_()) {
      set_delete_(from.delete_());
    }
  }
}

void UserAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.UserAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAttribute::CopyFrom(const UserAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.UserAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserAttribute::Swap(UserAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserAttribute::InternalSwap(UserAttribute* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(delete__, other->delete__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserAttribute

// required string name = 1;
bool UserAttribute::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserAttribute::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void UserAttribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& UserAttribute::name() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserAttribute.name)
  return name_.GetNoArena();
}
void UserAttribute::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserAttribute.name)
}
void UserAttribute::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserAttribute.name)
}
void UserAttribute::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserAttribute.name)
}
::std::string* UserAttribute::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserAttribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserAttribute::release_name() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserAttribute.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserAttribute.name)
}

// optional string value = 2;
bool UserAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserAttribute::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& UserAttribute::value() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserAttribute.value)
  return value_.GetNoArena();
}
void UserAttribute::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.UserAttribute.value)
}
void UserAttribute::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.UserAttribute.value)
}
void UserAttribute::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.UserAttribute.value)
}
::std::string* UserAttribute::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.UserAttribute.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserAttribute::release_value() {
  // @@protoc_insertion_point(field_release:WebAPI_1.UserAttribute.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserAttribute::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.UserAttribute.value)
}

// optional bool delete = 3;
bool UserAttribute::has_delete_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserAttribute::set_has_delete_() {
  _has_bits_[0] |= 0x00000004u;
}
void UserAttribute::clear_has_delete_() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserAttribute::clear_delete_() {
  delete__ = false;
  clear_has_delete_();
}
bool UserAttribute::delete_() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.UserAttribute.delete)
  return delete__;
}
void UserAttribute::set_delete_(bool value) {
  set_has_delete_();
  delete__ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.UserAttribute.delete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyOrder::kOrderIdFieldNumber;
const int ModifyOrder::kAccountIdFieldNumber;
const int ModifyOrder::kOrigClOrderIdFieldNumber;
const int ModifyOrder::kClOrderIdFieldNumber;
const int ModifyOrder::kWhenUtcTimeFieldNumber;
const int ModifyOrder::kQtyFieldNumber;
const int ModifyOrder::kVisibleQtyFieldNumber;
const int ModifyOrder::kMinVisibleQtyFieldNumber;
const int ModifyOrder::kLimitPriceFieldNumber;
const int ModifyOrder::kStopPriceFieldNumber;
const int ModifyOrder::kActivationUtcTimeFieldNumber;
const int ModifyOrder::kRemoveActivationTimeFieldNumber;
const int ModifyOrder::kSuspensionUtcTimeFieldNumber;
const int ModifyOrder::kRemoveSuspensionUtcTimeFieldNumber;
const int ModifyOrder::kDurationFieldNumber;
const int ModifyOrder::kGoodThruDateFieldNumber;
const int ModifyOrder::kGoodThruUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyOrder::ModifyOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ModifyOrder)
}
ModifyOrder::ModifyOrder(const ModifyOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orig_cl_order_id()) {
    orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
  }
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cl_order_id()) {
    cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&good_thru_utc_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(good_thru_utc_time_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ModifyOrder)
}

void ModifyOrder::SharedCtor() {
  _cached_size_ = 0;
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&good_thru_utc_time_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(good_thru_utc_time_));
}

ModifyOrder::~ModifyOrder() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ModifyOrder)
  SharedDtor();
}

void ModifyOrder::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModifyOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[46].descriptor;
}

const ModifyOrder& ModifyOrder::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ModifyOrder* ModifyOrder::New(::google::protobuf::Arena* arena) const {
  ModifyOrder* n = new ModifyOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ModifyOrder)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_order_id()) {
      GOOGLE_DCHECK(!order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_orig_cl_order_id()) {
      GOOGLE_DCHECK(!orig_cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orig_cl_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_cl_order_id()) {
      GOOGLE_DCHECK(!cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cl_order_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&min_visible_qty_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(min_visible_qty_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&limit_price_, 0, reinterpret_cast<char*>(&good_thru_date_) -
      reinterpret_cast<char*>(&limit_price_) + sizeof(good_thru_date_));
  }
  good_thru_utc_time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ModifyOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string order_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ModifyOrder.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 account_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orig_cl_order_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ModifyOrder.orig_cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cl_order_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_order_id().data(), this->cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ModifyOrder.cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 when_utc_time = 5;
      case 5: {
        if (tag == 40u) {
          set_has_when_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &when_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qty = 6;
      case 6: {
        if (tag == 48u) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visible_qty = 7;
      case 7: {
        if (tag == 56u) {
          set_has_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_visible_qty = 8;
      case 8: {
        if (tag == 64u) {
          set_has_min_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 limit_price = 9;
      case 9: {
        if (tag == 72u) {
          set_has_limit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 stop_price = 10;
      case 10: {
        if (tag == 80u) {
          set_has_stop_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stop_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 activation_utc_time = 11;
      case 11: {
        if (tag == 88u) {
          set_has_activation_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &activation_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remove_activation_time = 12;
      case 12: {
        if (tag == 96u) {
          set_has_remove_activation_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_activation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 suspension_utc_time = 13;
      case 13: {
        if (tag == 104u) {
          set_has_suspension_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &suspension_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remove_suspension_utc_time = 14;
      case 14: {
        if (tag == 112u) {
          set_has_remove_suspension_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_suspension_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 15;
      case 15: {
        if (tag == 120u) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 good_thru_date = 16;
      case 16: {
        if (tag == 128u) {
          set_has_good_thru_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &good_thru_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 good_thru_utc_time = 17;
      case 17: {
        if (tag == 136u) {
          set_has_good_thru_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &good_thru_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ModifyOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ModifyOrder)
  return false;
#undef DO_
}

void ModifyOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ModifyOrder)
  // required string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyOrder.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->order_id(), output);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->account_id(), output);
  }

  // required string orig_cl_order_id = 3;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyOrder.orig_cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orig_cl_order_id(), output);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyOrder.cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cl_order_id(), output);
  }

  // required sint64 when_utc_time = 5;
  if (has_when_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->when_utc_time(), output);
  }

  // optional uint32 qty = 6;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->qty(), output);
  }

  // optional uint32 visible_qty = 7;
  if (has_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->visible_qty(), output);
  }

  // optional uint32 min_visible_qty = 8;
  if (has_min_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->min_visible_qty(), output);
  }

  // optional sint32 limit_price = 9;
  if (has_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->limit_price(), output);
  }

  // optional sint32 stop_price = 10;
  if (has_stop_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->stop_price(), output);
  }

  // optional sint64 activation_utc_time = 11;
  if (has_activation_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->activation_utc_time(), output);
  }

  // optional bool remove_activation_time = 12;
  if (has_remove_activation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->remove_activation_time(), output);
  }

  // optional sint64 suspension_utc_time = 13;
  if (has_suspension_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->suspension_utc_time(), output);
  }

  // optional bool remove_suspension_utc_time = 14;
  if (has_remove_suspension_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->remove_suspension_utc_time(), output);
  }

  // optional uint32 duration = 15;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->duration(), output);
  }

  // optional sint64 good_thru_date = 16;
  if (has_good_thru_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(16, this->good_thru_date(), output);
  }

  // optional sint64 good_thru_utc_time = 17;
  if (has_good_thru_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(17, this->good_thru_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ModifyOrder)
}

::google::protobuf::uint8* ModifyOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ModifyOrder)
  // required string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyOrder.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->account_id(), target);
  }

  // required string orig_cl_order_id = 3;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyOrder.orig_cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orig_cl_order_id(), target);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyOrder.cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cl_order_id(), target);
  }

  // required sint64 when_utc_time = 5;
  if (has_when_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->when_utc_time(), target);
  }

  // optional uint32 qty = 6;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->qty(), target);
  }

  // optional uint32 visible_qty = 7;
  if (has_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->visible_qty(), target);
  }

  // optional uint32 min_visible_qty = 8;
  if (has_min_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->min_visible_qty(), target);
  }

  // optional sint32 limit_price = 9;
  if (has_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->limit_price(), target);
  }

  // optional sint32 stop_price = 10;
  if (has_stop_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->stop_price(), target);
  }

  // optional sint64 activation_utc_time = 11;
  if (has_activation_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(11, this->activation_utc_time(), target);
  }

  // optional bool remove_activation_time = 12;
  if (has_remove_activation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->remove_activation_time(), target);
  }

  // optional sint64 suspension_utc_time = 13;
  if (has_suspension_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(13, this->suspension_utc_time(), target);
  }

  // optional bool remove_suspension_utc_time = 14;
  if (has_remove_suspension_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->remove_suspension_utc_time(), target);
  }

  // optional uint32 duration = 15;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->duration(), target);
  }

  // optional sint64 good_thru_date = 16;
  if (has_good_thru_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(16, this->good_thru_date(), target);
  }

  // optional sint64 good_thru_utc_time = 17;
  if (has_good_thru_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(17, this->good_thru_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ModifyOrder)
  return target;
}

size_t ModifyOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.ModifyOrder)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_orig_cl_order_id()) {
    // required string orig_cl_order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_cl_order_id());
  }

  if (has_cl_order_id()) {
    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());
  }

  if (has_account_id()) {
    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  if (has_when_utc_time()) {
    // required sint64 when_utc_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());
  }

  return total_size;
}
size_t ModifyOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ModifyOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required string order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required string orig_cl_order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_cl_order_id());

    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());

    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

    // required sint64 when_utc_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 qty = 6;
  if (has_qty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional uint32 visible_qty = 7;
    if (has_visible_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visible_qty());
    }

    // optional uint32 min_visible_qty = 8;
    if (has_min_visible_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_visible_qty());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional sint32 limit_price = 9;
    if (has_limit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->limit_price());
    }

    // optional sint32 stop_price = 10;
    if (has_stop_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->stop_price());
    }

    // optional sint64 activation_utc_time = 11;
    if (has_activation_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->activation_utc_time());
    }

    // optional sint64 suspension_utc_time = 13;
    if (has_suspension_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->suspension_utc_time());
    }

    // optional bool remove_activation_time = 12;
    if (has_remove_activation_time()) {
      total_size += 1 + 1;
    }

    // optional bool remove_suspension_utc_time = 14;
    if (has_remove_suspension_utc_time()) {
      total_size += 1 + 1;
    }

    // optional uint32 duration = 15;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional sint64 good_thru_date = 16;
    if (has_good_thru_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->good_thru_date());
    }

  }
  // optional sint64 good_thru_utc_time = 17;
  if (has_good_thru_utc_time()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->good_thru_utc_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ModifyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ModifyOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ModifyOrder)
    MergeFrom(*source);
  }
}

void ModifyOrder::MergeFrom(const ModifyOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ModifyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_order_id()) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (from.has_orig_cl_order_id()) {
      set_has_orig_cl_order_id();
      orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
    }
    if (from.has_cl_order_id()) {
      set_has_cl_order_id();
      cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_when_utc_time()) {
      set_when_utc_time(from.when_utc_time());
    }
    if (from.has_visible_qty()) {
      set_visible_qty(from.visible_qty());
    }
    if (from.has_min_visible_qty()) {
      set_min_visible_qty(from.min_visible_qty());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_limit_price()) {
      set_limit_price(from.limit_price());
    }
    if (from.has_stop_price()) {
      set_stop_price(from.stop_price());
    }
    if (from.has_activation_utc_time()) {
      set_activation_utc_time(from.activation_utc_time());
    }
    if (from.has_suspension_utc_time()) {
      set_suspension_utc_time(from.suspension_utc_time());
    }
    if (from.has_remove_activation_time()) {
      set_remove_activation_time(from.remove_activation_time());
    }
    if (from.has_remove_suspension_utc_time()) {
      set_remove_suspension_utc_time(from.remove_suspension_utc_time());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_good_thru_date()) {
      set_good_thru_date(from.good_thru_date());
    }
  }
  if (from.has_good_thru_utc_time()) {
    set_good_thru_utc_time(from.good_thru_utc_time());
  }
}

void ModifyOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ModifyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyOrder::CopyFrom(const ModifyOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ModifyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  return true;
}

void ModifyOrder::Swap(ModifyOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyOrder::InternalSwap(ModifyOrder* other) {
  order_id_.Swap(&other->order_id_);
  orig_cl_order_id_.Swap(&other->orig_cl_order_id_);
  cl_order_id_.Swap(&other->cl_order_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(qty_, other->qty_);
  std::swap(when_utc_time_, other->when_utc_time_);
  std::swap(visible_qty_, other->visible_qty_);
  std::swap(min_visible_qty_, other->min_visible_qty_);
  std::swap(limit_price_, other->limit_price_);
  std::swap(stop_price_, other->stop_price_);
  std::swap(activation_utc_time_, other->activation_utc_time_);
  std::swap(suspension_utc_time_, other->suspension_utc_time_);
  std::swap(remove_activation_time_, other->remove_activation_time_);
  std::swap(remove_suspension_utc_time_, other->remove_suspension_utc_time_);
  std::swap(duration_, other->duration_);
  std::swap(good_thru_date_, other->good_thru_date_);
  std::swap(good_thru_utc_time_, other->good_thru_utc_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyOrder

// required string order_id = 1;
bool ModifyOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifyOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifyOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyOrder::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
const ::std::string& ModifyOrder::order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.order_id)
  return order_id_.GetNoArena();
}
void ModifyOrder::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.order_id)
}
void ModifyOrder::set_order_id(const char* value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ModifyOrder.order_id)
}
void ModifyOrder::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ModifyOrder.order_id)
}
::std::string* ModifyOrder::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ModifyOrder.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModifyOrder::release_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ModifyOrder.order_id)
  clear_has_order_id();
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyOrder::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ModifyOrder.order_id)
}

// required sint32 account_id = 2;
bool ModifyOrder::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModifyOrder::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ModifyOrder::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModifyOrder::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 ModifyOrder::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.account_id)
  return account_id_;
}
void ModifyOrder::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.account_id)
}

// required string orig_cl_order_id = 3;
bool ModifyOrder::has_orig_cl_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModifyOrder::set_has_orig_cl_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ModifyOrder::clear_has_orig_cl_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModifyOrder::clear_orig_cl_order_id() {
  orig_cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orig_cl_order_id();
}
const ::std::string& ModifyOrder::orig_cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.orig_cl_order_id)
  return orig_cl_order_id_.GetNoArena();
}
void ModifyOrder::set_orig_cl_order_id(const ::std::string& value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.orig_cl_order_id)
}
void ModifyOrder::set_orig_cl_order_id(const char* value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ModifyOrder.orig_cl_order_id)
}
void ModifyOrder::set_orig_cl_order_id(const char* value, size_t size) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ModifyOrder.orig_cl_order_id)
}
::std::string* ModifyOrder::mutable_orig_cl_order_id() {
  set_has_orig_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ModifyOrder.orig_cl_order_id)
  return orig_cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModifyOrder::release_orig_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ModifyOrder.orig_cl_order_id)
  clear_has_orig_cl_order_id();
  return orig_cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyOrder::set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id) {
  if (orig_cl_order_id != NULL) {
    set_has_orig_cl_order_id();
  } else {
    clear_has_orig_cl_order_id();
  }
  orig_cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orig_cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ModifyOrder.orig_cl_order_id)
}

// required string cl_order_id = 4;
bool ModifyOrder::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModifyOrder::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ModifyOrder::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModifyOrder::clear_cl_order_id() {
  cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cl_order_id();
}
const ::std::string& ModifyOrder::cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.cl_order_id)
  return cl_order_id_.GetNoArena();
}
void ModifyOrder::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.cl_order_id)
}
void ModifyOrder::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ModifyOrder.cl_order_id)
}
void ModifyOrder::set_cl_order_id(const char* value, size_t size) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ModifyOrder.cl_order_id)
}
::std::string* ModifyOrder::mutable_cl_order_id() {
  set_has_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ModifyOrder.cl_order_id)
  return cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModifyOrder::release_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ModifyOrder.cl_order_id)
  clear_has_cl_order_id();
  return cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyOrder::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id != NULL) {
    set_has_cl_order_id();
  } else {
    clear_has_cl_order_id();
  }
  cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ModifyOrder.cl_order_id)
}

// required sint64 when_utc_time = 5;
bool ModifyOrder::has_when_utc_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModifyOrder::set_has_when_utc_time() {
  _has_bits_[0] |= 0x00000020u;
}
void ModifyOrder::clear_has_when_utc_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModifyOrder::clear_when_utc_time() {
  when_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_when_utc_time();
}
::google::protobuf::int64 ModifyOrder::when_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.when_utc_time)
  return when_utc_time_;
}
void ModifyOrder::set_when_utc_time(::google::protobuf::int64 value) {
  set_has_when_utc_time();
  when_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.when_utc_time)
}

// optional uint32 qty = 6;
bool ModifyOrder::has_qty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModifyOrder::set_has_qty() {
  _has_bits_[0] |= 0x00000010u;
}
void ModifyOrder::clear_has_qty() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModifyOrder::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
::google::protobuf::uint32 ModifyOrder::qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.qty)
  return qty_;
}
void ModifyOrder::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.qty)
}

// optional uint32 visible_qty = 7;
bool ModifyOrder::has_visible_qty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModifyOrder::set_has_visible_qty() {
  _has_bits_[0] |= 0x00000040u;
}
void ModifyOrder::clear_has_visible_qty() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModifyOrder::clear_visible_qty() {
  visible_qty_ = 0u;
  clear_has_visible_qty();
}
::google::protobuf::uint32 ModifyOrder::visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.visible_qty)
  return visible_qty_;
}
void ModifyOrder::set_visible_qty(::google::protobuf::uint32 value) {
  set_has_visible_qty();
  visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.visible_qty)
}

// optional uint32 min_visible_qty = 8;
bool ModifyOrder::has_min_visible_qty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModifyOrder::set_has_min_visible_qty() {
  _has_bits_[0] |= 0x00000080u;
}
void ModifyOrder::clear_has_min_visible_qty() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModifyOrder::clear_min_visible_qty() {
  min_visible_qty_ = 0u;
  clear_has_min_visible_qty();
}
::google::protobuf::uint32 ModifyOrder::min_visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.min_visible_qty)
  return min_visible_qty_;
}
void ModifyOrder::set_min_visible_qty(::google::protobuf::uint32 value) {
  set_has_min_visible_qty();
  min_visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.min_visible_qty)
}

// optional sint32 limit_price = 9;
bool ModifyOrder::has_limit_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModifyOrder::set_has_limit_price() {
  _has_bits_[0] |= 0x00000100u;
}
void ModifyOrder::clear_has_limit_price() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModifyOrder::clear_limit_price() {
  limit_price_ = 0;
  clear_has_limit_price();
}
::google::protobuf::int32 ModifyOrder::limit_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.limit_price)
  return limit_price_;
}
void ModifyOrder::set_limit_price(::google::protobuf::int32 value) {
  set_has_limit_price();
  limit_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.limit_price)
}

// optional sint32 stop_price = 10;
bool ModifyOrder::has_stop_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModifyOrder::set_has_stop_price() {
  _has_bits_[0] |= 0x00000200u;
}
void ModifyOrder::clear_has_stop_price() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModifyOrder::clear_stop_price() {
  stop_price_ = 0;
  clear_has_stop_price();
}
::google::protobuf::int32 ModifyOrder::stop_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.stop_price)
  return stop_price_;
}
void ModifyOrder::set_stop_price(::google::protobuf::int32 value) {
  set_has_stop_price();
  stop_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.stop_price)
}

// optional sint64 activation_utc_time = 11;
bool ModifyOrder::has_activation_utc_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModifyOrder::set_has_activation_utc_time() {
  _has_bits_[0] |= 0x00000400u;
}
void ModifyOrder::clear_has_activation_utc_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModifyOrder::clear_activation_utc_time() {
  activation_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_activation_utc_time();
}
::google::protobuf::int64 ModifyOrder::activation_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.activation_utc_time)
  return activation_utc_time_;
}
void ModifyOrder::set_activation_utc_time(::google::protobuf::int64 value) {
  set_has_activation_utc_time();
  activation_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.activation_utc_time)
}

// optional bool remove_activation_time = 12;
bool ModifyOrder::has_remove_activation_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModifyOrder::set_has_remove_activation_time() {
  _has_bits_[0] |= 0x00001000u;
}
void ModifyOrder::clear_has_remove_activation_time() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModifyOrder::clear_remove_activation_time() {
  remove_activation_time_ = false;
  clear_has_remove_activation_time();
}
bool ModifyOrder::remove_activation_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.remove_activation_time)
  return remove_activation_time_;
}
void ModifyOrder::set_remove_activation_time(bool value) {
  set_has_remove_activation_time();
  remove_activation_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.remove_activation_time)
}

// optional sint64 suspension_utc_time = 13;
bool ModifyOrder::has_suspension_utc_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModifyOrder::set_has_suspension_utc_time() {
  _has_bits_[0] |= 0x00000800u;
}
void ModifyOrder::clear_has_suspension_utc_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModifyOrder::clear_suspension_utc_time() {
  suspension_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_suspension_utc_time();
}
::google::protobuf::int64 ModifyOrder::suspension_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.suspension_utc_time)
  return suspension_utc_time_;
}
void ModifyOrder::set_suspension_utc_time(::google::protobuf::int64 value) {
  set_has_suspension_utc_time();
  suspension_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.suspension_utc_time)
}

// optional bool remove_suspension_utc_time = 14;
bool ModifyOrder::has_remove_suspension_utc_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModifyOrder::set_has_remove_suspension_utc_time() {
  _has_bits_[0] |= 0x00002000u;
}
void ModifyOrder::clear_has_remove_suspension_utc_time() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModifyOrder::clear_remove_suspension_utc_time() {
  remove_suspension_utc_time_ = false;
  clear_has_remove_suspension_utc_time();
}
bool ModifyOrder::remove_suspension_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.remove_suspension_utc_time)
  return remove_suspension_utc_time_;
}
void ModifyOrder::set_remove_suspension_utc_time(bool value) {
  set_has_remove_suspension_utc_time();
  remove_suspension_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.remove_suspension_utc_time)
}

// optional uint32 duration = 15;
bool ModifyOrder::has_duration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModifyOrder::set_has_duration() {
  _has_bits_[0] |= 0x00004000u;
}
void ModifyOrder::clear_has_duration() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModifyOrder::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 ModifyOrder::duration() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.duration)
  return duration_;
}
void ModifyOrder::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.duration)
}

// optional sint64 good_thru_date = 16;
bool ModifyOrder::has_good_thru_date() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModifyOrder::set_has_good_thru_date() {
  _has_bits_[0] |= 0x00008000u;
}
void ModifyOrder::clear_has_good_thru_date() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModifyOrder::clear_good_thru_date() {
  good_thru_date_ = GOOGLE_LONGLONG(0);
  clear_has_good_thru_date();
}
::google::protobuf::int64 ModifyOrder::good_thru_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.good_thru_date)
  return good_thru_date_;
}
void ModifyOrder::set_good_thru_date(::google::protobuf::int64 value) {
  set_has_good_thru_date();
  good_thru_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.good_thru_date)
}

// optional sint64 good_thru_utc_time = 17;
bool ModifyOrder::has_good_thru_utc_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModifyOrder::set_has_good_thru_utc_time() {
  _has_bits_[0] |= 0x00010000u;
}
void ModifyOrder::clear_has_good_thru_utc_time() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModifyOrder::clear_good_thru_utc_time() {
  good_thru_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_good_thru_utc_time();
}
::google::protobuf::int64 ModifyOrder::good_thru_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyOrder.good_thru_utc_time)
  return good_thru_utc_time_;
}
void ModifyOrder::set_good_thru_utc_time(::google::protobuf::int64 value) {
  set_has_good_thru_utc_time();
  good_thru_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyOrder.good_thru_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelOrder::kOrderIdFieldNumber;
const int CancelOrder::kAccountIdFieldNumber;
const int CancelOrder::kOrigClOrderIdFieldNumber;
const int CancelOrder::kClOrderIdFieldNumber;
const int CancelOrder::kWhenUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelOrder::CancelOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.CancelOrder)
}
CancelOrder::CancelOrder(const CancelOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orig_cl_order_id()) {
    orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
  }
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cl_order_id()) {
    cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
  }
  ::memcpy(&when_utc_time_, &from.when_utc_time_,
    reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&when_utc_time_) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.CancelOrder)
}

void CancelOrder::SharedCtor() {
  _cached_size_ = 0;
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&when_utc_time_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&when_utc_time_) + sizeof(account_id_));
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:WebAPI_1.CancelOrder)
  SharedDtor();
}

void CancelOrder::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[47].descriptor;
}

const CancelOrder& CancelOrder::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

CancelOrder* CancelOrder::New(::google::protobuf::Arena* arena) const {
  CancelOrder* n = new CancelOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.CancelOrder)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_order_id()) {
      GOOGLE_DCHECK(!order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_orig_cl_order_id()) {
      GOOGLE_DCHECK(!orig_cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orig_cl_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_cl_order_id()) {
      GOOGLE_DCHECK(!cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cl_order_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&when_utc_time_, 0, reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&when_utc_time_) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CancelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.CancelOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string order_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.CancelOrder.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 account_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orig_cl_order_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.CancelOrder.orig_cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cl_order_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_order_id().data(), this->cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.CancelOrder.cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 when_utc_time = 5;
      case 5: {
        if (tag == 40u) {
          set_has_when_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &when_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.CancelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.CancelOrder)
  return false;
#undef DO_
}

void CancelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.CancelOrder)
  // required string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CancelOrder.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->order_id(), output);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->account_id(), output);
  }

  // required string orig_cl_order_id = 3;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CancelOrder.orig_cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orig_cl_order_id(), output);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CancelOrder.cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cl_order_id(), output);
  }

  // required sint64 when_utc_time = 5;
  if (has_when_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->when_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.CancelOrder)
}

::google::protobuf::uint8* CancelOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.CancelOrder)
  // required string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CancelOrder.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->account_id(), target);
  }

  // required string orig_cl_order_id = 3;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CancelOrder.orig_cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orig_cl_order_id(), target);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CancelOrder.cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cl_order_id(), target);
  }

  // required sint64 when_utc_time = 5;
  if (has_when_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->when_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.CancelOrder)
  return target;
}

size_t CancelOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.CancelOrder)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_orig_cl_order_id()) {
    // required string orig_cl_order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_cl_order_id());
  }

  if (has_cl_order_id()) {
    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());
  }

  if (has_when_utc_time()) {
    // required sint64 when_utc_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());
  }

  if (has_account_id()) {
    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  return total_size;
}
size_t CancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.CancelOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required string orig_cl_order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_cl_order_id());

    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());

    // required sint64 when_utc_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());

    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.CancelOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.CancelOrder)
    MergeFrom(*source);
  }
}

void CancelOrder::MergeFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_order_id()) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (from.has_orig_cl_order_id()) {
      set_has_orig_cl_order_id();
      orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
    }
    if (from.has_cl_order_id()) {
      set_has_cl_order_id();
      cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
    }
    if (from.has_when_utc_time()) {
      set_when_utc_time(from.when_utc_time());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
}

void CancelOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CancelOrder::Swap(CancelOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelOrder::InternalSwap(CancelOrder* other) {
  order_id_.Swap(&other->order_id_);
  orig_cl_order_id_.Swap(&other->orig_cl_order_id_);
  cl_order_id_.Swap(&other->cl_order_id_);
  std::swap(when_utc_time_, other->when_utc_time_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CancelOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CancelOrder

// required string order_id = 1;
bool CancelOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CancelOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CancelOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CancelOrder::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
const ::std::string& CancelOrder::order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CancelOrder.order_id)
  return order_id_.GetNoArena();
}
void CancelOrder::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.CancelOrder.order_id)
}
void CancelOrder::set_order_id(const char* value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.CancelOrder.order_id)
}
void CancelOrder::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.CancelOrder.order_id)
}
::std::string* CancelOrder::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.CancelOrder.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelOrder::release_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.CancelOrder.order_id)
  clear_has_order_id();
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelOrder::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.CancelOrder.order_id)
}

// required sint32 account_id = 2;
bool CancelOrder::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CancelOrder::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CancelOrder::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CancelOrder::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 CancelOrder::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CancelOrder.account_id)
  return account_id_;
}
void CancelOrder::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.CancelOrder.account_id)
}

// required string orig_cl_order_id = 3;
bool CancelOrder::has_orig_cl_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CancelOrder::set_has_orig_cl_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CancelOrder::clear_has_orig_cl_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CancelOrder::clear_orig_cl_order_id() {
  orig_cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orig_cl_order_id();
}
const ::std::string& CancelOrder::orig_cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CancelOrder.orig_cl_order_id)
  return orig_cl_order_id_.GetNoArena();
}
void CancelOrder::set_orig_cl_order_id(const ::std::string& value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.CancelOrder.orig_cl_order_id)
}
void CancelOrder::set_orig_cl_order_id(const char* value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.CancelOrder.orig_cl_order_id)
}
void CancelOrder::set_orig_cl_order_id(const char* value, size_t size) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.CancelOrder.orig_cl_order_id)
}
::std::string* CancelOrder::mutable_orig_cl_order_id() {
  set_has_orig_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.CancelOrder.orig_cl_order_id)
  return orig_cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelOrder::release_orig_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.CancelOrder.orig_cl_order_id)
  clear_has_orig_cl_order_id();
  return orig_cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelOrder::set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id) {
  if (orig_cl_order_id != NULL) {
    set_has_orig_cl_order_id();
  } else {
    clear_has_orig_cl_order_id();
  }
  orig_cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orig_cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.CancelOrder.orig_cl_order_id)
}

// required string cl_order_id = 4;
bool CancelOrder::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CancelOrder::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CancelOrder::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CancelOrder::clear_cl_order_id() {
  cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cl_order_id();
}
const ::std::string& CancelOrder::cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CancelOrder.cl_order_id)
  return cl_order_id_.GetNoArena();
}
void CancelOrder::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.CancelOrder.cl_order_id)
}
void CancelOrder::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.CancelOrder.cl_order_id)
}
void CancelOrder::set_cl_order_id(const char* value, size_t size) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.CancelOrder.cl_order_id)
}
::std::string* CancelOrder::mutable_cl_order_id() {
  set_has_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.CancelOrder.cl_order_id)
  return cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelOrder::release_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.CancelOrder.cl_order_id)
  clear_has_cl_order_id();
  return cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelOrder::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id != NULL) {
    set_has_cl_order_id();
  } else {
    clear_has_cl_order_id();
  }
  cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.CancelOrder.cl_order_id)
}

// required sint64 when_utc_time = 5;
bool CancelOrder::has_when_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CancelOrder::set_has_when_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CancelOrder::clear_has_when_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CancelOrder::clear_when_utc_time() {
  when_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_when_utc_time();
}
::google::protobuf::int64 CancelOrder::when_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CancelOrder.when_utc_time)
  return when_utc_time_;
}
void CancelOrder::set_when_utc_time(::google::protobuf::int64 value) {
  set_has_when_utc_time();
  when_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.CancelOrder.when_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivateOrder::kOrderIdFieldNumber;
const int ActivateOrder::kAccountIdFieldNumber;
const int ActivateOrder::kOrigClOrderIdFieldNumber;
const int ActivateOrder::kClOrderIdFieldNumber;
const int ActivateOrder::kWhenUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivateOrder::ActivateOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ActivateOrder)
}
ActivateOrder::ActivateOrder(const ActivateOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orig_cl_order_id()) {
    orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
  }
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cl_order_id()) {
    cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
  }
  ::memcpy(&when_utc_time_, &from.when_utc_time_,
    reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&when_utc_time_) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ActivateOrder)
}

void ActivateOrder::SharedCtor() {
  _cached_size_ = 0;
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&when_utc_time_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&when_utc_time_) + sizeof(account_id_));
}

ActivateOrder::~ActivateOrder() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ActivateOrder)
  SharedDtor();
}

void ActivateOrder::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActivateOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivateOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[48].descriptor;
}

const ActivateOrder& ActivateOrder::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ActivateOrder* ActivateOrder::New(::google::protobuf::Arena* arena) const {
  ActivateOrder* n = new ActivateOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivateOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ActivateOrder)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_order_id()) {
      GOOGLE_DCHECK(!order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_orig_cl_order_id()) {
      GOOGLE_DCHECK(!orig_cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orig_cl_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_cl_order_id()) {
      GOOGLE_DCHECK(!cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cl_order_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&when_utc_time_, 0, reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&when_utc_time_) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActivateOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ActivateOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string order_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ActivateOrder.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 account_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string orig_cl_order_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ActivateOrder.orig_cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cl_order_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_order_id().data(), this->cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ActivateOrder.cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 when_utc_time = 5;
      case 5: {
        if (tag == 40u) {
          set_has_when_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &when_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ActivateOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ActivateOrder)
  return false;
#undef DO_
}

void ActivateOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ActivateOrder)
  // required string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ActivateOrder.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->order_id(), output);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->account_id(), output);
  }

  // required string orig_cl_order_id = 3;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ActivateOrder.orig_cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orig_cl_order_id(), output);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ActivateOrder.cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cl_order_id(), output);
  }

  // required sint64 when_utc_time = 5;
  if (has_when_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->when_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ActivateOrder)
}

::google::protobuf::uint8* ActivateOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ActivateOrder)
  // required string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ActivateOrder.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->account_id(), target);
  }

  // required string orig_cl_order_id = 3;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ActivateOrder.orig_cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orig_cl_order_id(), target);
  }

  // required string cl_order_id = 4;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ActivateOrder.cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cl_order_id(), target);
  }

  // required sint64 when_utc_time = 5;
  if (has_when_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->when_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ActivateOrder)
  return target;
}

size_t ActivateOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.ActivateOrder)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_orig_cl_order_id()) {
    // required string orig_cl_order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_cl_order_id());
  }

  if (has_cl_order_id()) {
    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());
  }

  if (has_when_utc_time()) {
    // required sint64 when_utc_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());
  }

  if (has_account_id()) {
    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  return total_size;
}
size_t ActivateOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ActivateOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required string orig_cl_order_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_cl_order_id());

    // required string cl_order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());

    // required sint64 when_utc_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->when_utc_time());

    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivateOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ActivateOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivateOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ActivateOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ActivateOrder)
    MergeFrom(*source);
  }
}

void ActivateOrder::MergeFrom(const ActivateOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ActivateOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_order_id()) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (from.has_orig_cl_order_id()) {
      set_has_orig_cl_order_id();
      orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
    }
    if (from.has_cl_order_id()) {
      set_has_cl_order_id();
      cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
    }
    if (from.has_when_utc_time()) {
      set_when_utc_time(from.when_utc_time());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
}

void ActivateOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ActivateOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateOrder::CopyFrom(const ActivateOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ActivateOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ActivateOrder::Swap(ActivateOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivateOrder::InternalSwap(ActivateOrder* other) {
  order_id_.Swap(&other->order_id_);
  orig_cl_order_id_.Swap(&other->orig_cl_order_id_);
  cl_order_id_.Swap(&other->cl_order_id_);
  std::swap(when_utc_time_, other->when_utc_time_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivateOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivateOrder

// required string order_id = 1;
bool ActivateOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivateOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivateOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivateOrder::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
const ::std::string& ActivateOrder::order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ActivateOrder.order_id)
  return order_id_.GetNoArena();
}
void ActivateOrder::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ActivateOrder.order_id)
}
void ActivateOrder::set_order_id(const char* value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ActivateOrder.order_id)
}
void ActivateOrder::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ActivateOrder.order_id)
}
::std::string* ActivateOrder::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ActivateOrder.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActivateOrder::release_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ActivateOrder.order_id)
  clear_has_order_id();
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActivateOrder::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ActivateOrder.order_id)
}

// required sint32 account_id = 2;
bool ActivateOrder::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ActivateOrder::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ActivateOrder::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ActivateOrder::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 ActivateOrder::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ActivateOrder.account_id)
  return account_id_;
}
void ActivateOrder::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ActivateOrder.account_id)
}

// required string orig_cl_order_id = 3;
bool ActivateOrder::has_orig_cl_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActivateOrder::set_has_orig_cl_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ActivateOrder::clear_has_orig_cl_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActivateOrder::clear_orig_cl_order_id() {
  orig_cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orig_cl_order_id();
}
const ::std::string& ActivateOrder::orig_cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ActivateOrder.orig_cl_order_id)
  return orig_cl_order_id_.GetNoArena();
}
void ActivateOrder::set_orig_cl_order_id(const ::std::string& value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ActivateOrder.orig_cl_order_id)
}
void ActivateOrder::set_orig_cl_order_id(const char* value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ActivateOrder.orig_cl_order_id)
}
void ActivateOrder::set_orig_cl_order_id(const char* value, size_t size) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ActivateOrder.orig_cl_order_id)
}
::std::string* ActivateOrder::mutable_orig_cl_order_id() {
  set_has_orig_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ActivateOrder.orig_cl_order_id)
  return orig_cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActivateOrder::release_orig_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ActivateOrder.orig_cl_order_id)
  clear_has_orig_cl_order_id();
  return orig_cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActivateOrder::set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id) {
  if (orig_cl_order_id != NULL) {
    set_has_orig_cl_order_id();
  } else {
    clear_has_orig_cl_order_id();
  }
  orig_cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orig_cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ActivateOrder.orig_cl_order_id)
}

// required string cl_order_id = 4;
bool ActivateOrder::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActivateOrder::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ActivateOrder::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActivateOrder::clear_cl_order_id() {
  cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cl_order_id();
}
const ::std::string& ActivateOrder::cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ActivateOrder.cl_order_id)
  return cl_order_id_.GetNoArena();
}
void ActivateOrder::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ActivateOrder.cl_order_id)
}
void ActivateOrder::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ActivateOrder.cl_order_id)
}
void ActivateOrder::set_cl_order_id(const char* value, size_t size) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ActivateOrder.cl_order_id)
}
::std::string* ActivateOrder::mutable_cl_order_id() {
  set_has_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ActivateOrder.cl_order_id)
  return cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActivateOrder::release_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ActivateOrder.cl_order_id)
  clear_has_cl_order_id();
  return cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActivateOrder::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id != NULL) {
    set_has_cl_order_id();
  } else {
    clear_has_cl_order_id();
  }
  cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ActivateOrder.cl_order_id)
}

// required sint64 when_utc_time = 5;
bool ActivateOrder::has_when_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActivateOrder::set_has_when_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ActivateOrder::clear_has_when_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActivateOrder::clear_when_utc_time() {
  when_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_when_utc_time();
}
::google::protobuf::int64 ActivateOrder::when_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ActivateOrder.when_utc_time)
  return when_utc_time_;
}
void ActivateOrder::set_when_utc_time(::google::protobuf::int64 value) {
  set_has_when_utc_time();
  when_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ActivateOrder.when_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyUserAttributes::kChainOrderIdFieldNumber;
const int ModifyUserAttributes::kAccountIdFieldNumber;
const int ModifyUserAttributes::kUserAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyUserAttributes::ModifyUserAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ModifyUserAttributes)
}
ModifyUserAttributes::ModifyUserAttributes(const ModifyUserAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_attribute_(from.user_attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chain_order_id()) {
    chain_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_order_id_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ModifyUserAttributes)
}

void ModifyUserAttributes::SharedCtor() {
  _cached_size_ = 0;
  chain_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0;
}

ModifyUserAttributes::~ModifyUserAttributes() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ModifyUserAttributes)
  SharedDtor();
}

void ModifyUserAttributes::SharedDtor() {
  chain_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModifyUserAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyUserAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[49].descriptor;
}

const ModifyUserAttributes& ModifyUserAttributes::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ModifyUserAttributes* ModifyUserAttributes::New(::google::protobuf::Arena* arena) const {
  ModifyUserAttributes* n = new ModifyUserAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyUserAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ModifyUserAttributes)
  user_attribute_.Clear();
  if (has_chain_order_id()) {
    GOOGLE_DCHECK(!chain_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*chain_order_id_.UnsafeRawStringPointer())->clear();
  }
  account_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyUserAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ModifyUserAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chain_order_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chain_order_id().data(), this->chain_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ModifyUserAttributes.chain_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 account_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.UserAttribute user_attribute = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_attribute()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ModifyUserAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ModifyUserAttributes)
  return false;
#undef DO_
}

void ModifyUserAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ModifyUserAttributes)
  // required string chain_order_id = 1;
  if (has_chain_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_order_id().data(), this->chain_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyUserAttributes.chain_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chain_order_id(), output);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->account_id(), output);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 3;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_attribute(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ModifyUserAttributes)
}

::google::protobuf::uint8* ModifyUserAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ModifyUserAttributes)
  // required string chain_order_id = 1;
  if (has_chain_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_order_id().data(), this->chain_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyUserAttributes.chain_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chain_order_id(), target);
  }

  // required sint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->account_id(), target);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 3;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->user_attribute(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ModifyUserAttributes)
  return target;
}

size_t ModifyUserAttributes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.ModifyUserAttributes)
  size_t total_size = 0;

  if (has_chain_order_id()) {
    // required string chain_order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_order_id());
  }

  if (has_account_id()) {
    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  return total_size;
}
size_t ModifyUserAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ModifyUserAttributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string chain_order_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_order_id());

    // required sint32 account_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.UserAttribute user_attribute = 3;
  {
    unsigned int count = this->user_attribute_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_attribute(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyUserAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ModifyUserAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyUserAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyUserAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ModifyUserAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ModifyUserAttributes)
    MergeFrom(*source);
  }
}

void ModifyUserAttributes::MergeFrom(const ModifyUserAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ModifyUserAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_attribute_.MergeFrom(from.user_attribute_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_chain_order_id()) {
      set_has_chain_order_id();
      chain_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_order_id_);
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
}

void ModifyUserAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ModifyUserAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyUserAttributes::CopyFrom(const ModifyUserAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ModifyUserAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyUserAttributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user_attribute())) return false;
  return true;
}

void ModifyUserAttributes::Swap(ModifyUserAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyUserAttributes::InternalSwap(ModifyUserAttributes* other) {
  user_attribute_.UnsafeArenaSwap(&other->user_attribute_);
  chain_order_id_.Swap(&other->chain_order_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyUserAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyUserAttributes

// required string chain_order_id = 1;
bool ModifyUserAttributes::has_chain_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifyUserAttributes::set_has_chain_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifyUserAttributes::clear_has_chain_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyUserAttributes::clear_chain_order_id() {
  chain_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chain_order_id();
}
const ::std::string& ModifyUserAttributes::chain_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributes.chain_order_id)
  return chain_order_id_.GetNoArena();
}
void ModifyUserAttributes::set_chain_order_id(const ::std::string& value) {
  set_has_chain_order_id();
  chain_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyUserAttributes.chain_order_id)
}
void ModifyUserAttributes::set_chain_order_id(const char* value) {
  set_has_chain_order_id();
  chain_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ModifyUserAttributes.chain_order_id)
}
void ModifyUserAttributes::set_chain_order_id(const char* value, size_t size) {
  set_has_chain_order_id();
  chain_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ModifyUserAttributes.chain_order_id)
}
::std::string* ModifyUserAttributes::mutable_chain_order_id() {
  set_has_chain_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ModifyUserAttributes.chain_order_id)
  return chain_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModifyUserAttributes::release_chain_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ModifyUserAttributes.chain_order_id)
  clear_has_chain_order_id();
  return chain_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyUserAttributes::set_allocated_chain_order_id(::std::string* chain_order_id) {
  if (chain_order_id != NULL) {
    set_has_chain_order_id();
  } else {
    clear_has_chain_order_id();
  }
  chain_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ModifyUserAttributes.chain_order_id)
}

// required sint32 account_id = 2;
bool ModifyUserAttributes::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModifyUserAttributes::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ModifyUserAttributes::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModifyUserAttributes::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 ModifyUserAttributes::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributes.account_id)
  return account_id_;
}
void ModifyUserAttributes::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyUserAttributes.account_id)
}

// repeated .WebAPI_1.UserAttribute user_attribute = 3;
int ModifyUserAttributes::user_attribute_size() const {
  return user_attribute_.size();
}
void ModifyUserAttributes::clear_user_attribute() {
  user_attribute_.Clear();
}
const ::WebAPI_1::UserAttribute& ModifyUserAttributes::user_attribute(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributes.user_attribute)
  return user_attribute_.Get(index);
}
::WebAPI_1::UserAttribute* ModifyUserAttributes::mutable_user_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ModifyUserAttributes.user_attribute)
  return user_attribute_.Mutable(index);
}
::WebAPI_1::UserAttribute* ModifyUserAttributes::add_user_attribute() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ModifyUserAttributes.user_attribute)
  return user_attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >*
ModifyUserAttributes::mutable_user_attribute() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ModifyUserAttributes.user_attribute)
  return &user_attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >&
ModifyUserAttributes::user_attribute() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ModifyUserAttributes.user_attribute)
  return user_attribute_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderStatus::kSubscriptionIdFieldNumber;
const int OrderStatus::kIsSnapshotFieldNumber;
const int OrderStatus::kStatusFieldNumber;
const int OrderStatus::kOrderIdFieldNumber;
const int OrderStatus::kChainOrderIdFieldNumber;
const int OrderStatus::kExecOrderIdFieldNumber;
const int OrderStatus::kStatusUtcTimeFieldNumber;
const int OrderStatus::kSubmissionUtcTimeFieldNumber;
const int OrderStatus::kFillQtyFieldNumber;
const int OrderStatus::kFillCntFieldNumber;
const int OrderStatus::kAvgFillPriceFieldNumber;
const int OrderStatus::kActiveAtUtcTimeFieldNumber;
const int OrderStatus::kRemainingQtyFieldNumber;
const int OrderStatus::kOrderFieldNumber;
const int OrderStatus::kTransactionStatusFieldNumber;
const int OrderStatus::kEnteredByUserFieldNumber;
const int OrderStatus::kFirstStatementDateFieldNumber;
const int OrderStatus::kLastStatementDateFieldNumber;
const int OrderStatus::kContractMetadataFieldNumber;
const int OrderStatus::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderStatus::OrderStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.OrderStatus)
}
OrderStatus::OrderStatus(const OrderStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subscription_id_(from.subscription_id_),
      transaction_status_(from.transaction_status_),
      contract_metadata_(from.contract_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  chain_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chain_order_id()) {
    chain_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_order_id_);
  }
  exec_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exec_order_id()) {
    exec_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exec_order_id_);
  }
  entered_by_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entered_by_user()) {
    entered_by_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entered_by_user_);
  }
  if (from.has_order()) {
    order_ = new ::WebAPI_1::Order(*from.order_);
  } else {
    order_ = NULL;
  }
  ::memcpy(&is_snapshot_, &from.is_snapshot_,
    reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&is_snapshot_) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.OrderStatus)
}

void OrderStatus::SharedCtor() {
  _cached_size_ = 0;
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exec_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entered_by_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&order_) + sizeof(account_id_));
}

OrderStatus::~OrderStatus() {
  // @@protoc_insertion_point(destructor:WebAPI_1.OrderStatus)
  SharedDtor();
}

void OrderStatus::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exec_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entered_by_user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete order_;
  }
}

void OrderStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[50].descriptor;
}

const OrderStatus& OrderStatus::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

OrderStatus* OrderStatus::New(::google::protobuf::Arena* arena) const {
  OrderStatus* n = new OrderStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.OrderStatus)
  subscription_id_.Clear();
  transaction_status_.Clear();
  contract_metadata_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_order_id()) {
      GOOGLE_DCHECK(!order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_chain_order_id()) {
      GOOGLE_DCHECK(!chain_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chain_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_exec_order_id()) {
      GOOGLE_DCHECK(!exec_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*exec_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_entered_by_user()) {
      GOOGLE_DCHECK(!entered_by_user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*entered_by_user_.UnsafeRawStringPointer())->clear();
    }
    if (has_order()) {
      GOOGLE_DCHECK(order_ != NULL);
      order_->::WebAPI_1::Order::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&is_snapshot_, 0, reinterpret_cast<char*>(&status_utc_time_) -
      reinterpret_cast<char*>(&is_snapshot_) + sizeof(status_utc_time_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&submission_utc_time_, 0, reinterpret_cast<char*>(&last_statement_date_) -
      reinterpret_cast<char*>(&submission_utc_time_) + sizeof(last_statement_date_));
  }
  account_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.OrderStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 subscription_id = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_subscription_id())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subscription_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_snapshot = 2;
      case 2: {
        if (tag == 16u) {
          set_has_is_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24u) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string order_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.OrderStatus.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string chain_order_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chain_order_id().data(), this->chain_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.OrderStatus.chain_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exec_order_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exec_order_id().data(), this->exec_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.OrderStatus.exec_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 status_utc_time = 7;
      case 7: {
        if (tag == 56u) {
          set_has_status_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &status_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 submission_utc_time = 8;
      case 8: {
        if (tag == 64u) {
          set_has_submission_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &submission_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 fill_qty = 9;
      case 9: {
        if (tag == 72u) {
          set_has_fill_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fill_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 fill_cnt = 10;
      case 10: {
        if (tag == 80u) {
          set_has_fill_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fill_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 avg_fill_price = 11;
      case 11: {
        if (tag == 88u) {
          set_has_avg_fill_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &avg_fill_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 active_at_utc_time = 12;
      case 12: {
        if (tag == 96u) {
          set_has_active_at_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &active_at_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 remaining_qty = 13;
      case 13: {
        if (tag == 104u) {
          set_has_remaining_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.Order order = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.TransactionStatus transaction_status = 15;
      case 15: {
        if (tag == 122u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transaction_status()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required string entered_by_user = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entered_by_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entered_by_user().data(), this->entered_by_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.OrderStatus.entered_by_user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 first_statement_date = 17;
      case 17: {
        if (tag == 136u) {
          set_has_first_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &first_statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 last_statement_date = 18;
      case 18: {
        if (tag == 144u) {
          set_has_last_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &last_statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.ContractMetadata contract_metadata = 19;
      case 19: {
        if (tag == 154u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contract_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required sint32 account_id = 20;
      case 20: {
        if (tag == 160u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.OrderStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.OrderStatus)
  return false;
#undef DO_
}

void OrderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.OrderStatus)
  // repeated uint32 subscription_id = 1;
  for (int i = 0; i < this->subscription_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->subscription_id(i), output);
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_snapshot(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_id(), output);
  }

  // required string chain_order_id = 5;
  if (has_chain_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_order_id().data(), this->chain_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.chain_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->chain_order_id(), output);
  }

  // optional string exec_order_id = 6;
  if (has_exec_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_order_id().data(), this->exec_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.exec_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->exec_order_id(), output);
  }

  // required sint64 status_utc_time = 7;
  if (has_status_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->status_utc_time(), output);
  }

  // required sint64 submission_utc_time = 8;
  if (has_submission_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->submission_utc_time(), output);
  }

  // required uint32 fill_qty = 9;
  if (has_fill_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fill_qty(), output);
  }

  // required uint32 fill_cnt = 10;
  if (has_fill_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fill_cnt(), output);
  }

  // required sint32 avg_fill_price = 11;
  if (has_avg_fill_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->avg_fill_price(), output);
  }

  // optional sint64 active_at_utc_time = 12;
  if (has_active_at_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(12, this->active_at_utc_time(), output);
  }

  // required uint32 remaining_qty = 13;
  if (has_remaining_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->remaining_qty(), output);
  }

  // optional .WebAPI_1.Order order = 14;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->order_, output);
  }

  // repeated .WebAPI_1.TransactionStatus transaction_status = 15;
  for (unsigned int i = 0, n = this->transaction_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->transaction_status(i), output);
  }

  // required string entered_by_user = 16;
  if (has_entered_by_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entered_by_user().data(), this->entered_by_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.entered_by_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->entered_by_user(), output);
  }

  // required sint64 first_statement_date = 17;
  if (has_first_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(17, this->first_statement_date(), output);
  }

  // optional sint64 last_statement_date = 18;
  if (has_last_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->last_statement_date(), output);
  }

  // repeated .WebAPI_1.ContractMetadata contract_metadata = 19;
  for (unsigned int i = 0, n = this->contract_metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->contract_metadata(i), output);
  }

  // required sint32 account_id = 20;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.OrderStatus)
}

::google::protobuf::uint8* OrderStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.OrderStatus)
  // repeated uint32 subscription_id = 1;
  for (int i = 0; i < this->subscription_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->subscription_id(i), target);
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_snapshot(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_id(), target);
  }

  // required string chain_order_id = 5;
  if (has_chain_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_order_id().data(), this->chain_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.chain_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->chain_order_id(), target);
  }

  // optional string exec_order_id = 6;
  if (has_exec_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_order_id().data(), this->exec_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.exec_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->exec_order_id(), target);
  }

  // required sint64 status_utc_time = 7;
  if (has_status_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->status_utc_time(), target);
  }

  // required sint64 submission_utc_time = 8;
  if (has_submission_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->submission_utc_time(), target);
  }

  // required uint32 fill_qty = 9;
  if (has_fill_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fill_qty(), target);
  }

  // required uint32 fill_cnt = 10;
  if (has_fill_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fill_cnt(), target);
  }

  // required sint32 avg_fill_price = 11;
  if (has_avg_fill_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->avg_fill_price(), target);
  }

  // optional sint64 active_at_utc_time = 12;
  if (has_active_at_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(12, this->active_at_utc_time(), target);
  }

  // required uint32 remaining_qty = 13;
  if (has_remaining_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->remaining_qty(), target);
  }

  // optional .WebAPI_1.Order order = 14;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->order_, false, target);
  }

  // repeated .WebAPI_1.TransactionStatus transaction_status = 15;
  for (unsigned int i = 0, n = this->transaction_status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->transaction_status(i), false, target);
  }

  // required string entered_by_user = 16;
  if (has_entered_by_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entered_by_user().data(), this->entered_by_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.OrderStatus.entered_by_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->entered_by_user(), target);
  }

  // required sint64 first_statement_date = 17;
  if (has_first_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(17, this->first_statement_date(), target);
  }

  // optional sint64 last_statement_date = 18;
  if (has_last_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(18, this->last_statement_date(), target);
  }

  // repeated .WebAPI_1.ContractMetadata contract_metadata = 19;
  for (unsigned int i = 0, n = this->contract_metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->contract_metadata(i), false, target);
  }

  // required sint32 account_id = 20;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.OrderStatus)
  return target;
}

size_t OrderStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.OrderStatus)
  size_t total_size = 0;

  if (has_order_id()) {
    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  if (has_chain_order_id()) {
    // required string chain_order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_order_id());
  }

  if (has_entered_by_user()) {
    // required string entered_by_user = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entered_by_user());
  }

  if (has_status()) {
    // required uint32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  if (has_status_utc_time()) {
    // required sint64 status_utc_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->status_utc_time());
  }

  if (has_submission_utc_time()) {
    // required sint64 submission_utc_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->submission_utc_time());
  }

  if (has_fill_qty()) {
    // required uint32 fill_qty = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fill_qty());
  }

  if (has_fill_cnt()) {
    // required uint32 fill_cnt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fill_cnt());
  }

  if (has_avg_fill_price()) {
    // required sint32 avg_fill_price = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->avg_fill_price());
  }

  if (has_remaining_qty()) {
    // required uint32 remaining_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining_qty());
  }

  if (has_first_statement_date()) {
    // required sint64 first_statement_date = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->first_statement_date());
  }

  if (has_account_id()) {
    // required sint32 account_id = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  return total_size;
}
size_t OrderStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.OrderStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000177cb) ^ 0x000177cb) == 0) {  // All required fields are present.
    // required string order_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());

    // required string chain_order_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_order_id());

    // required string entered_by_user = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entered_by_user());

    // required uint32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

    // required sint64 status_utc_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->status_utc_time());

    // required sint64 submission_utc_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->submission_utc_time());

    // required uint32 fill_qty = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fill_qty());

    // required uint32 fill_cnt = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fill_cnt());

    // required sint32 avg_fill_price = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->avg_fill_price());

    // required uint32 remaining_qty = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining_qty());

    // required sint64 first_statement_date = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->first_statement_date());

    // required sint32 account_id = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 subscription_id = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->subscription_id_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subscription_id(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->subscription_id_size());
    total_size += data_size;
  }

  // repeated .WebAPI_1.TransactionStatus transaction_status = 15;
  {
    unsigned int count = this->transaction_status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_status(i));
    }
  }

  // repeated .WebAPI_1.ContractMetadata contract_metadata = 19;
  {
    unsigned int count = this->contract_metadata_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contract_metadata(i));
    }
  }

  // optional string exec_order_id = 6;
  if (has_exec_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exec_order_id());
  }

  if (_has_bits_[0 / 32] & 48u) {
    // optional .WebAPI_1.Order order = 14;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->order_);
    }

    // optional bool is_snapshot = 2;
    if (has_is_snapshot()) {
      total_size += 1 + 1;
    }

  }
  // optional sint64 active_at_utc_time = 12;
  if (has_active_at_utc_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->active_at_utc_time());
  }

  // optional sint64 last_statement_date = 18;
  if (has_last_statement_date()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->last_statement_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.OrderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.OrderStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.OrderStatus)
    MergeFrom(*source);
  }
}

void OrderStatus::MergeFrom(const OrderStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.OrderStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_.MergeFrom(from.subscription_id_);
  transaction_status_.MergeFrom(from.transaction_status_);
  contract_metadata_.MergeFrom(from.contract_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_order_id()) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (from.has_chain_order_id()) {
      set_has_chain_order_id();
      chain_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_order_id_);
    }
    if (from.has_exec_order_id()) {
      set_has_exec_order_id();
      exec_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exec_order_id_);
    }
    if (from.has_entered_by_user()) {
      set_has_entered_by_user();
      entered_by_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entered_by_user_);
    }
    if (from.has_order()) {
      mutable_order()->::WebAPI_1::Order::MergeFrom(from.order());
    }
    if (from.has_is_snapshot()) {
      set_is_snapshot(from.is_snapshot());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_utc_time()) {
      set_status_utc_time(from.status_utc_time());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_submission_utc_time()) {
      set_submission_utc_time(from.submission_utc_time());
    }
    if (from.has_fill_qty()) {
      set_fill_qty(from.fill_qty());
    }
    if (from.has_fill_cnt()) {
      set_fill_cnt(from.fill_cnt());
    }
    if (from.has_active_at_utc_time()) {
      set_active_at_utc_time(from.active_at_utc_time());
    }
    if (from.has_avg_fill_price()) {
      set_avg_fill_price(from.avg_fill_price());
    }
    if (from.has_remaining_qty()) {
      set_remaining_qty(from.remaining_qty());
    }
    if (from.has_first_statement_date()) {
      set_first_statement_date(from.first_statement_date());
    }
    if (from.has_last_statement_date()) {
      set_last_statement_date(from.last_statement_date());
    }
  }
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void OrderStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.OrderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderStatus::CopyFrom(const OrderStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.OrderStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x000177cb) != 0x000177cb) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->transaction_status())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->contract_metadata())) return false;
  if (has_order()) {
    if (!this->order_->IsInitialized()) return false;
  }
  return true;
}

void OrderStatus::Swap(OrderStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderStatus::InternalSwap(OrderStatus* other) {
  subscription_id_.UnsafeArenaSwap(&other->subscription_id_);
  transaction_status_.UnsafeArenaSwap(&other->transaction_status_);
  contract_metadata_.UnsafeArenaSwap(&other->contract_metadata_);
  order_id_.Swap(&other->order_id_);
  chain_order_id_.Swap(&other->chain_order_id_);
  exec_order_id_.Swap(&other->exec_order_id_);
  entered_by_user_.Swap(&other->entered_by_user_);
  std::swap(order_, other->order_);
  std::swap(is_snapshot_, other->is_snapshot_);
  std::swap(status_, other->status_);
  std::swap(status_utc_time_, other->status_utc_time_);
  std::swap(submission_utc_time_, other->submission_utc_time_);
  std::swap(fill_qty_, other->fill_qty_);
  std::swap(fill_cnt_, other->fill_cnt_);
  std::swap(active_at_utc_time_, other->active_at_utc_time_);
  std::swap(avg_fill_price_, other->avg_fill_price_);
  std::swap(remaining_qty_, other->remaining_qty_);
  std::swap(first_statement_date_, other->first_statement_date_);
  std::swap(last_statement_date_, other->last_statement_date_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderStatus

// repeated uint32 subscription_id = 1;
int OrderStatus::subscription_id_size() const {
  return subscription_id_.size();
}
void OrderStatus::clear_subscription_id() {
  subscription_id_.Clear();
}
::google::protobuf::uint32 OrderStatus::subscription_id(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.subscription_id)
  return subscription_id_.Get(index);
}
void OrderStatus::set_subscription_id(int index, ::google::protobuf::uint32 value) {
  subscription_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.subscription_id)
}
void OrderStatus::add_subscription_id(::google::protobuf::uint32 value) {
  subscription_id_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.OrderStatus.subscription_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OrderStatus::subscription_id() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.OrderStatus.subscription_id)
  return subscription_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OrderStatus::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.OrderStatus.subscription_id)
  return &subscription_id_;
}

// optional bool is_snapshot = 2;
bool OrderStatus::has_is_snapshot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrderStatus::set_has_is_snapshot() {
  _has_bits_[0] |= 0x00000020u;
}
void OrderStatus::clear_has_is_snapshot() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrderStatus::clear_is_snapshot() {
  is_snapshot_ = false;
  clear_has_is_snapshot();
}
bool OrderStatus::is_snapshot() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.is_snapshot)
  return is_snapshot_;
}
void OrderStatus::set_is_snapshot(bool value) {
  set_has_is_snapshot();
  is_snapshot_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.is_snapshot)
}

// required uint32 status = 3;
bool OrderStatus::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrderStatus::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
void OrderStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrderStatus::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 OrderStatus::status() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.status)
  return status_;
}
void OrderStatus::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.status)
}

// required string order_id = 4;
bool OrderStatus::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderStatus::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderStatus::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderStatus::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
const ::std::string& OrderStatus::order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.order_id)
  return order_id_.GetNoArena();
}
void OrderStatus::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.order_id)
}
void OrderStatus::set_order_id(const char* value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.OrderStatus.order_id)
}
void OrderStatus::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.OrderStatus.order_id)
}
::std::string* OrderStatus::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderStatus.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderStatus::release_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderStatus.order_id)
  clear_has_order_id();
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderStatus::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderStatus.order_id)
}

// required string chain_order_id = 5;
bool OrderStatus::has_chain_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderStatus::set_has_chain_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderStatus::clear_has_chain_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderStatus::clear_chain_order_id() {
  chain_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chain_order_id();
}
const ::std::string& OrderStatus::chain_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.chain_order_id)
  return chain_order_id_.GetNoArena();
}
void OrderStatus::set_chain_order_id(const ::std::string& value) {
  set_has_chain_order_id();
  chain_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.chain_order_id)
}
void OrderStatus::set_chain_order_id(const char* value) {
  set_has_chain_order_id();
  chain_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.OrderStatus.chain_order_id)
}
void OrderStatus::set_chain_order_id(const char* value, size_t size) {
  set_has_chain_order_id();
  chain_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.OrderStatus.chain_order_id)
}
::std::string* OrderStatus::mutable_chain_order_id() {
  set_has_chain_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderStatus.chain_order_id)
  return chain_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderStatus::release_chain_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderStatus.chain_order_id)
  clear_has_chain_order_id();
  return chain_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderStatus::set_allocated_chain_order_id(::std::string* chain_order_id) {
  if (chain_order_id != NULL) {
    set_has_chain_order_id();
  } else {
    clear_has_chain_order_id();
  }
  chain_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderStatus.chain_order_id)
}

// optional string exec_order_id = 6;
bool OrderStatus::has_exec_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderStatus::set_has_exec_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderStatus::clear_has_exec_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderStatus::clear_exec_order_id() {
  exec_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exec_order_id();
}
const ::std::string& OrderStatus::exec_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.exec_order_id)
  return exec_order_id_.GetNoArena();
}
void OrderStatus::set_exec_order_id(const ::std::string& value) {
  set_has_exec_order_id();
  exec_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.exec_order_id)
}
void OrderStatus::set_exec_order_id(const char* value) {
  set_has_exec_order_id();
  exec_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.OrderStatus.exec_order_id)
}
void OrderStatus::set_exec_order_id(const char* value, size_t size) {
  set_has_exec_order_id();
  exec_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.OrderStatus.exec_order_id)
}
::std::string* OrderStatus::mutable_exec_order_id() {
  set_has_exec_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderStatus.exec_order_id)
  return exec_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderStatus::release_exec_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderStatus.exec_order_id)
  clear_has_exec_order_id();
  return exec_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderStatus::set_allocated_exec_order_id(::std::string* exec_order_id) {
  if (exec_order_id != NULL) {
    set_has_exec_order_id();
  } else {
    clear_has_exec_order_id();
  }
  exec_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exec_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderStatus.exec_order_id)
}

// required sint64 status_utc_time = 7;
bool OrderStatus::has_status_utc_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OrderStatus::set_has_status_utc_time() {
  _has_bits_[0] |= 0x00000080u;
}
void OrderStatus::clear_has_status_utc_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void OrderStatus::clear_status_utc_time() {
  status_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_status_utc_time();
}
::google::protobuf::int64 OrderStatus::status_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.status_utc_time)
  return status_utc_time_;
}
void OrderStatus::set_status_utc_time(::google::protobuf::int64 value) {
  set_has_status_utc_time();
  status_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.status_utc_time)
}

// required sint64 submission_utc_time = 8;
bool OrderStatus::has_submission_utc_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OrderStatus::set_has_submission_utc_time() {
  _has_bits_[0] |= 0x00000100u;
}
void OrderStatus::clear_has_submission_utc_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void OrderStatus::clear_submission_utc_time() {
  submission_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_submission_utc_time();
}
::google::protobuf::int64 OrderStatus::submission_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.submission_utc_time)
  return submission_utc_time_;
}
void OrderStatus::set_submission_utc_time(::google::protobuf::int64 value) {
  set_has_submission_utc_time();
  submission_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.submission_utc_time)
}

// required uint32 fill_qty = 9;
bool OrderStatus::has_fill_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OrderStatus::set_has_fill_qty() {
  _has_bits_[0] |= 0x00000200u;
}
void OrderStatus::clear_has_fill_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
void OrderStatus::clear_fill_qty() {
  fill_qty_ = 0u;
  clear_has_fill_qty();
}
::google::protobuf::uint32 OrderStatus::fill_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.fill_qty)
  return fill_qty_;
}
void OrderStatus::set_fill_qty(::google::protobuf::uint32 value) {
  set_has_fill_qty();
  fill_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.fill_qty)
}

// required uint32 fill_cnt = 10;
bool OrderStatus::has_fill_cnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OrderStatus::set_has_fill_cnt() {
  _has_bits_[0] |= 0x00000400u;
}
void OrderStatus::clear_has_fill_cnt() {
  _has_bits_[0] &= ~0x00000400u;
}
void OrderStatus::clear_fill_cnt() {
  fill_cnt_ = 0u;
  clear_has_fill_cnt();
}
::google::protobuf::uint32 OrderStatus::fill_cnt() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.fill_cnt)
  return fill_cnt_;
}
void OrderStatus::set_fill_cnt(::google::protobuf::uint32 value) {
  set_has_fill_cnt();
  fill_cnt_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.fill_cnt)
}

// required sint32 avg_fill_price = 11;
bool OrderStatus::has_avg_fill_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OrderStatus::set_has_avg_fill_price() {
  _has_bits_[0] |= 0x00001000u;
}
void OrderStatus::clear_has_avg_fill_price() {
  _has_bits_[0] &= ~0x00001000u;
}
void OrderStatus::clear_avg_fill_price() {
  avg_fill_price_ = 0;
  clear_has_avg_fill_price();
}
::google::protobuf::int32 OrderStatus::avg_fill_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.avg_fill_price)
  return avg_fill_price_;
}
void OrderStatus::set_avg_fill_price(::google::protobuf::int32 value) {
  set_has_avg_fill_price();
  avg_fill_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.avg_fill_price)
}

// optional sint64 active_at_utc_time = 12;
bool OrderStatus::has_active_at_utc_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OrderStatus::set_has_active_at_utc_time() {
  _has_bits_[0] |= 0x00000800u;
}
void OrderStatus::clear_has_active_at_utc_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void OrderStatus::clear_active_at_utc_time() {
  active_at_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_active_at_utc_time();
}
::google::protobuf::int64 OrderStatus::active_at_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.active_at_utc_time)
  return active_at_utc_time_;
}
void OrderStatus::set_active_at_utc_time(::google::protobuf::int64 value) {
  set_has_active_at_utc_time();
  active_at_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.active_at_utc_time)
}

// required uint32 remaining_qty = 13;
bool OrderStatus::has_remaining_qty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OrderStatus::set_has_remaining_qty() {
  _has_bits_[0] |= 0x00002000u;
}
void OrderStatus::clear_has_remaining_qty() {
  _has_bits_[0] &= ~0x00002000u;
}
void OrderStatus::clear_remaining_qty() {
  remaining_qty_ = 0u;
  clear_has_remaining_qty();
}
::google::protobuf::uint32 OrderStatus::remaining_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.remaining_qty)
  return remaining_qty_;
}
void OrderStatus::set_remaining_qty(::google::protobuf::uint32 value) {
  set_has_remaining_qty();
  remaining_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.remaining_qty)
}

// optional .WebAPI_1.Order order = 14;
bool OrderStatus::has_order() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrderStatus::set_has_order() {
  _has_bits_[0] |= 0x00000010u;
}
void OrderStatus::clear_has_order() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrderStatus::clear_order() {
  if (order_ != NULL) order_->::WebAPI_1::Order::Clear();
  clear_has_order();
}
const ::WebAPI_1::Order& OrderStatus::order() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.order)
  return order_ != NULL ? *order_
                         : *::WebAPI_1::Order::internal_default_instance();
}
::WebAPI_1::Order* OrderStatus::mutable_order() {
  set_has_order();
  if (order_ == NULL) {
    order_ = new ::WebAPI_1::Order;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderStatus.order)
  return order_;
}
::WebAPI_1::Order* OrderStatus::release_order() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderStatus.order)
  clear_has_order();
  ::WebAPI_1::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void OrderStatus::set_allocated_order(::WebAPI_1::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    set_has_order();
  } else {
    clear_has_order();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderStatus.order)
}

// repeated .WebAPI_1.TransactionStatus transaction_status = 15;
int OrderStatus::transaction_status_size() const {
  return transaction_status_.size();
}
void OrderStatus::clear_transaction_status() {
  transaction_status_.Clear();
}
const ::WebAPI_1::TransactionStatus& OrderStatus::transaction_status(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.transaction_status)
  return transaction_status_.Get(index);
}
::WebAPI_1::TransactionStatus* OrderStatus::mutable_transaction_status(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderStatus.transaction_status)
  return transaction_status_.Mutable(index);
}
::WebAPI_1::TransactionStatus* OrderStatus::add_transaction_status() {
  // @@protoc_insertion_point(field_add:WebAPI_1.OrderStatus.transaction_status)
  return transaction_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TransactionStatus >*
OrderStatus::mutable_transaction_status() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.OrderStatus.transaction_status)
  return &transaction_status_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TransactionStatus >&
OrderStatus::transaction_status() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.OrderStatus.transaction_status)
  return transaction_status_;
}

// required string entered_by_user = 16;
bool OrderStatus::has_entered_by_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrderStatus::set_has_entered_by_user() {
  _has_bits_[0] |= 0x00000008u;
}
void OrderStatus::clear_has_entered_by_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrderStatus::clear_entered_by_user() {
  entered_by_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entered_by_user();
}
const ::std::string& OrderStatus::entered_by_user() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.entered_by_user)
  return entered_by_user_.GetNoArena();
}
void OrderStatus::set_entered_by_user(const ::std::string& value) {
  set_has_entered_by_user();
  entered_by_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.entered_by_user)
}
void OrderStatus::set_entered_by_user(const char* value) {
  set_has_entered_by_user();
  entered_by_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.OrderStatus.entered_by_user)
}
void OrderStatus::set_entered_by_user(const char* value, size_t size) {
  set_has_entered_by_user();
  entered_by_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.OrderStatus.entered_by_user)
}
::std::string* OrderStatus::mutable_entered_by_user() {
  set_has_entered_by_user();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderStatus.entered_by_user)
  return entered_by_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderStatus::release_entered_by_user() {
  // @@protoc_insertion_point(field_release:WebAPI_1.OrderStatus.entered_by_user)
  clear_has_entered_by_user();
  return entered_by_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderStatus::set_allocated_entered_by_user(::std::string* entered_by_user) {
  if (entered_by_user != NULL) {
    set_has_entered_by_user();
  } else {
    clear_has_entered_by_user();
  }
  entered_by_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entered_by_user);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.OrderStatus.entered_by_user)
}

// required sint64 first_statement_date = 17;
bool OrderStatus::has_first_statement_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OrderStatus::set_has_first_statement_date() {
  _has_bits_[0] |= 0x00004000u;
}
void OrderStatus::clear_has_first_statement_date() {
  _has_bits_[0] &= ~0x00004000u;
}
void OrderStatus::clear_first_statement_date() {
  first_statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_first_statement_date();
}
::google::protobuf::int64 OrderStatus::first_statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.first_statement_date)
  return first_statement_date_;
}
void OrderStatus::set_first_statement_date(::google::protobuf::int64 value) {
  set_has_first_statement_date();
  first_statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.first_statement_date)
}

// optional sint64 last_statement_date = 18;
bool OrderStatus::has_last_statement_date() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void OrderStatus::set_has_last_statement_date() {
  _has_bits_[0] |= 0x00008000u;
}
void OrderStatus::clear_has_last_statement_date() {
  _has_bits_[0] &= ~0x00008000u;
}
void OrderStatus::clear_last_statement_date() {
  last_statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_last_statement_date();
}
::google::protobuf::int64 OrderStatus::last_statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.last_statement_date)
  return last_statement_date_;
}
void OrderStatus::set_last_statement_date(::google::protobuf::int64 value) {
  set_has_last_statement_date();
  last_statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.last_statement_date)
}

// repeated .WebAPI_1.ContractMetadata contract_metadata = 19;
int OrderStatus::contract_metadata_size() const {
  return contract_metadata_.size();
}
void OrderStatus::clear_contract_metadata() {
  contract_metadata_.Clear();
}
const ::WebAPI_1::ContractMetadata& OrderStatus::contract_metadata(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.contract_metadata)
  return contract_metadata_.Get(index);
}
::WebAPI_1::ContractMetadata* OrderStatus::mutable_contract_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.OrderStatus.contract_metadata)
  return contract_metadata_.Mutable(index);
}
::WebAPI_1::ContractMetadata* OrderStatus::add_contract_metadata() {
  // @@protoc_insertion_point(field_add:WebAPI_1.OrderStatus.contract_metadata)
  return contract_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::ContractMetadata >*
OrderStatus::mutable_contract_metadata() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.OrderStatus.contract_metadata)
  return &contract_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::ContractMetadata >&
OrderStatus::contract_metadata() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.OrderStatus.contract_metadata)
  return contract_metadata_;
}

// required sint32 account_id = 20;
bool OrderStatus::has_account_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void OrderStatus::set_has_account_id() {
  _has_bits_[0] |= 0x00010000u;
}
void OrderStatus::clear_has_account_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void OrderStatus::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 OrderStatus::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OrderStatus.account_id)
  return account_id_;
}
void OrderStatus::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OrderStatus.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionStatus::kStatusFieldNumber;
const int TransactionStatus::kTransIdFieldNumber;
const int TransactionStatus::kTransUtcTimeFieldNumber;
const int TransactionStatus::kRefTransIdFieldNumber;
const int TransactionStatus::kOrigClOrderIdFieldNumber;
const int TransactionStatus::kClOrderIdFieldNumber;
const int TransactionStatus::kFillQtyFieldNumber;
const int TransactionStatus::kFillPriceFieldNumber;
const int TransactionStatus::kTradeFieldNumber;
const int TransactionStatus::kPrevOrderQtyFieldNumber;
const int TransactionStatus::kOrderQtyFieldNumber;
const int TransactionStatus::kPrevLimitPriceFieldNumber;
const int TransactionStatus::kLimitPriceFieldNumber;
const int TransactionStatus::kPrevStopPriceFieldNumber;
const int TransactionStatus::kStopPriceFieldNumber;
const int TransactionStatus::kPrevVisibleQtyFieldNumber;
const int TransactionStatus::kVisibleQtyFieldNumber;
const int TransactionStatus::kPrevMinVisibleQtyFieldNumber;
const int TransactionStatus::kMinVisibleQtyFieldNumber;
const int TransactionStatus::kPrevFillQtyFieldNumber;
const int TransactionStatus::kPrevFillPriceFieldNumber;
const int TransactionStatus::kPrevOrderTypeFieldNumber;
const int TransactionStatus::kOrderTypeFieldNumber;
const int TransactionStatus::kPrevExecInstructionFieldNumber;
const int TransactionStatus::kExecInstructionFieldNumber;
const int TransactionStatus::kPrevDurationFieldNumber;
const int TransactionStatus::kDurationFieldNumber;
const int TransactionStatus::kPrevGoodThruDateFieldNumber;
const int TransactionStatus::kGoodThruDateFieldNumber;
const int TransactionStatus::kRejectCodeFieldNumber;
const int TransactionStatus::kFillCounterpartyFieldNumber;
const int TransactionStatus::kRouteClOrderIdFieldNumber;
const int TransactionStatus::kTextMessageFieldNumber;
const int TransactionStatus::kPrevGoodThruUtcTimeFieldNumber;
const int TransactionStatus::kGoodThruUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionStatus::TransactionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TransactionStatus)
}
TransactionStatus::TransactionStatus(const TransactionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trade_(from.trade_),
      prev_exec_instruction_(from.prev_exec_instruction_),
      exec_instruction_(from.exec_instruction_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_orig_cl_order_id()) {
    orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
  }
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cl_order_id()) {
    cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
  }
  fill_counterparty_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fill_counterparty()) {
    fill_counterparty_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fill_counterparty_);
  }
  route_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_route_cl_order_id()) {
    route_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_cl_order_id_);
  }
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&trans_id_, &from.trans_id_,
    reinterpret_cast<char*>(&good_thru_utc_time_) -
    reinterpret_cast<char*>(&trans_id_) + sizeof(good_thru_utc_time_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TransactionStatus)
}

void TransactionStatus::SharedCtor() {
  orig_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fill_counterparty_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_cl_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trans_id_, 0, reinterpret_cast<char*>(&good_thru_utc_time_) -
    reinterpret_cast<char*>(&trans_id_) + sizeof(good_thru_utc_time_));
  _cached_size_ = 0;
}

TransactionStatus::~TransactionStatus() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TransactionStatus)
  SharedDtor();
}

void TransactionStatus::SharedDtor() {
  orig_cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fill_counterparty_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_cl_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[51].descriptor;
}

const TransactionStatus& TransactionStatus::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TransactionStatus* TransactionStatus::New(::google::protobuf::Arena* arena) const {
  TransactionStatus* n = new TransactionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TransactionStatus)
  trade_.Clear();
  prev_exec_instruction_.Clear();
  exec_instruction_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_orig_cl_order_id()) {
      GOOGLE_DCHECK(!orig_cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*orig_cl_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_cl_order_id()) {
      GOOGLE_DCHECK(!cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cl_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_fill_counterparty()) {
      GOOGLE_DCHECK(!fill_counterparty_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fill_counterparty_.UnsafeRawStringPointer())->clear();
    }
    if (has_route_cl_order_id()) {
      GOOGLE_DCHECK(!route_cl_order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*route_cl_order_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_text_message()) {
      GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&trans_id_, 0, reinterpret_cast<char*>(&ref_trans_id_) -
      reinterpret_cast<char*>(&trans_id_) + sizeof(ref_trans_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&prev_stop_price_) -
      reinterpret_cast<char*>(&status_) + sizeof(prev_stop_price_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&stop_price_, 0, reinterpret_cast<char*>(&prev_order_type_) -
      reinterpret_cast<char*>(&stop_price_) + sizeof(prev_order_type_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&order_type_, 0, reinterpret_cast<char*>(&good_thru_utc_time_) -
      reinterpret_cast<char*>(&order_type_) + sizeof(good_thru_utc_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TransactionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8u) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 trans_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_trans_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trans_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 trans_utc_time = 3;
      case 3: {
        if (tag == 24u) {
          set_has_trans_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trans_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ref_trans_id = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ref_trans_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ref_trans_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string orig_cl_order_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TransactionStatus.orig_cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cl_order_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_order_id().data(), this->cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TransactionStatus.cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fill_qty = 7;
      case 7: {
        if (tag == 56u) {
          set_has_fill_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fill_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 fill_price = 8;
      case 8: {
        if (tag == 64u) {
          set_has_fill_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fill_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.Trade trade = 9;
      case 9: {
        if (tag == 74u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trade()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional uint32 prev_order_qty = 10;
      case 10: {
        if (tag == 80u) {
          set_has_prev_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prev_order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 order_qty = 11;
      case 11: {
        if (tag == 88u) {
          set_has_order_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 prev_limit_price = 12;
      case 12: {
        if (tag == 96u) {
          set_has_prev_limit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prev_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 limit_price = 13;
      case 13: {
        if (tag == 104u) {
          set_has_limit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 prev_stop_price = 14;
      case 14: {
        if (tag == 112u) {
          set_has_prev_stop_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prev_stop_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 stop_price = 15;
      case 15: {
        if (tag == 120u) {
          set_has_stop_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stop_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prev_visible_qty = 16;
      case 16: {
        if (tag == 128u) {
          set_has_prev_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prev_visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visible_qty = 17;
      case 17: {
        if (tag == 136u) {
          set_has_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prev_min_visible_qty = 18;
      case 18: {
        if (tag == 144u) {
          set_has_prev_min_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prev_min_visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_visible_qty = 19;
      case 19: {
        if (tag == 152u) {
          set_has_min_visible_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_visible_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prev_fill_qty = 20;
      case 20: {
        if (tag == 160u) {
          set_has_prev_fill_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prev_fill_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 prev_fill_price = 21;
      case 21: {
        if (tag == 168u) {
          set_has_prev_fill_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prev_fill_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prev_order_type = 22;
      case 22: {
        if (tag == 176u) {
          set_has_prev_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prev_order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 order_type = 23;
      case 23: {
        if (tag == 184u) {
          set_has_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 prev_exec_instruction = 24;
      case 24: {
        if (tag == 192u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192u, input, this->mutable_prev_exec_instruction())));
        } else if (tag == 194u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prev_exec_instruction())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 exec_instruction = 25;
      case 25: {
        if (tag == 200u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200u, input, this->mutable_exec_instruction())));
        } else if (tag == 202u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exec_instruction())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prev_duration = 26;
      case 26: {
        if (tag == 208u) {
          set_has_prev_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prev_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 27;
      case 27: {
        if (tag == 216u) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 prev_good_thru_date = 28;
      case 28: {
        if (tag == 224u) {
          set_has_prev_good_thru_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &prev_good_thru_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 good_thru_date = 29;
      case 29: {
        if (tag == 232u) {
          set_has_good_thru_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &good_thru_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reject_code = 30;
      case 30: {
        if (tag == 240u) {
          set_has_reject_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reject_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fill_counterparty = 31;
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fill_counterparty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fill_counterparty().data(), this->fill_counterparty().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TransactionStatus.fill_counterparty");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string route_cl_order_id = 32;
      case 32: {
        if (tag == 258u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_cl_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->route_cl_order_id().data(), this->route_cl_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TransactionStatus.route_cl_order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 33;
      case 33: {
        if (tag == 266u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TransactionStatus.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 prev_good_thru_utc_time = 34;
      case 34: {
        if (tag == 272u) {
          set_has_prev_good_thru_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &prev_good_thru_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 good_thru_utc_time = 35;
      case 35: {
        if (tag == 280u) {
          set_has_good_thru_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &good_thru_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TransactionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TransactionStatus)
  return false;
#undef DO_
}

void TransactionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TransactionStatus)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required uint64 trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->trans_id(), output);
  }

  // required sint64 trans_utc_time = 3;
  if (has_trans_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->trans_utc_time(), output);
  }

  // optional uint64 ref_trans_id = 4;
  if (has_ref_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ref_trans_id(), output);
  }

  // optional string orig_cl_order_id = 5;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.orig_cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orig_cl_order_id(), output);
  }

  // required string cl_order_id = 6;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cl_order_id(), output);
  }

  // optional uint32 fill_qty = 7;
  if (has_fill_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fill_qty(), output);
  }

  // optional sint32 fill_price = 8;
  if (has_fill_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->fill_price(), output);
  }

  // repeated .WebAPI_1.Trade trade = 9;
  for (unsigned int i = 0, n = this->trade_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->trade(i), output);
  }

  // optional uint32 prev_order_qty = 10;
  if (has_prev_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prev_order_qty(), output);
  }

  // optional uint32 order_qty = 11;
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->order_qty(), output);
  }

  // optional sint32 prev_limit_price = 12;
  if (has_prev_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->prev_limit_price(), output);
  }

  // optional sint32 limit_price = 13;
  if (has_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->limit_price(), output);
  }

  // optional sint32 prev_stop_price = 14;
  if (has_prev_stop_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->prev_stop_price(), output);
  }

  // optional sint32 stop_price = 15;
  if (has_stop_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->stop_price(), output);
  }

  // optional uint32 prev_visible_qty = 16;
  if (has_prev_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->prev_visible_qty(), output);
  }

  // optional uint32 visible_qty = 17;
  if (has_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->visible_qty(), output);
  }

  // optional uint32 prev_min_visible_qty = 18;
  if (has_prev_min_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->prev_min_visible_qty(), output);
  }

  // optional uint32 min_visible_qty = 19;
  if (has_min_visible_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->min_visible_qty(), output);
  }

  // optional uint32 prev_fill_qty = 20;
  if (has_prev_fill_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->prev_fill_qty(), output);
  }

  // optional sint32 prev_fill_price = 21;
  if (has_prev_fill_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->prev_fill_price(), output);
  }

  // optional uint32 prev_order_type = 22;
  if (has_prev_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->prev_order_type(), output);
  }

  // optional uint32 order_type = 23;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->order_type(), output);
  }

  // repeated uint32 prev_exec_instruction = 24;
  for (int i = 0; i < this->prev_exec_instruction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->prev_exec_instruction(i), output);
  }

  // repeated uint32 exec_instruction = 25;
  for (int i = 0; i < this->exec_instruction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->exec_instruction(i), output);
  }

  // optional uint32 prev_duration = 26;
  if (has_prev_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->prev_duration(), output);
  }

  // optional uint32 duration = 27;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->duration(), output);
  }

  // optional sint64 prev_good_thru_date = 28;
  if (has_prev_good_thru_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(28, this->prev_good_thru_date(), output);
  }

  // optional sint64 good_thru_date = 29;
  if (has_good_thru_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(29, this->good_thru_date(), output);
  }

  // optional uint32 reject_code = 30;
  if (has_reject_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->reject_code(), output);
  }

  // optional string fill_counterparty = 31;
  if (has_fill_counterparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fill_counterparty().data(), this->fill_counterparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.fill_counterparty");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->fill_counterparty(), output);
  }

  // optional string route_cl_order_id = 32;
  if (has_route_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_cl_order_id().data(), this->route_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.route_cl_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->route_cl_order_id(), output);
  }

  // optional string text_message = 33;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->text_message(), output);
  }

  // optional sint64 prev_good_thru_utc_time = 34;
  if (has_prev_good_thru_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(34, this->prev_good_thru_utc_time(), output);
  }

  // optional sint64 good_thru_utc_time = 35;
  if (has_good_thru_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(35, this->good_thru_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TransactionStatus)
}

::google::protobuf::uint8* TransactionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TransactionStatus)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required uint64 trans_id = 2;
  if (has_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->trans_id(), target);
  }

  // required sint64 trans_utc_time = 3;
  if (has_trans_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->trans_utc_time(), target);
  }

  // optional uint64 ref_trans_id = 4;
  if (has_ref_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ref_trans_id(), target);
  }

  // optional string orig_cl_order_id = 5;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_order_id().data(), this->orig_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.orig_cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orig_cl_order_id(), target);
  }

  // required string cl_order_id = 6;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_order_id().data(), this->cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cl_order_id(), target);
  }

  // optional uint32 fill_qty = 7;
  if (has_fill_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fill_qty(), target);
  }

  // optional sint32 fill_price = 8;
  if (has_fill_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->fill_price(), target);
  }

  // repeated .WebAPI_1.Trade trade = 9;
  for (unsigned int i = 0, n = this->trade_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->trade(i), false, target);
  }

  // optional uint32 prev_order_qty = 10;
  if (has_prev_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prev_order_qty(), target);
  }

  // optional uint32 order_qty = 11;
  if (has_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->order_qty(), target);
  }

  // optional sint32 prev_limit_price = 12;
  if (has_prev_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->prev_limit_price(), target);
  }

  // optional sint32 limit_price = 13;
  if (has_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->limit_price(), target);
  }

  // optional sint32 prev_stop_price = 14;
  if (has_prev_stop_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->prev_stop_price(), target);
  }

  // optional sint32 stop_price = 15;
  if (has_stop_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->stop_price(), target);
  }

  // optional uint32 prev_visible_qty = 16;
  if (has_prev_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->prev_visible_qty(), target);
  }

  // optional uint32 visible_qty = 17;
  if (has_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->visible_qty(), target);
  }

  // optional uint32 prev_min_visible_qty = 18;
  if (has_prev_min_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->prev_min_visible_qty(), target);
  }

  // optional uint32 min_visible_qty = 19;
  if (has_min_visible_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->min_visible_qty(), target);
  }

  // optional uint32 prev_fill_qty = 20;
  if (has_prev_fill_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->prev_fill_qty(), target);
  }

  // optional sint32 prev_fill_price = 21;
  if (has_prev_fill_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->prev_fill_price(), target);
  }

  // optional uint32 prev_order_type = 22;
  if (has_prev_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->prev_order_type(), target);
  }

  // optional uint32 order_type = 23;
  if (has_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->order_type(), target);
  }

  // repeated uint32 prev_exec_instruction = 24;
  for (int i = 0; i < this->prev_exec_instruction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(24, this->prev_exec_instruction(i), target);
  }

  // repeated uint32 exec_instruction = 25;
  for (int i = 0; i < this->exec_instruction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->exec_instruction(i), target);
  }

  // optional uint32 prev_duration = 26;
  if (has_prev_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->prev_duration(), target);
  }

  // optional uint32 duration = 27;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->duration(), target);
  }

  // optional sint64 prev_good_thru_date = 28;
  if (has_prev_good_thru_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(28, this->prev_good_thru_date(), target);
  }

  // optional sint64 good_thru_date = 29;
  if (has_good_thru_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(29, this->good_thru_date(), target);
  }

  // optional uint32 reject_code = 30;
  if (has_reject_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->reject_code(), target);
  }

  // optional string fill_counterparty = 31;
  if (has_fill_counterparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fill_counterparty().data(), this->fill_counterparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.fill_counterparty");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->fill_counterparty(), target);
  }

  // optional string route_cl_order_id = 32;
  if (has_route_cl_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_cl_order_id().data(), this->route_cl_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.route_cl_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->route_cl_order_id(), target);
  }

  // optional string text_message = 33;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TransactionStatus.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->text_message(), target);
  }

  // optional sint64 prev_good_thru_utc_time = 34;
  if (has_prev_good_thru_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(34, this->prev_good_thru_utc_time(), target);
  }

  // optional sint64 good_thru_utc_time = 35;
  if (has_good_thru_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(35, this->good_thru_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TransactionStatus)
  return target;
}

size_t TransactionStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.TransactionStatus)
  size_t total_size = 0;

  if (has_cl_order_id()) {
    // required string cl_order_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());
  }

  if (has_trans_id()) {
    // required uint64 trans_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trans_id());
  }

  if (has_trans_utc_time()) {
    // required sint64 trans_utc_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trans_utc_time());
  }

  if (has_status()) {
    // required uint32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t TransactionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TransactionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000162) ^ 0x00000162) == 0) {  // All required fields are present.
    // required string cl_order_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cl_order_id());

    // required uint64 trans_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trans_id());

    // required sint64 trans_utc_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trans_utc_time());

    // required uint32 status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.Trade trade = 9;
  {
    unsigned int count = this->trade_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade(i));
    }
  }

  // repeated uint32 prev_exec_instruction = 24;
  {
    size_t data_size = 0;
    unsigned int count = this->prev_exec_instruction_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->prev_exec_instruction(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->prev_exec_instruction_size());
    total_size += data_size;
  }

  // repeated uint32 exec_instruction = 25;
  {
    size_t data_size = 0;
    unsigned int count = this->exec_instruction_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exec_instruction(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->exec_instruction_size());
    total_size += data_size;
  }

  // optional string orig_cl_order_id = 5;
  if (has_orig_cl_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_cl_order_id());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional string fill_counterparty = 31;
    if (has_fill_counterparty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fill_counterparty());
    }

    // optional string route_cl_order_id = 32;
    if (has_route_cl_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_cl_order_id());
    }

    // optional string text_message = 33;
    if (has_text_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_message());
    }

  }
  // optional uint64 ref_trans_id = 4;
  if (has_ref_trans_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ref_trans_id());
  }

  if (_has_bits_[8 / 32] & 65024u) {
    // optional uint32 fill_qty = 7;
    if (has_fill_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fill_qty());
    }

    // optional sint32 fill_price = 8;
    if (has_fill_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fill_price());
    }

    // optional uint32 prev_order_qty = 10;
    if (has_prev_order_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prev_order_qty());
    }

    // optional uint32 order_qty = 11;
    if (has_order_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_qty());
    }

    // optional sint32 prev_limit_price = 12;
    if (has_prev_limit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prev_limit_price());
    }

    // optional sint32 limit_price = 13;
    if (has_limit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->limit_price());
    }

    // optional sint32 prev_stop_price = 14;
    if (has_prev_stop_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prev_stop_price());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional sint32 stop_price = 15;
    if (has_stop_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->stop_price());
    }

    // optional uint32 prev_visible_qty = 16;
    if (has_prev_visible_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prev_visible_qty());
    }

    // optional uint32 visible_qty = 17;
    if (has_visible_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visible_qty());
    }

    // optional uint32 prev_min_visible_qty = 18;
    if (has_prev_min_visible_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prev_min_visible_qty());
    }

    // optional uint32 min_visible_qty = 19;
    if (has_min_visible_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_visible_qty());
    }

    // optional uint32 prev_fill_qty = 20;
    if (has_prev_fill_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prev_fill_qty());
    }

    // optional sint32 prev_fill_price = 21;
    if (has_prev_fill_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prev_fill_price());
    }

    // optional uint32 prev_order_type = 22;
    if (has_prev_order_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prev_order_type());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 order_type = 23;
    if (has_order_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_type());
    }

    // optional uint32 prev_duration = 26;
    if (has_prev_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prev_duration());
    }

    // optional sint64 prev_good_thru_date = 28;
    if (has_prev_good_thru_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->prev_good_thru_date());
    }

    // optional uint32 duration = 27;
    if (has_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 reject_code = 30;
    if (has_reject_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reject_code());
    }

    // optional sint64 good_thru_date = 29;
    if (has_good_thru_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->good_thru_date());
    }

    // optional sint64 prev_good_thru_utc_time = 34;
    if (has_prev_good_thru_utc_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->prev_good_thru_utc_time());
    }

    // optional sint64 good_thru_utc_time = 35;
    if (has_good_thru_utc_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->good_thru_utc_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TransactionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TransactionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TransactionStatus)
    MergeFrom(*source);
  }
}

void TransactionStatus::MergeFrom(const TransactionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TransactionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trade_.MergeFrom(from.trade_);
  prev_exec_instruction_.MergeFrom(from.prev_exec_instruction_);
  exec_instruction_.MergeFrom(from.exec_instruction_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_orig_cl_order_id()) {
      set_has_orig_cl_order_id();
      orig_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_cl_order_id_);
    }
    if (from.has_cl_order_id()) {
      set_has_cl_order_id();
      cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cl_order_id_);
    }
    if (from.has_fill_counterparty()) {
      set_has_fill_counterparty();
      fill_counterparty_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fill_counterparty_);
    }
    if (from.has_route_cl_order_id()) {
      set_has_route_cl_order_id();
      route_cl_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_cl_order_id_);
    }
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
    if (from.has_trans_utc_time()) {
      set_trans_utc_time(from.trans_utc_time());
    }
    if (from.has_ref_trans_id()) {
      set_ref_trans_id(from.ref_trans_id());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fill_qty()) {
      set_fill_qty(from.fill_qty());
    }
    if (from.has_fill_price()) {
      set_fill_price(from.fill_price());
    }
    if (from.has_prev_order_qty()) {
      set_prev_order_qty(from.prev_order_qty());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
    if (from.has_prev_limit_price()) {
      set_prev_limit_price(from.prev_limit_price());
    }
    if (from.has_limit_price()) {
      set_limit_price(from.limit_price());
    }
    if (from.has_prev_stop_price()) {
      set_prev_stop_price(from.prev_stop_price());
    }
  }
  if (from._has_bits_[16 / 32] & 16711680u) {
    if (from.has_stop_price()) {
      set_stop_price(from.stop_price());
    }
    if (from.has_prev_visible_qty()) {
      set_prev_visible_qty(from.prev_visible_qty());
    }
    if (from.has_visible_qty()) {
      set_visible_qty(from.visible_qty());
    }
    if (from.has_prev_min_visible_qty()) {
      set_prev_min_visible_qty(from.prev_min_visible_qty());
    }
    if (from.has_min_visible_qty()) {
      set_min_visible_qty(from.min_visible_qty());
    }
    if (from.has_prev_fill_qty()) {
      set_prev_fill_qty(from.prev_fill_qty());
    }
    if (from.has_prev_fill_price()) {
      set_prev_fill_price(from.prev_fill_price());
    }
    if (from.has_prev_order_type()) {
      set_prev_order_type(from.prev_order_type());
    }
  }
  if (from._has_bits_[24 / 32] & 4278190080u) {
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_prev_duration()) {
      set_prev_duration(from.prev_duration());
    }
    if (from.has_prev_good_thru_date()) {
      set_prev_good_thru_date(from.prev_good_thru_date());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_reject_code()) {
      set_reject_code(from.reject_code());
    }
    if (from.has_good_thru_date()) {
      set_good_thru_date(from.good_thru_date());
    }
    if (from.has_prev_good_thru_utc_time()) {
      set_prev_good_thru_utc_time(from.prev_good_thru_utc_time());
    }
    if (from.has_good_thru_utc_time()) {
      set_good_thru_utc_time(from.good_thru_utc_time());
    }
  }
}

void TransactionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TransactionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStatus::CopyFrom(const TransactionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TransactionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000162) != 0x00000162) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trade())) return false;
  return true;
}

void TransactionStatus::Swap(TransactionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionStatus::InternalSwap(TransactionStatus* other) {
  trade_.UnsafeArenaSwap(&other->trade_);
  prev_exec_instruction_.UnsafeArenaSwap(&other->prev_exec_instruction_);
  exec_instruction_.UnsafeArenaSwap(&other->exec_instruction_);
  orig_cl_order_id_.Swap(&other->orig_cl_order_id_);
  cl_order_id_.Swap(&other->cl_order_id_);
  fill_counterparty_.Swap(&other->fill_counterparty_);
  route_cl_order_id_.Swap(&other->route_cl_order_id_);
  text_message_.Swap(&other->text_message_);
  std::swap(trans_id_, other->trans_id_);
  std::swap(trans_utc_time_, other->trans_utc_time_);
  std::swap(ref_trans_id_, other->ref_trans_id_);
  std::swap(status_, other->status_);
  std::swap(fill_qty_, other->fill_qty_);
  std::swap(fill_price_, other->fill_price_);
  std::swap(prev_order_qty_, other->prev_order_qty_);
  std::swap(order_qty_, other->order_qty_);
  std::swap(prev_limit_price_, other->prev_limit_price_);
  std::swap(limit_price_, other->limit_price_);
  std::swap(prev_stop_price_, other->prev_stop_price_);
  std::swap(stop_price_, other->stop_price_);
  std::swap(prev_visible_qty_, other->prev_visible_qty_);
  std::swap(visible_qty_, other->visible_qty_);
  std::swap(prev_min_visible_qty_, other->prev_min_visible_qty_);
  std::swap(min_visible_qty_, other->min_visible_qty_);
  std::swap(prev_fill_qty_, other->prev_fill_qty_);
  std::swap(prev_fill_price_, other->prev_fill_price_);
  std::swap(prev_order_type_, other->prev_order_type_);
  std::swap(order_type_, other->order_type_);
  std::swap(prev_duration_, other->prev_duration_);
  std::swap(prev_good_thru_date_, other->prev_good_thru_date_);
  std::swap(duration_, other->duration_);
  std::swap(reject_code_, other->reject_code_);
  std::swap(good_thru_date_, other->good_thru_date_);
  std::swap(prev_good_thru_utc_time_, other->prev_good_thru_utc_time_);
  std::swap(good_thru_utc_time_, other->good_thru_utc_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionStatus

// required uint32 status = 1;
bool TransactionStatus::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TransactionStatus::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
void TransactionStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void TransactionStatus::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 TransactionStatus::status() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.status)
  return status_;
}
void TransactionStatus::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.status)
}

// required uint64 trans_id = 2;
bool TransactionStatus::has_trans_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransactionStatus::set_has_trans_id() {
  _has_bits_[0] |= 0x00000020u;
}
void TransactionStatus::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransactionStatus::clear_trans_id() {
  trans_id_ = GOOGLE_ULONGLONG(0);
  clear_has_trans_id();
}
::google::protobuf::uint64 TransactionStatus::trans_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.trans_id)
  return trans_id_;
}
void TransactionStatus::set_trans_id(::google::protobuf::uint64 value) {
  set_has_trans_id();
  trans_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.trans_id)
}

// required sint64 trans_utc_time = 3;
bool TransactionStatus::has_trans_utc_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TransactionStatus::set_has_trans_utc_time() {
  _has_bits_[0] |= 0x00000040u;
}
void TransactionStatus::clear_has_trans_utc_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void TransactionStatus::clear_trans_utc_time() {
  trans_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_trans_utc_time();
}
::google::protobuf::int64 TransactionStatus::trans_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.trans_utc_time)
  return trans_utc_time_;
}
void TransactionStatus::set_trans_utc_time(::google::protobuf::int64 value) {
  set_has_trans_utc_time();
  trans_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.trans_utc_time)
}

// optional uint64 ref_trans_id = 4;
bool TransactionStatus::has_ref_trans_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TransactionStatus::set_has_ref_trans_id() {
  _has_bits_[0] |= 0x00000080u;
}
void TransactionStatus::clear_has_ref_trans_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void TransactionStatus::clear_ref_trans_id() {
  ref_trans_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ref_trans_id();
}
::google::protobuf::uint64 TransactionStatus::ref_trans_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.ref_trans_id)
  return ref_trans_id_;
}
void TransactionStatus::set_ref_trans_id(::google::protobuf::uint64 value) {
  set_has_ref_trans_id();
  ref_trans_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.ref_trans_id)
}

// optional string orig_cl_order_id = 5;
bool TransactionStatus::has_orig_cl_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionStatus::set_has_orig_cl_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionStatus::clear_has_orig_cl_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionStatus::clear_orig_cl_order_id() {
  orig_cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orig_cl_order_id();
}
const ::std::string& TransactionStatus::orig_cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.orig_cl_order_id)
  return orig_cl_order_id_.GetNoArena();
}
void TransactionStatus::set_orig_cl_order_id(const ::std::string& value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.orig_cl_order_id)
}
void TransactionStatus::set_orig_cl_order_id(const char* value) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TransactionStatus.orig_cl_order_id)
}
void TransactionStatus::set_orig_cl_order_id(const char* value, size_t size) {
  set_has_orig_cl_order_id();
  orig_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TransactionStatus.orig_cl_order_id)
}
::std::string* TransactionStatus::mutable_orig_cl_order_id() {
  set_has_orig_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TransactionStatus.orig_cl_order_id)
  return orig_cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionStatus::release_orig_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TransactionStatus.orig_cl_order_id)
  clear_has_orig_cl_order_id();
  return orig_cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionStatus::set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id) {
  if (orig_cl_order_id != NULL) {
    set_has_orig_cl_order_id();
  } else {
    clear_has_orig_cl_order_id();
  }
  orig_cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orig_cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TransactionStatus.orig_cl_order_id)
}

// required string cl_order_id = 6;
bool TransactionStatus::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionStatus::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionStatus::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionStatus::clear_cl_order_id() {
  cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cl_order_id();
}
const ::std::string& TransactionStatus::cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.cl_order_id)
  return cl_order_id_.GetNoArena();
}
void TransactionStatus::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.cl_order_id)
}
void TransactionStatus::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TransactionStatus.cl_order_id)
}
void TransactionStatus::set_cl_order_id(const char* value, size_t size) {
  set_has_cl_order_id();
  cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TransactionStatus.cl_order_id)
}
::std::string* TransactionStatus::mutable_cl_order_id() {
  set_has_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TransactionStatus.cl_order_id)
  return cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionStatus::release_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TransactionStatus.cl_order_id)
  clear_has_cl_order_id();
  return cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionStatus::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id != NULL) {
    set_has_cl_order_id();
  } else {
    clear_has_cl_order_id();
  }
  cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TransactionStatus.cl_order_id)
}

// optional uint32 fill_qty = 7;
bool TransactionStatus::has_fill_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TransactionStatus::set_has_fill_qty() {
  _has_bits_[0] |= 0x00000200u;
}
void TransactionStatus::clear_has_fill_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
void TransactionStatus::clear_fill_qty() {
  fill_qty_ = 0u;
  clear_has_fill_qty();
}
::google::protobuf::uint32 TransactionStatus::fill_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.fill_qty)
  return fill_qty_;
}
void TransactionStatus::set_fill_qty(::google::protobuf::uint32 value) {
  set_has_fill_qty();
  fill_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.fill_qty)
}

// optional sint32 fill_price = 8;
bool TransactionStatus::has_fill_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TransactionStatus::set_has_fill_price() {
  _has_bits_[0] |= 0x00000400u;
}
void TransactionStatus::clear_has_fill_price() {
  _has_bits_[0] &= ~0x00000400u;
}
void TransactionStatus::clear_fill_price() {
  fill_price_ = 0;
  clear_has_fill_price();
}
::google::protobuf::int32 TransactionStatus::fill_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.fill_price)
  return fill_price_;
}
void TransactionStatus::set_fill_price(::google::protobuf::int32 value) {
  set_has_fill_price();
  fill_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.fill_price)
}

// repeated .WebAPI_1.Trade trade = 9;
int TransactionStatus::trade_size() const {
  return trade_.size();
}
void TransactionStatus::clear_trade() {
  trade_.Clear();
}
const ::WebAPI_1::Trade& TransactionStatus::trade(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.trade)
  return trade_.Get(index);
}
::WebAPI_1::Trade* TransactionStatus::mutable_trade(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TransactionStatus.trade)
  return trade_.Mutable(index);
}
::WebAPI_1::Trade* TransactionStatus::add_trade() {
  // @@protoc_insertion_point(field_add:WebAPI_1.TransactionStatus.trade)
  return trade_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::Trade >*
TransactionStatus::mutable_trade() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.TransactionStatus.trade)
  return &trade_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::Trade >&
TransactionStatus::trade() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.TransactionStatus.trade)
  return trade_;
}

// optional uint32 prev_order_qty = 10;
bool TransactionStatus::has_prev_order_qty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TransactionStatus::set_has_prev_order_qty() {
  _has_bits_[0] |= 0x00000800u;
}
void TransactionStatus::clear_has_prev_order_qty() {
  _has_bits_[0] &= ~0x00000800u;
}
void TransactionStatus::clear_prev_order_qty() {
  prev_order_qty_ = 0u;
  clear_has_prev_order_qty();
}
::google::protobuf::uint32 TransactionStatus::prev_order_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_order_qty)
  return prev_order_qty_;
}
void TransactionStatus::set_prev_order_qty(::google::protobuf::uint32 value) {
  set_has_prev_order_qty();
  prev_order_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_order_qty)
}

// optional uint32 order_qty = 11;
bool TransactionStatus::has_order_qty() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TransactionStatus::set_has_order_qty() {
  _has_bits_[0] |= 0x00001000u;
}
void TransactionStatus::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00001000u;
}
void TransactionStatus::clear_order_qty() {
  order_qty_ = 0u;
  clear_has_order_qty();
}
::google::protobuf::uint32 TransactionStatus::order_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.order_qty)
  return order_qty_;
}
void TransactionStatus::set_order_qty(::google::protobuf::uint32 value) {
  set_has_order_qty();
  order_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.order_qty)
}

// optional sint32 prev_limit_price = 12;
bool TransactionStatus::has_prev_limit_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TransactionStatus::set_has_prev_limit_price() {
  _has_bits_[0] |= 0x00002000u;
}
void TransactionStatus::clear_has_prev_limit_price() {
  _has_bits_[0] &= ~0x00002000u;
}
void TransactionStatus::clear_prev_limit_price() {
  prev_limit_price_ = 0;
  clear_has_prev_limit_price();
}
::google::protobuf::int32 TransactionStatus::prev_limit_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_limit_price)
  return prev_limit_price_;
}
void TransactionStatus::set_prev_limit_price(::google::protobuf::int32 value) {
  set_has_prev_limit_price();
  prev_limit_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_limit_price)
}

// optional sint32 limit_price = 13;
bool TransactionStatus::has_limit_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TransactionStatus::set_has_limit_price() {
  _has_bits_[0] |= 0x00004000u;
}
void TransactionStatus::clear_has_limit_price() {
  _has_bits_[0] &= ~0x00004000u;
}
void TransactionStatus::clear_limit_price() {
  limit_price_ = 0;
  clear_has_limit_price();
}
::google::protobuf::int32 TransactionStatus::limit_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.limit_price)
  return limit_price_;
}
void TransactionStatus::set_limit_price(::google::protobuf::int32 value) {
  set_has_limit_price();
  limit_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.limit_price)
}

// optional sint32 prev_stop_price = 14;
bool TransactionStatus::has_prev_stop_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TransactionStatus::set_has_prev_stop_price() {
  _has_bits_[0] |= 0x00008000u;
}
void TransactionStatus::clear_has_prev_stop_price() {
  _has_bits_[0] &= ~0x00008000u;
}
void TransactionStatus::clear_prev_stop_price() {
  prev_stop_price_ = 0;
  clear_has_prev_stop_price();
}
::google::protobuf::int32 TransactionStatus::prev_stop_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_stop_price)
  return prev_stop_price_;
}
void TransactionStatus::set_prev_stop_price(::google::protobuf::int32 value) {
  set_has_prev_stop_price();
  prev_stop_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_stop_price)
}

// optional sint32 stop_price = 15;
bool TransactionStatus::has_stop_price() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TransactionStatus::set_has_stop_price() {
  _has_bits_[0] |= 0x00010000u;
}
void TransactionStatus::clear_has_stop_price() {
  _has_bits_[0] &= ~0x00010000u;
}
void TransactionStatus::clear_stop_price() {
  stop_price_ = 0;
  clear_has_stop_price();
}
::google::protobuf::int32 TransactionStatus::stop_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.stop_price)
  return stop_price_;
}
void TransactionStatus::set_stop_price(::google::protobuf::int32 value) {
  set_has_stop_price();
  stop_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.stop_price)
}

// optional uint32 prev_visible_qty = 16;
bool TransactionStatus::has_prev_visible_qty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TransactionStatus::set_has_prev_visible_qty() {
  _has_bits_[0] |= 0x00020000u;
}
void TransactionStatus::clear_has_prev_visible_qty() {
  _has_bits_[0] &= ~0x00020000u;
}
void TransactionStatus::clear_prev_visible_qty() {
  prev_visible_qty_ = 0u;
  clear_has_prev_visible_qty();
}
::google::protobuf::uint32 TransactionStatus::prev_visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_visible_qty)
  return prev_visible_qty_;
}
void TransactionStatus::set_prev_visible_qty(::google::protobuf::uint32 value) {
  set_has_prev_visible_qty();
  prev_visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_visible_qty)
}

// optional uint32 visible_qty = 17;
bool TransactionStatus::has_visible_qty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TransactionStatus::set_has_visible_qty() {
  _has_bits_[0] |= 0x00040000u;
}
void TransactionStatus::clear_has_visible_qty() {
  _has_bits_[0] &= ~0x00040000u;
}
void TransactionStatus::clear_visible_qty() {
  visible_qty_ = 0u;
  clear_has_visible_qty();
}
::google::protobuf::uint32 TransactionStatus::visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.visible_qty)
  return visible_qty_;
}
void TransactionStatus::set_visible_qty(::google::protobuf::uint32 value) {
  set_has_visible_qty();
  visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.visible_qty)
}

// optional uint32 prev_min_visible_qty = 18;
bool TransactionStatus::has_prev_min_visible_qty() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TransactionStatus::set_has_prev_min_visible_qty() {
  _has_bits_[0] |= 0x00080000u;
}
void TransactionStatus::clear_has_prev_min_visible_qty() {
  _has_bits_[0] &= ~0x00080000u;
}
void TransactionStatus::clear_prev_min_visible_qty() {
  prev_min_visible_qty_ = 0u;
  clear_has_prev_min_visible_qty();
}
::google::protobuf::uint32 TransactionStatus::prev_min_visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_min_visible_qty)
  return prev_min_visible_qty_;
}
void TransactionStatus::set_prev_min_visible_qty(::google::protobuf::uint32 value) {
  set_has_prev_min_visible_qty();
  prev_min_visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_min_visible_qty)
}

// optional uint32 min_visible_qty = 19;
bool TransactionStatus::has_min_visible_qty() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TransactionStatus::set_has_min_visible_qty() {
  _has_bits_[0] |= 0x00100000u;
}
void TransactionStatus::clear_has_min_visible_qty() {
  _has_bits_[0] &= ~0x00100000u;
}
void TransactionStatus::clear_min_visible_qty() {
  min_visible_qty_ = 0u;
  clear_has_min_visible_qty();
}
::google::protobuf::uint32 TransactionStatus::min_visible_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.min_visible_qty)
  return min_visible_qty_;
}
void TransactionStatus::set_min_visible_qty(::google::protobuf::uint32 value) {
  set_has_min_visible_qty();
  min_visible_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.min_visible_qty)
}

// optional uint32 prev_fill_qty = 20;
bool TransactionStatus::has_prev_fill_qty() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TransactionStatus::set_has_prev_fill_qty() {
  _has_bits_[0] |= 0x00200000u;
}
void TransactionStatus::clear_has_prev_fill_qty() {
  _has_bits_[0] &= ~0x00200000u;
}
void TransactionStatus::clear_prev_fill_qty() {
  prev_fill_qty_ = 0u;
  clear_has_prev_fill_qty();
}
::google::protobuf::uint32 TransactionStatus::prev_fill_qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_fill_qty)
  return prev_fill_qty_;
}
void TransactionStatus::set_prev_fill_qty(::google::protobuf::uint32 value) {
  set_has_prev_fill_qty();
  prev_fill_qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_fill_qty)
}

// optional sint32 prev_fill_price = 21;
bool TransactionStatus::has_prev_fill_price() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TransactionStatus::set_has_prev_fill_price() {
  _has_bits_[0] |= 0x00400000u;
}
void TransactionStatus::clear_has_prev_fill_price() {
  _has_bits_[0] &= ~0x00400000u;
}
void TransactionStatus::clear_prev_fill_price() {
  prev_fill_price_ = 0;
  clear_has_prev_fill_price();
}
::google::protobuf::int32 TransactionStatus::prev_fill_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_fill_price)
  return prev_fill_price_;
}
void TransactionStatus::set_prev_fill_price(::google::protobuf::int32 value) {
  set_has_prev_fill_price();
  prev_fill_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_fill_price)
}

// optional uint32 prev_order_type = 22;
bool TransactionStatus::has_prev_order_type() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TransactionStatus::set_has_prev_order_type() {
  _has_bits_[0] |= 0x00800000u;
}
void TransactionStatus::clear_has_prev_order_type() {
  _has_bits_[0] &= ~0x00800000u;
}
void TransactionStatus::clear_prev_order_type() {
  prev_order_type_ = 0u;
  clear_has_prev_order_type();
}
::google::protobuf::uint32 TransactionStatus::prev_order_type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_order_type)
  return prev_order_type_;
}
void TransactionStatus::set_prev_order_type(::google::protobuf::uint32 value) {
  set_has_prev_order_type();
  prev_order_type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_order_type)
}

// optional uint32 order_type = 23;
bool TransactionStatus::has_order_type() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void TransactionStatus::set_has_order_type() {
  _has_bits_[0] |= 0x01000000u;
}
void TransactionStatus::clear_has_order_type() {
  _has_bits_[0] &= ~0x01000000u;
}
void TransactionStatus::clear_order_type() {
  order_type_ = 0u;
  clear_has_order_type();
}
::google::protobuf::uint32 TransactionStatus::order_type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.order_type)
  return order_type_;
}
void TransactionStatus::set_order_type(::google::protobuf::uint32 value) {
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.order_type)
}

// repeated uint32 prev_exec_instruction = 24;
int TransactionStatus::prev_exec_instruction_size() const {
  return prev_exec_instruction_.size();
}
void TransactionStatus::clear_prev_exec_instruction() {
  prev_exec_instruction_.Clear();
}
::google::protobuf::uint32 TransactionStatus::prev_exec_instruction(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_exec_instruction)
  return prev_exec_instruction_.Get(index);
}
void TransactionStatus::set_prev_exec_instruction(int index, ::google::protobuf::uint32 value) {
  prev_exec_instruction_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_exec_instruction)
}
void TransactionStatus::add_prev_exec_instruction(::google::protobuf::uint32 value) {
  prev_exec_instruction_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.TransactionStatus.prev_exec_instruction)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TransactionStatus::prev_exec_instruction() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.TransactionStatus.prev_exec_instruction)
  return prev_exec_instruction_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TransactionStatus::mutable_prev_exec_instruction() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.TransactionStatus.prev_exec_instruction)
  return &prev_exec_instruction_;
}

// repeated uint32 exec_instruction = 25;
int TransactionStatus::exec_instruction_size() const {
  return exec_instruction_.size();
}
void TransactionStatus::clear_exec_instruction() {
  exec_instruction_.Clear();
}
::google::protobuf::uint32 TransactionStatus::exec_instruction(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.exec_instruction)
  return exec_instruction_.Get(index);
}
void TransactionStatus::set_exec_instruction(int index, ::google::protobuf::uint32 value) {
  exec_instruction_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.exec_instruction)
}
void TransactionStatus::add_exec_instruction(::google::protobuf::uint32 value) {
  exec_instruction_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.TransactionStatus.exec_instruction)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TransactionStatus::exec_instruction() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.TransactionStatus.exec_instruction)
  return exec_instruction_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TransactionStatus::mutable_exec_instruction() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.TransactionStatus.exec_instruction)
  return &exec_instruction_;
}

// optional uint32 prev_duration = 26;
bool TransactionStatus::has_prev_duration() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void TransactionStatus::set_has_prev_duration() {
  _has_bits_[0] |= 0x02000000u;
}
void TransactionStatus::clear_has_prev_duration() {
  _has_bits_[0] &= ~0x02000000u;
}
void TransactionStatus::clear_prev_duration() {
  prev_duration_ = 0u;
  clear_has_prev_duration();
}
::google::protobuf::uint32 TransactionStatus::prev_duration() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_duration)
  return prev_duration_;
}
void TransactionStatus::set_prev_duration(::google::protobuf::uint32 value) {
  set_has_prev_duration();
  prev_duration_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_duration)
}

// optional uint32 duration = 27;
bool TransactionStatus::has_duration() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void TransactionStatus::set_has_duration() {
  _has_bits_[0] |= 0x08000000u;
}
void TransactionStatus::clear_has_duration() {
  _has_bits_[0] &= ~0x08000000u;
}
void TransactionStatus::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 TransactionStatus::duration() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.duration)
  return duration_;
}
void TransactionStatus::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.duration)
}

// optional sint64 prev_good_thru_date = 28;
bool TransactionStatus::has_prev_good_thru_date() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void TransactionStatus::set_has_prev_good_thru_date() {
  _has_bits_[0] |= 0x04000000u;
}
void TransactionStatus::clear_has_prev_good_thru_date() {
  _has_bits_[0] &= ~0x04000000u;
}
void TransactionStatus::clear_prev_good_thru_date() {
  prev_good_thru_date_ = GOOGLE_LONGLONG(0);
  clear_has_prev_good_thru_date();
}
::google::protobuf::int64 TransactionStatus::prev_good_thru_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_good_thru_date)
  return prev_good_thru_date_;
}
void TransactionStatus::set_prev_good_thru_date(::google::protobuf::int64 value) {
  set_has_prev_good_thru_date();
  prev_good_thru_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_good_thru_date)
}

// optional sint64 good_thru_date = 29;
bool TransactionStatus::has_good_thru_date() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void TransactionStatus::set_has_good_thru_date() {
  _has_bits_[0] |= 0x20000000u;
}
void TransactionStatus::clear_has_good_thru_date() {
  _has_bits_[0] &= ~0x20000000u;
}
void TransactionStatus::clear_good_thru_date() {
  good_thru_date_ = GOOGLE_LONGLONG(0);
  clear_has_good_thru_date();
}
::google::protobuf::int64 TransactionStatus::good_thru_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.good_thru_date)
  return good_thru_date_;
}
void TransactionStatus::set_good_thru_date(::google::protobuf::int64 value) {
  set_has_good_thru_date();
  good_thru_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.good_thru_date)
}

// optional uint32 reject_code = 30;
bool TransactionStatus::has_reject_code() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void TransactionStatus::set_has_reject_code() {
  _has_bits_[0] |= 0x10000000u;
}
void TransactionStatus::clear_has_reject_code() {
  _has_bits_[0] &= ~0x10000000u;
}
void TransactionStatus::clear_reject_code() {
  reject_code_ = 0u;
  clear_has_reject_code();
}
::google::protobuf::uint32 TransactionStatus::reject_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.reject_code)
  return reject_code_;
}
void TransactionStatus::set_reject_code(::google::protobuf::uint32 value) {
  set_has_reject_code();
  reject_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.reject_code)
}

// optional string fill_counterparty = 31;
bool TransactionStatus::has_fill_counterparty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionStatus::set_has_fill_counterparty() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionStatus::clear_has_fill_counterparty() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionStatus::clear_fill_counterparty() {
  fill_counterparty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fill_counterparty();
}
const ::std::string& TransactionStatus::fill_counterparty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.fill_counterparty)
  return fill_counterparty_.GetNoArena();
}
void TransactionStatus::set_fill_counterparty(const ::std::string& value) {
  set_has_fill_counterparty();
  fill_counterparty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.fill_counterparty)
}
void TransactionStatus::set_fill_counterparty(const char* value) {
  set_has_fill_counterparty();
  fill_counterparty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TransactionStatus.fill_counterparty)
}
void TransactionStatus::set_fill_counterparty(const char* value, size_t size) {
  set_has_fill_counterparty();
  fill_counterparty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TransactionStatus.fill_counterparty)
}
::std::string* TransactionStatus::mutable_fill_counterparty() {
  set_has_fill_counterparty();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TransactionStatus.fill_counterparty)
  return fill_counterparty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionStatus::release_fill_counterparty() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TransactionStatus.fill_counterparty)
  clear_has_fill_counterparty();
  return fill_counterparty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionStatus::set_allocated_fill_counterparty(::std::string* fill_counterparty) {
  if (fill_counterparty != NULL) {
    set_has_fill_counterparty();
  } else {
    clear_has_fill_counterparty();
  }
  fill_counterparty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fill_counterparty);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TransactionStatus.fill_counterparty)
}

// optional string route_cl_order_id = 32;
bool TransactionStatus::has_route_cl_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionStatus::set_has_route_cl_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionStatus::clear_has_route_cl_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionStatus::clear_route_cl_order_id() {
  route_cl_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route_cl_order_id();
}
const ::std::string& TransactionStatus::route_cl_order_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.route_cl_order_id)
  return route_cl_order_id_.GetNoArena();
}
void TransactionStatus::set_route_cl_order_id(const ::std::string& value) {
  set_has_route_cl_order_id();
  route_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.route_cl_order_id)
}
void TransactionStatus::set_route_cl_order_id(const char* value) {
  set_has_route_cl_order_id();
  route_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TransactionStatus.route_cl_order_id)
}
void TransactionStatus::set_route_cl_order_id(const char* value, size_t size) {
  set_has_route_cl_order_id();
  route_cl_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TransactionStatus.route_cl_order_id)
}
::std::string* TransactionStatus::mutable_route_cl_order_id() {
  set_has_route_cl_order_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TransactionStatus.route_cl_order_id)
  return route_cl_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionStatus::release_route_cl_order_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TransactionStatus.route_cl_order_id)
  clear_has_route_cl_order_id();
  return route_cl_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionStatus::set_allocated_route_cl_order_id(::std::string* route_cl_order_id) {
  if (route_cl_order_id != NULL) {
    set_has_route_cl_order_id();
  } else {
    clear_has_route_cl_order_id();
  }
  route_cl_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_cl_order_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TransactionStatus.route_cl_order_id)
}

// optional string text_message = 33;
bool TransactionStatus::has_text_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionStatus::set_has_text_message() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionStatus::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionStatus::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& TransactionStatus::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.text_message)
  return text_message_.GetNoArena();
}
void TransactionStatus::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.text_message)
}
void TransactionStatus::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TransactionStatus.text_message)
}
void TransactionStatus::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TransactionStatus.text_message)
}
::std::string* TransactionStatus::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TransactionStatus.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionStatus::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TransactionStatus.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionStatus::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TransactionStatus.text_message)
}

// optional sint64 prev_good_thru_utc_time = 34;
bool TransactionStatus::has_prev_good_thru_utc_time() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void TransactionStatus::set_has_prev_good_thru_utc_time() {
  _has_bits_[0] |= 0x40000000u;
}
void TransactionStatus::clear_has_prev_good_thru_utc_time() {
  _has_bits_[0] &= ~0x40000000u;
}
void TransactionStatus::clear_prev_good_thru_utc_time() {
  prev_good_thru_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_prev_good_thru_utc_time();
}
::google::protobuf::int64 TransactionStatus::prev_good_thru_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.prev_good_thru_utc_time)
  return prev_good_thru_utc_time_;
}
void TransactionStatus::set_prev_good_thru_utc_time(::google::protobuf::int64 value) {
  set_has_prev_good_thru_utc_time();
  prev_good_thru_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.prev_good_thru_utc_time)
}

// optional sint64 good_thru_utc_time = 35;
bool TransactionStatus::has_good_thru_utc_time() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void TransactionStatus::set_has_good_thru_utc_time() {
  _has_bits_[0] |= 0x80000000u;
}
void TransactionStatus::clear_has_good_thru_utc_time() {
  _has_bits_[0] &= ~0x80000000u;
}
void TransactionStatus::clear_good_thru_utc_time() {
  good_thru_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_good_thru_utc_time();
}
::google::protobuf::int64 TransactionStatus::good_thru_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TransactionStatus.good_thru_utc_time)
  return good_thru_utc_time_;
}
void TransactionStatus::set_good_thru_utc_time(::google::protobuf::int64 value) {
  set_has_good_thru_utc_time();
  good_thru_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TransactionStatus.good_thru_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trade::kTradeIdFieldNumber;
const int Trade::kContractIdFieldNumber;
const int Trade::kStatementDateFieldNumber;
const int Trade::kTradeUtcTimeFieldNumber;
const int Trade::kTradeDateFieldNumber;
const int Trade::kPriceFieldNumber;
const int Trade::kSideFieldNumber;
const int Trade::kQtyFieldNumber;
const int Trade::kTradeCounterpartyFieldNumber;
const int Trade::kIsAggressiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trade::Trade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Trade)
}
Trade::Trade(const Trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trade_id()) {
    trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  trade_counterparty_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trade_counterparty()) {
    trade_counterparty_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_counterparty_);
  }
  ::memcpy(&statement_date_, &from.statement_date_,
    reinterpret_cast<char*>(&is_aggressive_) -
    reinterpret_cast<char*>(&statement_date_) + sizeof(is_aggressive_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Trade)
}

void Trade::SharedCtor() {
  _cached_size_ = 0;
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_counterparty_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&statement_date_, 0, reinterpret_cast<char*>(&is_aggressive_) -
    reinterpret_cast<char*>(&statement_date_) + sizeof(is_aggressive_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Trade)
  SharedDtor();
}

void Trade::SharedDtor() {
  trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_counterparty_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Trade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[52].descriptor;
}

const Trade& Trade::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Trade* Trade::New(::google::protobuf::Arena* arena) const {
  Trade* n = new Trade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Trade)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_trade_id()) {
      GOOGLE_DCHECK(!trade_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trade_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_trade_counterparty()) {
      GOOGLE_DCHECK(!trade_counterparty_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trade_counterparty_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&statement_date_, 0, reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&statement_date_) + sizeof(side_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&qty_, 0, reinterpret_cast<char*>(&is_aggressive_) -
      reinterpret_cast<char*>(&qty_) + sizeof(is_aggressive_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Trade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trade_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trade_id().data(), this->trade_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Trade.trade_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 contract_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 statement_date = 3;
      case 3: {
        if (tag == 24u) {
          set_has_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 trade_utc_time = 4;
      case 4: {
        if (tag == 32u) {
          set_has_trade_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trade_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 trade_date = 5;
      case 5: {
        if (tag == 40u) {
          set_has_trade_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trade_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 price = 6;
      case 6: {
        if (tag == 48u) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 side = 7;
      case 7: {
        if (tag == 56u) {
          set_has_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 8;
      case 8: {
        if (tag == 64u) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trade_counterparty = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_counterparty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trade_counterparty().data(), this->trade_counterparty().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.Trade.trade_counterparty");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_aggressive = 10;
      case 10: {
        if (tag == 80u) {
          set_has_is_aggressive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_aggressive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Trade)
  return false;
#undef DO_
}

void Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Trade)
  // required string trade_id = 1;
  if (has_trade_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_id().data(), this->trade_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Trade.trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trade_id(), output);
  }

  // required uint32 contract_id = 2;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contract_id(), output);
  }

  // required sint64 statement_date = 3;
  if (has_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->statement_date(), output);
  }

  // required sint64 trade_utc_time = 4;
  if (has_trade_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->trade_utc_time(), output);
  }

  // required sint64 trade_date = 5;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->trade_date(), output);
  }

  // required sint32 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->price(), output);
  }

  // required uint32 side = 7;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->side(), output);
  }

  // required uint32 qty = 8;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->qty(), output);
  }

  // optional string trade_counterparty = 9;
  if (has_trade_counterparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_counterparty().data(), this->trade_counterparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Trade.trade_counterparty");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->trade_counterparty(), output);
  }

  // optional bool is_aggressive = 10;
  if (has_is_aggressive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_aggressive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Trade)
}

::google::protobuf::uint8* Trade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Trade)
  // required string trade_id = 1;
  if (has_trade_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_id().data(), this->trade_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Trade.trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trade_id(), target);
  }

  // required uint32 contract_id = 2;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contract_id(), target);
  }

  // required sint64 statement_date = 3;
  if (has_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->statement_date(), target);
  }

  // required sint64 trade_utc_time = 4;
  if (has_trade_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->trade_utc_time(), target);
  }

  // required sint64 trade_date = 5;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->trade_date(), target);
  }

  // required sint32 price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->price(), target);
  }

  // required uint32 side = 7;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->side(), target);
  }

  // required uint32 qty = 8;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->qty(), target);
  }

  // optional string trade_counterparty = 9;
  if (has_trade_counterparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trade_counterparty().data(), this->trade_counterparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.Trade.trade_counterparty");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->trade_counterparty(), target);
  }

  // optional bool is_aggressive = 10;
  if (has_is_aggressive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_aggressive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Trade)
  return target;
}

size_t Trade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.Trade)
  size_t total_size = 0;

  if (has_trade_id()) {
    // required string trade_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_id());
  }

  if (has_statement_date()) {
    // required sint64 statement_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());
  }

  if (has_trade_utc_time()) {
    // required sint64 trade_utc_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_utc_time());
  }

  if (has_contract_id()) {
    // required uint32 contract_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  if (has_price()) {
    // required sint32 price = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->price());
  }

  if (has_trade_date()) {
    // required sint64 trade_date = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_date());
  }

  if (has_side()) {
    // required uint32 side = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->side());
  }

  if (has_qty()) {
    // required uint32 qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  return total_size;
}
size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Trade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001fd) ^ 0x000001fd) == 0) {  // All required fields are present.
    // required string trade_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_id());

    // required sint64 statement_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());

    // required sint64 trade_utc_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_utc_time());

    // required uint32 contract_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

    // required sint32 price = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->price());

    // required sint64 trade_date = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_date());

    // required uint32 side = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->side());

    // required uint32 qty = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string trade_counterparty = 9;
  if (has_trade_counterparty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_counterparty());
  }

  // optional bool is_aggressive = 10;
  if (has_is_aggressive()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_trade_id()) {
      set_has_trade_id();
      trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
    }
    if (from.has_trade_counterparty()) {
      set_has_trade_counterparty();
      trade_counterparty_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_counterparty_);
    }
    if (from.has_statement_date()) {
      set_statement_date(from.statement_date());
    }
    if (from.has_trade_utc_time()) {
      set_trade_utc_time(from.trade_utc_time());
    }
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  if (from._has_bits_[8 / 32] & 768u) {
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_is_aggressive()) {
      set_is_aggressive(from.is_aggressive());
    }
  }
}

void Trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fd) != 0x000001fd) return false;
  return true;
}

void Trade::Swap(Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trade::InternalSwap(Trade* other) {
  trade_id_.Swap(&other->trade_id_);
  trade_counterparty_.Swap(&other->trade_counterparty_);
  std::swap(statement_date_, other->statement_date_);
  std::swap(trade_utc_time_, other->trade_utc_time_);
  std::swap(contract_id_, other->contract_id_);
  std::swap(price_, other->price_);
  std::swap(trade_date_, other->trade_date_);
  std::swap(side_, other->side_);
  std::swap(qty_, other->qty_);
  std::swap(is_aggressive_, other->is_aggressive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trade

// required string trade_id = 1;
bool Trade::has_trade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trade::set_has_trade_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Trade::clear_has_trade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trade::clear_trade_id() {
  trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trade_id();
}
const ::std::string& Trade::trade_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.trade_id)
  return trade_id_.GetNoArena();
}
void Trade::set_trade_id(const ::std::string& value) {
  set_has_trade_id();
  trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.trade_id)
}
void Trade::set_trade_id(const char* value) {
  set_has_trade_id();
  trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Trade.trade_id)
}
void Trade::set_trade_id(const char* value, size_t size) {
  set_has_trade_id();
  trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Trade.trade_id)
}
::std::string* Trade::mutable_trade_id() {
  set_has_trade_id();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Trade.trade_id)
  return trade_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Trade::release_trade_id() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Trade.trade_id)
  clear_has_trade_id();
  return trade_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Trade::set_allocated_trade_id(::std::string* trade_id) {
  if (trade_id != NULL) {
    set_has_trade_id();
  } else {
    clear_has_trade_id();
  }
  trade_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trade_id);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Trade.trade_id)
}

// required uint32 contract_id = 2;
bool Trade::has_contract_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Trade::set_has_contract_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Trade::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Trade::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 Trade::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.contract_id)
  return contract_id_;
}
void Trade::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.contract_id)
}

// required sint64 statement_date = 3;
bool Trade::has_statement_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Trade::set_has_statement_date() {
  _has_bits_[0] |= 0x00000004u;
}
void Trade::clear_has_statement_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void Trade::clear_statement_date() {
  statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_statement_date();
}
::google::protobuf::int64 Trade::statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.statement_date)
  return statement_date_;
}
void Trade::set_statement_date(::google::protobuf::int64 value) {
  set_has_statement_date();
  statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.statement_date)
}

// required sint64 trade_utc_time = 4;
bool Trade::has_trade_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Trade::set_has_trade_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Trade::clear_has_trade_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Trade::clear_trade_utc_time() {
  trade_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_trade_utc_time();
}
::google::protobuf::int64 Trade::trade_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.trade_utc_time)
  return trade_utc_time_;
}
void Trade::set_trade_utc_time(::google::protobuf::int64 value) {
  set_has_trade_utc_time();
  trade_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.trade_utc_time)
}

// required sint64 trade_date = 5;
bool Trade::has_trade_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Trade::set_has_trade_date() {
  _has_bits_[0] |= 0x00000040u;
}
void Trade::clear_has_trade_date() {
  _has_bits_[0] &= ~0x00000040u;
}
void Trade::clear_trade_date() {
  trade_date_ = GOOGLE_LONGLONG(0);
  clear_has_trade_date();
}
::google::protobuf::int64 Trade::trade_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.trade_date)
  return trade_date_;
}
void Trade::set_trade_date(::google::protobuf::int64 value) {
  set_has_trade_date();
  trade_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.trade_date)
}

// required sint32 price = 6;
bool Trade::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Trade::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
void Trade::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
void Trade::clear_price() {
  price_ = 0;
  clear_has_price();
}
::google::protobuf::int32 Trade::price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.price)
  return price_;
}
void Trade::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.price)
}

// required uint32 side = 7;
bool Trade::has_side() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Trade::set_has_side() {
  _has_bits_[0] |= 0x00000080u;
}
void Trade::clear_has_side() {
  _has_bits_[0] &= ~0x00000080u;
}
void Trade::clear_side() {
  side_ = 0u;
  clear_has_side();
}
::google::protobuf::uint32 Trade::side() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.side)
  return side_;
}
void Trade::set_side(::google::protobuf::uint32 value) {
  set_has_side();
  side_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.side)
}

// required uint32 qty = 8;
bool Trade::has_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Trade::set_has_qty() {
  _has_bits_[0] |= 0x00000100u;
}
void Trade::clear_has_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
void Trade::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
::google::protobuf::uint32 Trade::qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.qty)
  return qty_;
}
void Trade::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.qty)
}

// optional string trade_counterparty = 9;
bool Trade::has_trade_counterparty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Trade::set_has_trade_counterparty() {
  _has_bits_[0] |= 0x00000002u;
}
void Trade::clear_has_trade_counterparty() {
  _has_bits_[0] &= ~0x00000002u;
}
void Trade::clear_trade_counterparty() {
  trade_counterparty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trade_counterparty();
}
const ::std::string& Trade::trade_counterparty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.trade_counterparty)
  return trade_counterparty_.GetNoArena();
}
void Trade::set_trade_counterparty(const ::std::string& value) {
  set_has_trade_counterparty();
  trade_counterparty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.trade_counterparty)
}
void Trade::set_trade_counterparty(const char* value) {
  set_has_trade_counterparty();
  trade_counterparty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.Trade.trade_counterparty)
}
void Trade::set_trade_counterparty(const char* value, size_t size) {
  set_has_trade_counterparty();
  trade_counterparty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.Trade.trade_counterparty)
}
::std::string* Trade::mutable_trade_counterparty() {
  set_has_trade_counterparty();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.Trade.trade_counterparty)
  return trade_counterparty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Trade::release_trade_counterparty() {
  // @@protoc_insertion_point(field_release:WebAPI_1.Trade.trade_counterparty)
  clear_has_trade_counterparty();
  return trade_counterparty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Trade::set_allocated_trade_counterparty(::std::string* trade_counterparty) {
  if (trade_counterparty != NULL) {
    set_has_trade_counterparty();
  } else {
    clear_has_trade_counterparty();
  }
  trade_counterparty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trade_counterparty);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.Trade.trade_counterparty)
}

// optional bool is_aggressive = 10;
bool Trade::has_is_aggressive() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Trade::set_has_is_aggressive() {
  _has_bits_[0] |= 0x00000200u;
}
void Trade::clear_has_is_aggressive() {
  _has_bits_[0] &= ~0x00000200u;
}
void Trade::clear_is_aggressive() {
  is_aggressive_ = false;
  clear_has_is_aggressive();
}
bool Trade::is_aggressive() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Trade.is_aggressive)
  return is_aggressive_;
}
void Trade::set_is_aggressive(bool value) {
  set_has_is_aggressive();
  is_aggressive_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Trade.is_aggressive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionStatus::kSubscriptionIdFieldNumber;
const int PositionStatus::kIsSnapshotFieldNumber;
const int PositionStatus::kAccountIdFieldNumber;
const int PositionStatus::kContractIdFieldNumber;
const int PositionStatus::kIsShortOpenPositionFieldNumber;
const int PositionStatus::kOpenPositionFieldNumber;
const int PositionStatus::kPurchaseAndSalesGroupFieldNumber;
const int PositionStatus::kContractMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionStatus::PositionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.PositionStatus)
}
PositionStatus::PositionStatus(const PositionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subscription_id_(from.subscription_id_),
      open_position_(from.open_position_),
      purchase_and_sales_group_(from.purchase_and_sales_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_contract_metadata()) {
    contract_metadata_ = new ::WebAPI_1::ContractMetadata(*from.contract_metadata_);
  } else {
    contract_metadata_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&contract_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(contract_id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.PositionStatus)
}

void PositionStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&contract_metadata_, 0, reinterpret_cast<char*>(&contract_id_) -
    reinterpret_cast<char*>(&contract_metadata_) + sizeof(contract_id_));
}

PositionStatus::~PositionStatus() {
  // @@protoc_insertion_point(destructor:WebAPI_1.PositionStatus)
  SharedDtor();
}

void PositionStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete contract_metadata_;
  }
}

void PositionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[53].descriptor;
}

const PositionStatus& PositionStatus::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

PositionStatus* PositionStatus::New(::google::protobuf::Arena* arena) const {
  PositionStatus* n = new PositionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.PositionStatus)
  subscription_id_.Clear();
  open_position_.Clear();
  purchase_and_sales_group_.Clear();
  if (has_contract_metadata()) {
    GOOGLE_DCHECK(contract_metadata_ != NULL);
    contract_metadata_->::WebAPI_1::ContractMetadata::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&contract_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(contract_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PositionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.PositionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 subscription_id = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_subscription_id())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subscription_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_snapshot = 2;
      case 2: {
        if (tag == 16u) {
          set_has_is_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 account_id = 3;
      case 3: {
        if (tag == 24u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 contract_id = 4;
      case 4: {
        if (tag == 32u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_short_open_position = 5;
      case 5: {
        if (tag == 40u) {
          set_has_is_short_open_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_short_open_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.OpenPosition open_position = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_open_position()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WebAPI_1.PurchaseAndSalesGroup purchase_and_sales_group = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_purchase_and_sales_group()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .WebAPI_1.ContractMetadata contract_metadata = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contract_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.PositionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.PositionStatus)
  return false;
#undef DO_
}

void PositionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.PositionStatus)
  // repeated uint32 subscription_id = 1;
  for (int i = 0; i < this->subscription_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->subscription_id(i), output);
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_snapshot(), output);
  }

  // required sint32 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->account_id(), output);
  }

  // required uint32 contract_id = 4;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contract_id(), output);
  }

  // required bool is_short_open_position = 5;
  if (has_is_short_open_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_short_open_position(), output);
  }

  // repeated .WebAPI_1.OpenPosition open_position = 6;
  for (unsigned int i = 0, n = this->open_position_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->open_position(i), output);
  }

  // repeated .WebAPI_1.PurchaseAndSalesGroup purchase_and_sales_group = 7;
  for (unsigned int i = 0, n = this->purchase_and_sales_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->purchase_and_sales_group(i), output);
  }

  // optional .WebAPI_1.ContractMetadata contract_metadata = 8;
  if (has_contract_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->contract_metadata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.PositionStatus)
}

::google::protobuf::uint8* PositionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.PositionStatus)
  // repeated uint32 subscription_id = 1;
  for (int i = 0; i < this->subscription_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->subscription_id(i), target);
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_snapshot(), target);
  }

  // required sint32 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->account_id(), target);
  }

  // required uint32 contract_id = 4;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contract_id(), target);
  }

  // required bool is_short_open_position = 5;
  if (has_is_short_open_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_short_open_position(), target);
  }

  // repeated .WebAPI_1.OpenPosition open_position = 6;
  for (unsigned int i = 0, n = this->open_position_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->open_position(i), false, target);
  }

  // repeated .WebAPI_1.PurchaseAndSalesGroup purchase_and_sales_group = 7;
  for (unsigned int i = 0, n = this->purchase_and_sales_group_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->purchase_and_sales_group(i), false, target);
  }

  // optional .WebAPI_1.ContractMetadata contract_metadata = 8;
  if (has_contract_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->contract_metadata_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.PositionStatus)
  return target;
}

size_t PositionStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.PositionStatus)
  size_t total_size = 0;

  if (has_account_id()) {
    // required sint32 account_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  if (has_is_short_open_position()) {
    // required bool is_short_open_position = 5;
    total_size += 1 + 1;
  }

  if (has_contract_id()) {
    // required uint32 contract_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  return total_size;
}
size_t PositionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.PositionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001a) ^ 0x0000001a) == 0) {  // All required fields are present.
    // required sint32 account_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

    // required bool is_short_open_position = 5;
    total_size += 1 + 1;

    // required uint32 contract_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 subscription_id = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->subscription_id_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subscription_id(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->subscription_id_size());
    total_size += data_size;
  }

  // repeated .WebAPI_1.OpenPosition open_position = 6;
  {
    unsigned int count = this->open_position_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_position(i));
    }
  }

  // repeated .WebAPI_1.PurchaseAndSalesGroup purchase_and_sales_group = 7;
  {
    unsigned int count = this->purchase_and_sales_group_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->purchase_and_sales_group(i));
    }
  }

  // optional .WebAPI_1.ContractMetadata contract_metadata = 8;
  if (has_contract_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contract_metadata_);
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.PositionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.PositionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.PositionStatus)
    MergeFrom(*source);
  }
}

void PositionStatus::MergeFrom(const PositionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.PositionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_.MergeFrom(from.subscription_id_);
  open_position_.MergeFrom(from.open_position_);
  purchase_and_sales_group_.MergeFrom(from.purchase_and_sales_group_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_contract_metadata()) {
      mutable_contract_metadata()->::WebAPI_1::ContractMetadata::MergeFrom(from.contract_metadata());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_is_snapshot()) {
      set_is_snapshot(from.is_snapshot());
    }
    if (from.has_is_short_open_position()) {
      set_is_short_open_position(from.is_short_open_position());
    }
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
  }
}

void PositionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.PositionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionStatus::CopyFrom(const PositionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.PositionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->open_position())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->purchase_and_sales_group())) return false;
  if (has_contract_metadata()) {
    if (!this->contract_metadata_->IsInitialized()) return false;
  }
  return true;
}

void PositionStatus::Swap(PositionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionStatus::InternalSwap(PositionStatus* other) {
  subscription_id_.UnsafeArenaSwap(&other->subscription_id_);
  open_position_.UnsafeArenaSwap(&other->open_position_);
  purchase_and_sales_group_.UnsafeArenaSwap(&other->purchase_and_sales_group_);
  std::swap(contract_metadata_, other->contract_metadata_);
  std::swap(account_id_, other->account_id_);
  std::swap(is_snapshot_, other->is_snapshot_);
  std::swap(is_short_open_position_, other->is_short_open_position_);
  std::swap(contract_id_, other->contract_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionStatus

// repeated uint32 subscription_id = 1;
int PositionStatus::subscription_id_size() const {
  return subscription_id_.size();
}
void PositionStatus::clear_subscription_id() {
  subscription_id_.Clear();
}
::google::protobuf::uint32 PositionStatus::subscription_id(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.subscription_id)
  return subscription_id_.Get(index);
}
void PositionStatus::set_subscription_id(int index, ::google::protobuf::uint32 value) {
  subscription_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.PositionStatus.subscription_id)
}
void PositionStatus::add_subscription_id(::google::protobuf::uint32 value) {
  subscription_id_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.PositionStatus.subscription_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PositionStatus::subscription_id() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.PositionStatus.subscription_id)
  return subscription_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PositionStatus::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.PositionStatus.subscription_id)
  return &subscription_id_;
}

// optional bool is_snapshot = 2;
bool PositionStatus::has_is_snapshot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PositionStatus::set_has_is_snapshot() {
  _has_bits_[0] |= 0x00000004u;
}
void PositionStatus::clear_has_is_snapshot() {
  _has_bits_[0] &= ~0x00000004u;
}
void PositionStatus::clear_is_snapshot() {
  is_snapshot_ = false;
  clear_has_is_snapshot();
}
bool PositionStatus::is_snapshot() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.is_snapshot)
  return is_snapshot_;
}
void PositionStatus::set_is_snapshot(bool value) {
  set_has_is_snapshot();
  is_snapshot_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.PositionStatus.is_snapshot)
}

// required sint32 account_id = 3;
bool PositionStatus::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PositionStatus::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PositionStatus::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PositionStatus::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 PositionStatus::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.account_id)
  return account_id_;
}
void PositionStatus::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.PositionStatus.account_id)
}

// required uint32 contract_id = 4;
bool PositionStatus::has_contract_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PositionStatus::set_has_contract_id() {
  _has_bits_[0] |= 0x00000010u;
}
void PositionStatus::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void PositionStatus::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 PositionStatus::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.contract_id)
  return contract_id_;
}
void PositionStatus::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.PositionStatus.contract_id)
}

// required bool is_short_open_position = 5;
bool PositionStatus::has_is_short_open_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PositionStatus::set_has_is_short_open_position() {
  _has_bits_[0] |= 0x00000008u;
}
void PositionStatus::clear_has_is_short_open_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void PositionStatus::clear_is_short_open_position() {
  is_short_open_position_ = false;
  clear_has_is_short_open_position();
}
bool PositionStatus::is_short_open_position() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.is_short_open_position)
  return is_short_open_position_;
}
void PositionStatus::set_is_short_open_position(bool value) {
  set_has_is_short_open_position();
  is_short_open_position_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.PositionStatus.is_short_open_position)
}

// repeated .WebAPI_1.OpenPosition open_position = 6;
int PositionStatus::open_position_size() const {
  return open_position_.size();
}
void PositionStatus::clear_open_position() {
  open_position_.Clear();
}
const ::WebAPI_1::OpenPosition& PositionStatus::open_position(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.open_position)
  return open_position_.Get(index);
}
::WebAPI_1::OpenPosition* PositionStatus::mutable_open_position(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.PositionStatus.open_position)
  return open_position_.Mutable(index);
}
::WebAPI_1::OpenPosition* PositionStatus::add_open_position() {
  // @@protoc_insertion_point(field_add:WebAPI_1.PositionStatus.open_position)
  return open_position_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::OpenPosition >*
PositionStatus::mutable_open_position() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.PositionStatus.open_position)
  return &open_position_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::OpenPosition >&
PositionStatus::open_position() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.PositionStatus.open_position)
  return open_position_;
}

// repeated .WebAPI_1.PurchaseAndSalesGroup purchase_and_sales_group = 7;
int PositionStatus::purchase_and_sales_group_size() const {
  return purchase_and_sales_group_.size();
}
void PositionStatus::clear_purchase_and_sales_group() {
  purchase_and_sales_group_.Clear();
}
const ::WebAPI_1::PurchaseAndSalesGroup& PositionStatus::purchase_and_sales_group(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.purchase_and_sales_group)
  return purchase_and_sales_group_.Get(index);
}
::WebAPI_1::PurchaseAndSalesGroup* PositionStatus::mutable_purchase_and_sales_group(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.PositionStatus.purchase_and_sales_group)
  return purchase_and_sales_group_.Mutable(index);
}
::WebAPI_1::PurchaseAndSalesGroup* PositionStatus::add_purchase_and_sales_group() {
  // @@protoc_insertion_point(field_add:WebAPI_1.PositionStatus.purchase_and_sales_group)
  return purchase_and_sales_group_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::PurchaseAndSalesGroup >*
PositionStatus::mutable_purchase_and_sales_group() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.PositionStatus.purchase_and_sales_group)
  return &purchase_and_sales_group_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::PurchaseAndSalesGroup >&
PositionStatus::purchase_and_sales_group() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.PositionStatus.purchase_and_sales_group)
  return purchase_and_sales_group_;
}

// optional .WebAPI_1.ContractMetadata contract_metadata = 8;
bool PositionStatus::has_contract_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PositionStatus::set_has_contract_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void PositionStatus::clear_has_contract_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void PositionStatus::clear_contract_metadata() {
  if (contract_metadata_ != NULL) contract_metadata_->::WebAPI_1::ContractMetadata::Clear();
  clear_has_contract_metadata();
}
const ::WebAPI_1::ContractMetadata& PositionStatus::contract_metadata() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PositionStatus.contract_metadata)
  return contract_metadata_ != NULL ? *contract_metadata_
                         : *::WebAPI_1::ContractMetadata::internal_default_instance();
}
::WebAPI_1::ContractMetadata* PositionStatus::mutable_contract_metadata() {
  set_has_contract_metadata();
  if (contract_metadata_ == NULL) {
    contract_metadata_ = new ::WebAPI_1::ContractMetadata;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.PositionStatus.contract_metadata)
  return contract_metadata_;
}
::WebAPI_1::ContractMetadata* PositionStatus::release_contract_metadata() {
  // @@protoc_insertion_point(field_release:WebAPI_1.PositionStatus.contract_metadata)
  clear_has_contract_metadata();
  ::WebAPI_1::ContractMetadata* temp = contract_metadata_;
  contract_metadata_ = NULL;
  return temp;
}
void PositionStatus::set_allocated_contract_metadata(::WebAPI_1::ContractMetadata* contract_metadata) {
  delete contract_metadata_;
  contract_metadata_ = contract_metadata;
  if (contract_metadata) {
    set_has_contract_metadata();
  } else {
    clear_has_contract_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.PositionStatus.contract_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenPosition::kIdFieldNumber;
const int OpenPosition::kQtyFieldNumber;
const int OpenPosition::kPriceFieldNumber;
const int OpenPosition::kTradeDateFieldNumber;
const int OpenPosition::kStatementDateFieldNumber;
const int OpenPosition::kTradeUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenPosition::OpenPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.OpenPosition)
}
OpenPosition::OpenPosition(const OpenPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&trade_utc_time_) -
    reinterpret_cast<char*>(&id_) + sizeof(trade_utc_time_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.OpenPosition)
}

void OpenPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&trade_utc_time_) -
    reinterpret_cast<char*>(&id_) + sizeof(trade_utc_time_));
}

OpenPosition::~OpenPosition() {
  // @@protoc_insertion_point(destructor:WebAPI_1.OpenPosition)
  SharedDtor();
}

void OpenPosition::SharedDtor() {
}

void OpenPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[54].descriptor;
}

const OpenPosition& OpenPosition::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

OpenPosition* OpenPosition::New(::google::protobuf::Arena* arena) const {
  OpenPosition* n = new OpenPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.OpenPosition)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&trade_utc_time_) -
      reinterpret_cast<char*>(&id_) + sizeof(trade_utc_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.OpenPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 qty = 2;
      case 2: {
        if (tag == 16u) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 3;
      case 3: {
        if (tag == 25u) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 trade_date = 4;
      case 4: {
        if (tag == 32u) {
          set_has_trade_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trade_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 statement_date = 5;
      case 5: {
        if (tag == 40u) {
          set_has_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 trade_utc_time = 6;
      case 6: {
        if (tag == 48u) {
          set_has_trade_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trade_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.OpenPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.OpenPosition)
  return false;
#undef DO_
}

void OpenPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.OpenPosition)
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required uint32 qty = 2;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qty(), output);
  }

  // required double price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // required sint64 trade_date = 4;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->trade_date(), output);
  }

  // required sint64 statement_date = 5;
  if (has_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->statement_date(), output);
  }

  // optional sint64 trade_utc_time = 6;
  if (has_trade_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->trade_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.OpenPosition)
}

::google::protobuf::uint8* OpenPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.OpenPosition)
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required uint32 qty = 2;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qty(), target);
  }

  // required double price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // required sint64 trade_date = 4;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->trade_date(), target);
  }

  // required sint64 statement_date = 5;
  if (has_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->statement_date(), target);
  }

  // optional sint64 trade_utc_time = 6;
  if (has_trade_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->trade_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.OpenPosition)
  return target;
}

size_t OpenPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.OpenPosition)
  size_t total_size = 0;

  if (has_id()) {
    // required sint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  if (has_qty()) {
    // required uint32 qty = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  if (has_price()) {
    // required double price = 3;
    total_size += 1 + 8;
  }

  if (has_trade_date()) {
    // required sint64 trade_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_date());
  }

  if (has_statement_date()) {
    // required sint64 statement_date = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());
  }

  return total_size;
}
size_t OpenPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.OpenPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required sint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->id());

    // required uint32 qty = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

    // required double price = 3;
    total_size += 1 + 8;

    // required sint64 trade_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_date());

    // required sint64 statement_date = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sint64 trade_utc_time = 6;
  if (has_trade_utc_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_utc_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.OpenPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.OpenPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.OpenPosition)
    MergeFrom(*source);
  }
}

void OpenPosition::MergeFrom(const OpenPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.OpenPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
    if (from.has_statement_date()) {
      set_statement_date(from.statement_date());
    }
    if (from.has_trade_utc_time()) {
      set_trade_utc_time(from.trade_utc_time());
    }
  }
}

void OpenPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.OpenPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPosition::CopyFrom(const OpenPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.OpenPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void OpenPosition::Swap(OpenPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenPosition::InternalSwap(OpenPosition* other) {
  std::swap(id_, other->id_);
  std::swap(qty_, other->qty_);
  std::swap(price_, other->price_);
  std::swap(trade_date_, other->trade_date_);
  std::swap(statement_date_, other->statement_date_);
  std::swap(trade_utc_time_, other->trade_utc_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenPosition

// required sint32 id = 1;
bool OpenPosition::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenPosition::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenPosition::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenPosition::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 OpenPosition::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OpenPosition.id)
  return id_;
}
void OpenPosition::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OpenPosition.id)
}

// required uint32 qty = 2;
bool OpenPosition::has_qty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpenPosition::set_has_qty() {
  _has_bits_[0] |= 0x00000002u;
}
void OpenPosition::clear_has_qty() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpenPosition::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
::google::protobuf::uint32 OpenPosition::qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OpenPosition.qty)
  return qty_;
}
void OpenPosition::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OpenPosition.qty)
}

// required double price = 3;
bool OpenPosition::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpenPosition::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
void OpenPosition::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpenPosition::clear_price() {
  price_ = 0;
  clear_has_price();
}
double OpenPosition::price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OpenPosition.price)
  return price_;
}
void OpenPosition::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OpenPosition.price)
}

// required sint64 trade_date = 4;
bool OpenPosition::has_trade_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpenPosition::set_has_trade_date() {
  _has_bits_[0] |= 0x00000008u;
}
void OpenPosition::clear_has_trade_date() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpenPosition::clear_trade_date() {
  trade_date_ = GOOGLE_LONGLONG(0);
  clear_has_trade_date();
}
::google::protobuf::int64 OpenPosition::trade_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OpenPosition.trade_date)
  return trade_date_;
}
void OpenPosition::set_trade_date(::google::protobuf::int64 value) {
  set_has_trade_date();
  trade_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OpenPosition.trade_date)
}

// required sint64 statement_date = 5;
bool OpenPosition::has_statement_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpenPosition::set_has_statement_date() {
  _has_bits_[0] |= 0x00000010u;
}
void OpenPosition::clear_has_statement_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpenPosition::clear_statement_date() {
  statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_statement_date();
}
::google::protobuf::int64 OpenPosition::statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OpenPosition.statement_date)
  return statement_date_;
}
void OpenPosition::set_statement_date(::google::protobuf::int64 value) {
  set_has_statement_date();
  statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OpenPosition.statement_date)
}

// optional sint64 trade_utc_time = 6;
bool OpenPosition::has_trade_utc_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpenPosition::set_has_trade_utc_time() {
  _has_bits_[0] |= 0x00000020u;
}
void OpenPosition::clear_has_trade_utc_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpenPosition::clear_trade_utc_time() {
  trade_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_trade_utc_time();
}
::google::protobuf::int64 OpenPosition::trade_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.OpenPosition.trade_utc_time)
  return trade_utc_time_;
}
void OpenPosition::set_trade_utc_time(::google::protobuf::int64 value) {
  set_has_trade_utc_time();
  trade_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.OpenPosition.trade_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PurchaseAndSalesGroup::kIdFieldNumber;
const int PurchaseAndSalesGroup::kRealizedProfitLossFieldNumber;
const int PurchaseAndSalesGroup::kMatchedTradeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PurchaseAndSalesGroup::PurchaseAndSalesGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.PurchaseAndSalesGroup)
}
PurchaseAndSalesGroup::PurchaseAndSalesGroup(const PurchaseAndSalesGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      matched_trade_(from.matched_trade_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&realized_profit_loss_, &from.realized_profit_loss_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&realized_profit_loss_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.PurchaseAndSalesGroup)
}

void PurchaseAndSalesGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&realized_profit_loss_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&realized_profit_loss_) + sizeof(id_));
}

PurchaseAndSalesGroup::~PurchaseAndSalesGroup() {
  // @@protoc_insertion_point(destructor:WebAPI_1.PurchaseAndSalesGroup)
  SharedDtor();
}

void PurchaseAndSalesGroup::SharedDtor() {
}

void PurchaseAndSalesGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseAndSalesGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[55].descriptor;
}

const PurchaseAndSalesGroup& PurchaseAndSalesGroup::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

PurchaseAndSalesGroup* PurchaseAndSalesGroup::New(::google::protobuf::Arena* arena) const {
  PurchaseAndSalesGroup* n = new PurchaseAndSalesGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PurchaseAndSalesGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.PurchaseAndSalesGroup)
  matched_trade_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&realized_profit_loss_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&realized_profit_loss_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PurchaseAndSalesGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.PurchaseAndSalesGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double realized_profit_loss = 2;
      case 2: {
        if (tag == 17u) {
          set_has_realized_profit_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realized_profit_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.MatchedTrade matched_trade = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matched_trade()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.PurchaseAndSalesGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.PurchaseAndSalesGroup)
  return false;
#undef DO_
}

void PurchaseAndSalesGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.PurchaseAndSalesGroup)
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required double realized_profit_loss = 2;
  if (has_realized_profit_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->realized_profit_loss(), output);
  }

  // repeated .WebAPI_1.MatchedTrade matched_trade = 3;
  for (unsigned int i = 0, n = this->matched_trade_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matched_trade(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.PurchaseAndSalesGroup)
}

::google::protobuf::uint8* PurchaseAndSalesGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.PurchaseAndSalesGroup)
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required double realized_profit_loss = 2;
  if (has_realized_profit_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->realized_profit_loss(), target);
  }

  // repeated .WebAPI_1.MatchedTrade matched_trade = 3;
  for (unsigned int i = 0, n = this->matched_trade_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->matched_trade(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.PurchaseAndSalesGroup)
  return target;
}

size_t PurchaseAndSalesGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.PurchaseAndSalesGroup)
  size_t total_size = 0;

  if (has_realized_profit_loss()) {
    // required double realized_profit_loss = 2;
    total_size += 1 + 8;
  }

  if (has_id()) {
    // required sint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->id());
  }

  return total_size;
}
size_t PurchaseAndSalesGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.PurchaseAndSalesGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double realized_profit_loss = 2;
    total_size += 1 + 8;

    // required sint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.MatchedTrade matched_trade = 3;
  {
    unsigned int count = this->matched_trade_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matched_trade(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseAndSalesGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.PurchaseAndSalesGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PurchaseAndSalesGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PurchaseAndSalesGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.PurchaseAndSalesGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.PurchaseAndSalesGroup)
    MergeFrom(*source);
  }
}

void PurchaseAndSalesGroup::MergeFrom(const PurchaseAndSalesGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.PurchaseAndSalesGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matched_trade_.MergeFrom(from.matched_trade_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_realized_profit_loss()) {
      set_realized_profit_loss(from.realized_profit_loss());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void PurchaseAndSalesGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.PurchaseAndSalesGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseAndSalesGroup::CopyFrom(const PurchaseAndSalesGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.PurchaseAndSalesGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseAndSalesGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->matched_trade())) return false;
  return true;
}

void PurchaseAndSalesGroup::Swap(PurchaseAndSalesGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PurchaseAndSalesGroup::InternalSwap(PurchaseAndSalesGroup* other) {
  matched_trade_.UnsafeArenaSwap(&other->matched_trade_);
  std::swap(realized_profit_loss_, other->realized_profit_loss_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PurchaseAndSalesGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[55];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PurchaseAndSalesGroup

// required sint32 id = 1;
bool PurchaseAndSalesGroup::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PurchaseAndSalesGroup::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PurchaseAndSalesGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PurchaseAndSalesGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PurchaseAndSalesGroup::id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PurchaseAndSalesGroup.id)
  return id_;
}
void PurchaseAndSalesGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.PurchaseAndSalesGroup.id)
}

// required double realized_profit_loss = 2;
bool PurchaseAndSalesGroup::has_realized_profit_loss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PurchaseAndSalesGroup::set_has_realized_profit_loss() {
  _has_bits_[0] |= 0x00000001u;
}
void PurchaseAndSalesGroup::clear_has_realized_profit_loss() {
  _has_bits_[0] &= ~0x00000001u;
}
void PurchaseAndSalesGroup::clear_realized_profit_loss() {
  realized_profit_loss_ = 0;
  clear_has_realized_profit_loss();
}
double PurchaseAndSalesGroup::realized_profit_loss() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PurchaseAndSalesGroup.realized_profit_loss)
  return realized_profit_loss_;
}
void PurchaseAndSalesGroup::set_realized_profit_loss(double value) {
  set_has_realized_profit_loss();
  realized_profit_loss_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.PurchaseAndSalesGroup.realized_profit_loss)
}

// repeated .WebAPI_1.MatchedTrade matched_trade = 3;
int PurchaseAndSalesGroup::matched_trade_size() const {
  return matched_trade_.size();
}
void PurchaseAndSalesGroup::clear_matched_trade() {
  matched_trade_.Clear();
}
const ::WebAPI_1::MatchedTrade& PurchaseAndSalesGroup::matched_trade(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.PurchaseAndSalesGroup.matched_trade)
  return matched_trade_.Get(index);
}
::WebAPI_1::MatchedTrade* PurchaseAndSalesGroup::mutable_matched_trade(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.PurchaseAndSalesGroup.matched_trade)
  return matched_trade_.Mutable(index);
}
::WebAPI_1::MatchedTrade* PurchaseAndSalesGroup::add_matched_trade() {
  // @@protoc_insertion_point(field_add:WebAPI_1.PurchaseAndSalesGroup.matched_trade)
  return matched_trade_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::MatchedTrade >*
PurchaseAndSalesGroup::mutable_matched_trade() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.PurchaseAndSalesGroup.matched_trade)
  return &matched_trade_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::MatchedTrade >&
PurchaseAndSalesGroup::matched_trade() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.PurchaseAndSalesGroup.matched_trade)
  return matched_trade_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchedTrade::kQtyFieldNumber;
const int MatchedTrade::kIsShortFieldNumber;
const int MatchedTrade::kPriceFieldNumber;
const int MatchedTrade::kTradeDateFieldNumber;
const int MatchedTrade::kStatementDateFieldNumber;
const int MatchedTrade::kTradeUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchedTrade::MatchedTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.MatchedTrade)
}
MatchedTrade::MatchedTrade(const MatchedTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qty_, &from.qty_,
    reinterpret_cast<char*>(&trade_utc_time_) -
    reinterpret_cast<char*>(&qty_) + sizeof(trade_utc_time_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.MatchedTrade)
}

void MatchedTrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&qty_, 0, reinterpret_cast<char*>(&trade_utc_time_) -
    reinterpret_cast<char*>(&qty_) + sizeof(trade_utc_time_));
}

MatchedTrade::~MatchedTrade() {
  // @@protoc_insertion_point(destructor:WebAPI_1.MatchedTrade)
  SharedDtor();
}

void MatchedTrade::SharedDtor() {
}

void MatchedTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchedTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[56].descriptor;
}

const MatchedTrade& MatchedTrade::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

MatchedTrade* MatchedTrade::New(::google::protobuf::Arena* arena) const {
  MatchedTrade* n = new MatchedTrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchedTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.MatchedTrade)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&qty_, 0, reinterpret_cast<char*>(&trade_utc_time_) -
      reinterpret_cast<char*>(&qty_) + sizeof(trade_utc_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MatchedTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.MatchedTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 qty = 1;
      case 1: {
        if (tag == 8u) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_short = 2;
      case 2: {
        if (tag == 16u) {
          set_has_is_short();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_short_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 3;
      case 3: {
        if (tag == 25u) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 trade_date = 4;
      case 4: {
        if (tag == 32u) {
          set_has_trade_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trade_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 statement_date = 5;
      case 5: {
        if (tag == 40u) {
          set_has_statement_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &statement_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 trade_utc_time = 6;
      case 6: {
        if (tag == 48u) {
          set_has_trade_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trade_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.MatchedTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.MatchedTrade)
  return false;
#undef DO_
}

void MatchedTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.MatchedTrade)
  // required uint32 qty = 1;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qty(), output);
  }

  // optional bool is_short = 2;
  if (has_is_short()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_short(), output);
  }

  // required double price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // required sint64 trade_date = 4;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->trade_date(), output);
  }

  // required sint64 statement_date = 5;
  if (has_statement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->statement_date(), output);
  }

  // optional sint64 trade_utc_time = 6;
  if (has_trade_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->trade_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.MatchedTrade)
}

::google::protobuf::uint8* MatchedTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.MatchedTrade)
  // required uint32 qty = 1;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qty(), target);
  }

  // optional bool is_short = 2;
  if (has_is_short()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_short(), target);
  }

  // required double price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // required sint64 trade_date = 4;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->trade_date(), target);
  }

  // required sint64 statement_date = 5;
  if (has_statement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->statement_date(), target);
  }

  // optional sint64 trade_utc_time = 6;
  if (has_trade_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->trade_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.MatchedTrade)
  return target;
}

size_t MatchedTrade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.MatchedTrade)
  size_t total_size = 0;

  if (has_qty()) {
    // required uint32 qty = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  if (has_price()) {
    // required double price = 3;
    total_size += 1 + 8;
  }

  if (has_trade_date()) {
    // required sint64 trade_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_date());
  }

  if (has_statement_date()) {
    // required sint64 statement_date = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());
  }

  return total_size;
}
size_t MatchedTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.MatchedTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required uint32 qty = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());

    // required double price = 3;
    total_size += 1 + 8;

    // required sint64 trade_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_date());

    // required sint64 statement_date = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->statement_date());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool is_short = 2;
  if (has_is_short()) {
    total_size += 1 + 1;
  }

  // optional sint64 trade_utc_time = 6;
  if (has_trade_utc_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->trade_utc_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchedTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.MatchedTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchedTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchedTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.MatchedTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.MatchedTrade)
    MergeFrom(*source);
  }
}

void MatchedTrade::MergeFrom(const MatchedTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.MatchedTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_is_short()) {
      set_is_short(from.is_short());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
    if (from.has_statement_date()) {
      set_statement_date(from.statement_date());
    }
    if (from.has_trade_utc_time()) {
      set_trade_utc_time(from.trade_utc_time());
    }
  }
}

void MatchedTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.MatchedTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchedTrade::CopyFrom(const MatchedTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.MatchedTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchedTrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  return true;
}

void MatchedTrade::Swap(MatchedTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchedTrade::InternalSwap(MatchedTrade* other) {
  std::swap(qty_, other->qty_);
  std::swap(is_short_, other->is_short_);
  std::swap(price_, other->price_);
  std::swap(trade_date_, other->trade_date_);
  std::swap(statement_date_, other->statement_date_);
  std::swap(trade_utc_time_, other->trade_utc_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchedTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[56];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchedTrade

// required uint32 qty = 1;
bool MatchedTrade::has_qty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MatchedTrade::set_has_qty() {
  _has_bits_[0] |= 0x00000001u;
}
void MatchedTrade::clear_has_qty() {
  _has_bits_[0] &= ~0x00000001u;
}
void MatchedTrade::clear_qty() {
  qty_ = 0u;
  clear_has_qty();
}
::google::protobuf::uint32 MatchedTrade::qty() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MatchedTrade.qty)
  return qty_;
}
void MatchedTrade::set_qty(::google::protobuf::uint32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MatchedTrade.qty)
}

// optional bool is_short = 2;
bool MatchedTrade::has_is_short() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MatchedTrade::set_has_is_short() {
  _has_bits_[0] |= 0x00000002u;
}
void MatchedTrade::clear_has_is_short() {
  _has_bits_[0] &= ~0x00000002u;
}
void MatchedTrade::clear_is_short() {
  is_short_ = false;
  clear_has_is_short();
}
bool MatchedTrade::is_short() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MatchedTrade.is_short)
  return is_short_;
}
void MatchedTrade::set_is_short(bool value) {
  set_has_is_short();
  is_short_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MatchedTrade.is_short)
}

// required double price = 3;
bool MatchedTrade::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MatchedTrade::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
void MatchedTrade::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void MatchedTrade::clear_price() {
  price_ = 0;
  clear_has_price();
}
double MatchedTrade::price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MatchedTrade.price)
  return price_;
}
void MatchedTrade::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MatchedTrade.price)
}

// required sint64 trade_date = 4;
bool MatchedTrade::has_trade_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MatchedTrade::set_has_trade_date() {
  _has_bits_[0] |= 0x00000008u;
}
void MatchedTrade::clear_has_trade_date() {
  _has_bits_[0] &= ~0x00000008u;
}
void MatchedTrade::clear_trade_date() {
  trade_date_ = GOOGLE_LONGLONG(0);
  clear_has_trade_date();
}
::google::protobuf::int64 MatchedTrade::trade_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MatchedTrade.trade_date)
  return trade_date_;
}
void MatchedTrade::set_trade_date(::google::protobuf::int64 value) {
  set_has_trade_date();
  trade_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MatchedTrade.trade_date)
}

// required sint64 statement_date = 5;
bool MatchedTrade::has_statement_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MatchedTrade::set_has_statement_date() {
  _has_bits_[0] |= 0x00000010u;
}
void MatchedTrade::clear_has_statement_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void MatchedTrade::clear_statement_date() {
  statement_date_ = GOOGLE_LONGLONG(0);
  clear_has_statement_date();
}
::google::protobuf::int64 MatchedTrade::statement_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MatchedTrade.statement_date)
  return statement_date_;
}
void MatchedTrade::set_statement_date(::google::protobuf::int64 value) {
  set_has_statement_date();
  statement_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MatchedTrade.statement_date)
}

// optional sint64 trade_utc_time = 6;
bool MatchedTrade::has_trade_utc_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MatchedTrade::set_has_trade_utc_time() {
  _has_bits_[0] |= 0x00000020u;
}
void MatchedTrade::clear_has_trade_utc_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void MatchedTrade::clear_trade_utc_time() {
  trade_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_trade_utc_time();
}
::google::protobuf::int64 MatchedTrade::trade_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MatchedTrade.trade_utc_time)
  return trade_utc_time_;
}
void MatchedTrade::set_trade_utc_time(::google::protobuf::int64 value) {
  set_has_trade_utc_time();
  trade_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MatchedTrade.trade_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollateralStatus::kSubscriptionIdFieldNumber;
const int CollateralStatus::kIsSnapshotFieldNumber;
const int CollateralStatus::kAccountIdFieldNumber;
const int CollateralStatus::kCurrencyFieldNumber;
const int CollateralStatus::kTotalMarginFieldNumber;
const int CollateralStatus::kPurchasingPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollateralStatus::CollateralStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.CollateralStatus)
}
CollateralStatus::CollateralStatus(const CollateralStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subscription_id_(from.subscription_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  ::memcpy(&is_snapshot_, &from.is_snapshot_,
    reinterpret_cast<char*>(&purchasing_power_) -
    reinterpret_cast<char*>(&is_snapshot_) + sizeof(purchasing_power_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.CollateralStatus)
}

void CollateralStatus::SharedCtor() {
  _cached_size_ = 0;
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_snapshot_, 0, reinterpret_cast<char*>(&purchasing_power_) -
    reinterpret_cast<char*>(&is_snapshot_) + sizeof(purchasing_power_));
}

CollateralStatus::~CollateralStatus() {
  // @@protoc_insertion_point(destructor:WebAPI_1.CollateralStatus)
  SharedDtor();
}

void CollateralStatus::SharedDtor() {
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CollateralStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollateralStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[57].descriptor;
}

const CollateralStatus& CollateralStatus::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

CollateralStatus* CollateralStatus::New(::google::protobuf::Arena* arena) const {
  CollateralStatus* n = new CollateralStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollateralStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.CollateralStatus)
  subscription_id_.Clear();
  if (has_currency()) {
    GOOGLE_DCHECK(!currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*currency_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&is_snapshot_, 0, reinterpret_cast<char*>(&purchasing_power_) -
      reinterpret_cast<char*>(&is_snapshot_) + sizeof(purchasing_power_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CollateralStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.CollateralStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 subscription_id = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_subscription_id())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subscription_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_snapshot = 2;
      case 2: {
        if (tag == 16u) {
          set_has_is_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 account_id = 3;
      case 3: {
        if (tag == 24u) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string currency = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.CollateralStatus.currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double total_margin = 5;
      case 5: {
        if (tag == 41u) {
          set_has_total_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double purchasing_power = 6;
      case 6: {
        if (tag == 49u) {
          set_has_purchasing_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &purchasing_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.CollateralStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.CollateralStatus)
  return false;
#undef DO_
}

void CollateralStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.CollateralStatus)
  // repeated uint32 subscription_id = 1;
  for (int i = 0; i < this->subscription_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->subscription_id(i), output);
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_snapshot(), output);
  }

  // required sint32 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->account_id(), output);
  }

  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CollateralStatus.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->currency(), output);
  }

  // required double total_margin = 5;
  if (has_total_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->total_margin(), output);
  }

  // required double purchasing_power = 6;
  if (has_purchasing_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->purchasing_power(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.CollateralStatus)
}

::google::protobuf::uint8* CollateralStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.CollateralStatus)
  // repeated uint32 subscription_id = 1;
  for (int i = 0; i < this->subscription_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->subscription_id(i), target);
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_snapshot(), target);
  }

  // required sint32 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->account_id(), target);
  }

  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.CollateralStatus.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency(), target);
  }

  // required double total_margin = 5;
  if (has_total_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->total_margin(), target);
  }

  // required double purchasing_power = 6;
  if (has_purchasing_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->purchasing_power(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.CollateralStatus)
  return target;
}

size_t CollateralStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.CollateralStatus)
  size_t total_size = 0;

  if (has_currency()) {
    // required string currency = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());
  }

  if (has_account_id()) {
    // required sint32 account_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());
  }

  if (has_total_margin()) {
    // required double total_margin = 5;
    total_size += 1 + 8;
  }

  if (has_purchasing_power()) {
    // required double purchasing_power = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CollateralStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.CollateralStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string currency = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());

    // required sint32 account_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->account_id());

    // required double total_margin = 5;
    total_size += 1 + 8;

    // required double purchasing_power = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 subscription_id = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->subscription_id_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subscription_id(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->subscription_id_size());
    total_size += data_size;
  }

  // optional bool is_snapshot = 2;
  if (has_is_snapshot()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollateralStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.CollateralStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CollateralStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CollateralStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.CollateralStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.CollateralStatus)
    MergeFrom(*source);
  }
}

void CollateralStatus::MergeFrom(const CollateralStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.CollateralStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_id_.MergeFrom(from.subscription_id_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_currency()) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (from.has_is_snapshot()) {
      set_is_snapshot(from.is_snapshot());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_total_margin()) {
      set_total_margin(from.total_margin());
    }
    if (from.has_purchasing_power()) {
      set_purchasing_power(from.purchasing_power());
    }
  }
}

void CollateralStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.CollateralStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollateralStatus::CopyFrom(const CollateralStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.CollateralStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollateralStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  return true;
}

void CollateralStatus::Swap(CollateralStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollateralStatus::InternalSwap(CollateralStatus* other) {
  subscription_id_.UnsafeArenaSwap(&other->subscription_id_);
  currency_.Swap(&other->currency_);
  std::swap(is_snapshot_, other->is_snapshot_);
  std::swap(account_id_, other->account_id_);
  std::swap(total_margin_, other->total_margin_);
  std::swap(purchasing_power_, other->purchasing_power_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollateralStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[57];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollateralStatus

// repeated uint32 subscription_id = 1;
int CollateralStatus::subscription_id_size() const {
  return subscription_id_.size();
}
void CollateralStatus::clear_subscription_id() {
  subscription_id_.Clear();
}
::google::protobuf::uint32 CollateralStatus::subscription_id(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CollateralStatus.subscription_id)
  return subscription_id_.Get(index);
}
void CollateralStatus::set_subscription_id(int index, ::google::protobuf::uint32 value) {
  subscription_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.CollateralStatus.subscription_id)
}
void CollateralStatus::add_subscription_id(::google::protobuf::uint32 value) {
  subscription_id_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.CollateralStatus.subscription_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CollateralStatus::subscription_id() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.CollateralStatus.subscription_id)
  return subscription_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CollateralStatus::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.CollateralStatus.subscription_id)
  return &subscription_id_;
}

// optional bool is_snapshot = 2;
bool CollateralStatus::has_is_snapshot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollateralStatus::set_has_is_snapshot() {
  _has_bits_[0] |= 0x00000002u;
}
void CollateralStatus::clear_has_is_snapshot() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollateralStatus::clear_is_snapshot() {
  is_snapshot_ = false;
  clear_has_is_snapshot();
}
bool CollateralStatus::is_snapshot() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CollateralStatus.is_snapshot)
  return is_snapshot_;
}
void CollateralStatus::set_is_snapshot(bool value) {
  set_has_is_snapshot();
  is_snapshot_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.CollateralStatus.is_snapshot)
}

// required sint32 account_id = 3;
bool CollateralStatus::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CollateralStatus::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CollateralStatus::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CollateralStatus::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 CollateralStatus::account_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CollateralStatus.account_id)
  return account_id_;
}
void CollateralStatus::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.CollateralStatus.account_id)
}

// required string currency = 4;
bool CollateralStatus::has_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollateralStatus::set_has_currency() {
  _has_bits_[0] |= 0x00000001u;
}
void CollateralStatus::clear_has_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollateralStatus::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
const ::std::string& CollateralStatus::currency() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CollateralStatus.currency)
  return currency_.GetNoArena();
}
void CollateralStatus::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.CollateralStatus.currency)
}
void CollateralStatus::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.CollateralStatus.currency)
}
void CollateralStatus::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.CollateralStatus.currency)
}
::std::string* CollateralStatus::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.CollateralStatus.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollateralStatus::release_currency() {
  // @@protoc_insertion_point(field_release:WebAPI_1.CollateralStatus.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollateralStatus::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.CollateralStatus.currency)
}

// required double total_margin = 5;
bool CollateralStatus::has_total_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CollateralStatus::set_has_total_margin() {
  _has_bits_[0] |= 0x00000008u;
}
void CollateralStatus::clear_has_total_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
void CollateralStatus::clear_total_margin() {
  total_margin_ = 0;
  clear_has_total_margin();
}
double CollateralStatus::total_margin() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CollateralStatus.total_margin)
  return total_margin_;
}
void CollateralStatus::set_total_margin(double value) {
  set_has_total_margin();
  total_margin_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.CollateralStatus.total_margin)
}

// required double purchasing_power = 6;
bool CollateralStatus::has_purchasing_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CollateralStatus::set_has_purchasing_power() {
  _has_bits_[0] |= 0x00000010u;
}
void CollateralStatus::clear_has_purchasing_power() {
  _has_bits_[0] &= ~0x00000010u;
}
void CollateralStatus::clear_purchasing_power() {
  purchasing_power_ = 0;
  clear_has_purchasing_power();
}
double CollateralStatus::purchasing_power() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.CollateralStatus.purchasing_power)
  return purchasing_power_;
}
void CollateralStatus::set_purchasing_power(double value) {
  set_has_purchasing_power();
  purchasing_power_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.CollateralStatus.purchasing_power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSubscription::kContractIdFieldNumber;
const int MarketDataSubscription::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSubscription::MarketDataSubscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.MarketDataSubscription)
}
MarketDataSubscription::MarketDataSubscription(const MarketDataSubscription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&contract_id_, &from.contract_id_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.MarketDataSubscription)
}

void MarketDataSubscription::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&contract_id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(level_));
}

MarketDataSubscription::~MarketDataSubscription() {
  // @@protoc_insertion_point(destructor:WebAPI_1.MarketDataSubscription)
  SharedDtor();
}

void MarketDataSubscription::SharedDtor() {
}

void MarketDataSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[58].descriptor;
}

const MarketDataSubscription& MarketDataSubscription::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

MarketDataSubscription* MarketDataSubscription::New(::google::protobuf::Arena* arena) const {
  MarketDataSubscription* n = new MarketDataSubscription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketDataSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.MarketDataSubscription)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&contract_id_, 0, reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&contract_id_) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.MarketDataSubscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 contract_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.MarketDataSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.MarketDataSubscription)
  return false;
#undef DO_
}

void MarketDataSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.MarketDataSubscription)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contract_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.MarketDataSubscription)
}

::google::protobuf::uint8* MarketDataSubscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.MarketDataSubscription)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contract_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.MarketDataSubscription)
  return target;
}

size_t MarketDataSubscription::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.MarketDataSubscription)
  size_t total_size = 0;

  if (has_contract_id()) {
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  if (has_level()) {
    // required uint32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  return total_size;
}
size_t MarketDataSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.MarketDataSubscription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

    // required uint32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataSubscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.MarketDataSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataSubscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataSubscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.MarketDataSubscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.MarketDataSubscription)
    MergeFrom(*source);
  }
}

void MarketDataSubscription::MergeFrom(const MarketDataSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.MarketDataSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void MarketDataSubscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.MarketDataSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSubscription::CopyFrom(const MarketDataSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.MarketDataSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MarketDataSubscription::Swap(MarketDataSubscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSubscription::InternalSwap(MarketDataSubscription* other) {
  std::swap(contract_id_, other->contract_id_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarketDataSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[58];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketDataSubscription

// required uint32 contract_id = 1;
bool MarketDataSubscription::has_contract_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarketDataSubscription::set_has_contract_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MarketDataSubscription::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarketDataSubscription::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 MarketDataSubscription::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketDataSubscription.contract_id)
  return contract_id_;
}
void MarketDataSubscription::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketDataSubscription.contract_id)
}

// required uint32 level = 2;
bool MarketDataSubscription::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarketDataSubscription::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void MarketDataSubscription::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarketDataSubscription::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 MarketDataSubscription::level() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketDataSubscription.level)
  return level_;
}
void MarketDataSubscription::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketDataSubscription.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSubscriptionStatus::kContractIdFieldNumber;
const int MarketDataSubscriptionStatus::kStatusCodeFieldNumber;
const int MarketDataSubscriptionStatus::kLevelFieldNumber;
const int MarketDataSubscriptionStatus::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSubscriptionStatus::MarketDataSubscriptionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.MarketDataSubscriptionStatus)
}
MarketDataSubscriptionStatus::MarketDataSubscriptionStatus(const MarketDataSubscriptionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&contract_id_, &from.contract_id_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.MarketDataSubscriptionStatus)
}

void MarketDataSubscriptionStatus::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(level_));
}

MarketDataSubscriptionStatus::~MarketDataSubscriptionStatus() {
  // @@protoc_insertion_point(destructor:WebAPI_1.MarketDataSubscriptionStatus)
  SharedDtor();
}

void MarketDataSubscriptionStatus::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDataSubscriptionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataSubscriptionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[59].descriptor;
}

const MarketDataSubscriptionStatus& MarketDataSubscriptionStatus::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

MarketDataSubscriptionStatus* MarketDataSubscriptionStatus::New(::google::protobuf::Arena* arena) const {
  MarketDataSubscriptionStatus* n = new MarketDataSubscriptionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketDataSubscriptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.MarketDataSubscriptionStatus)
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&contract_id_, 0, reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&contract_id_) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataSubscriptionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.MarketDataSubscriptionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 contract_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 status_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.MarketDataSubscriptionStatus.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.MarketDataSubscriptionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.MarketDataSubscriptionStatus)
  return false;
#undef DO_
}

void MarketDataSubscriptionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.MarketDataSubscriptionStatus)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contract_id(), output);
  }

  // required uint32 status_code = 2;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_code(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.MarketDataSubscriptionStatus.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.MarketDataSubscriptionStatus)
}

::google::protobuf::uint8* MarketDataSubscriptionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.MarketDataSubscriptionStatus)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contract_id(), target);
  }

  // required uint32 status_code = 2;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_code(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.MarketDataSubscriptionStatus.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.MarketDataSubscriptionStatus)
  return target;
}

size_t MarketDataSubscriptionStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.MarketDataSubscriptionStatus)
  size_t total_size = 0;

  if (has_contract_id()) {
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  if (has_status_code()) {
    // required uint32 status_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());
  }

  if (has_level()) {
    // required uint32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  return total_size;
}
size_t MarketDataSubscriptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.MarketDataSubscriptionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

    // required uint32 status_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());

    // required uint32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string text_message = 4;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataSubscriptionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.MarketDataSubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataSubscriptionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataSubscriptionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.MarketDataSubscriptionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.MarketDataSubscriptionStatus)
    MergeFrom(*source);
  }
}

void MarketDataSubscriptionStatus::MergeFrom(const MarketDataSubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.MarketDataSubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void MarketDataSubscriptionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.MarketDataSubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSubscriptionStatus::CopyFrom(const MarketDataSubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.MarketDataSubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSubscriptionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void MarketDataSubscriptionStatus::Swap(MarketDataSubscriptionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSubscriptionStatus::InternalSwap(MarketDataSubscriptionStatus* other) {
  text_message_.Swap(&other->text_message_);
  std::swap(contract_id_, other->contract_id_);
  std::swap(status_code_, other->status_code_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarketDataSubscriptionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[59];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketDataSubscriptionStatus

// required uint32 contract_id = 1;
bool MarketDataSubscriptionStatus::has_contract_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarketDataSubscriptionStatus::set_has_contract_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MarketDataSubscriptionStatus::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarketDataSubscriptionStatus::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 MarketDataSubscriptionStatus::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketDataSubscriptionStatus.contract_id)
  return contract_id_;
}
void MarketDataSubscriptionStatus::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketDataSubscriptionStatus.contract_id)
}

// required uint32 status_code = 2;
bool MarketDataSubscriptionStatus::has_status_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarketDataSubscriptionStatus::set_has_status_code() {
  _has_bits_[0] |= 0x00000004u;
}
void MarketDataSubscriptionStatus::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarketDataSubscriptionStatus::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
::google::protobuf::uint32 MarketDataSubscriptionStatus::status_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketDataSubscriptionStatus.status_code)
  return status_code_;
}
void MarketDataSubscriptionStatus::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketDataSubscriptionStatus.status_code)
}

// required uint32 level = 3;
bool MarketDataSubscriptionStatus::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarketDataSubscriptionStatus::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void MarketDataSubscriptionStatus::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarketDataSubscriptionStatus::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 MarketDataSubscriptionStatus::level() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketDataSubscriptionStatus.level)
  return level_;
}
void MarketDataSubscriptionStatus::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketDataSubscriptionStatus.level)
}

// optional string text_message = 4;
bool MarketDataSubscriptionStatus::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarketDataSubscriptionStatus::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void MarketDataSubscriptionStatus::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarketDataSubscriptionStatus::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& MarketDataSubscriptionStatus::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketDataSubscriptionStatus.text_message)
  return text_message_.GetNoArena();
}
void MarketDataSubscriptionStatus::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketDataSubscriptionStatus.text_message)
}
void MarketDataSubscriptionStatus::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.MarketDataSubscriptionStatus.text_message)
}
void MarketDataSubscriptionStatus::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.MarketDataSubscriptionStatus.text_message)
}
::std::string* MarketDataSubscriptionStatus::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.MarketDataSubscriptionStatus.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarketDataSubscriptionStatus::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.MarketDataSubscriptionStatus.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarketDataSubscriptionStatus::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.MarketDataSubscriptionStatus.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealTimeMarketData::kContractIdFieldNumber;
const int RealTimeMarketData::kQuoteFieldNumber;
const int RealTimeMarketData::kIsSnapshotFieldNumber;
const int RealTimeMarketData::kCollapsingLevelFieldNumber;
const int RealTimeMarketData::kSnapshotValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealTimeMarketData::RealTimeMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.RealTimeMarketData)
}
RealTimeMarketData::RealTimeMarketData(const RealTimeMarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      quote_(from.quote_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snapshot_values()) {
    snapshot_values_ = new ::WebAPI_1::MarketSnapshotValues(*from.snapshot_values_);
  } else {
    snapshot_values_ = NULL;
  }
  ::memcpy(&contract_id_, &from.contract_id_,
    reinterpret_cast<char*>(&collapsing_level_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(collapsing_level_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.RealTimeMarketData)
}

void RealTimeMarketData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&snapshot_values_, 0, reinterpret_cast<char*>(&collapsing_level_) -
    reinterpret_cast<char*>(&snapshot_values_) + sizeof(collapsing_level_));
}

RealTimeMarketData::~RealTimeMarketData() {
  // @@protoc_insertion_point(destructor:WebAPI_1.RealTimeMarketData)
  SharedDtor();
}

void RealTimeMarketData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete snapshot_values_;
  }
}

void RealTimeMarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeMarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[60].descriptor;
}

const RealTimeMarketData& RealTimeMarketData::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

RealTimeMarketData* RealTimeMarketData::New(::google::protobuf::Arena* arena) const {
  RealTimeMarketData* n = new RealTimeMarketData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealTimeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.RealTimeMarketData)
  quote_.Clear();
  if (has_snapshot_values()) {
    GOOGLE_DCHECK(snapshot_values_ != NULL);
    snapshot_values_->::WebAPI_1::MarketSnapshotValues::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&contract_id_, 0, reinterpret_cast<char*>(&collapsing_level_) -
      reinterpret_cast<char*>(&contract_id_) + sizeof(collapsing_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RealTimeMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.RealTimeMarketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 contract_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.Quote quote = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_quote()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional bool is_snapshot = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 collapsing_level = 4;
      case 4: {
        if (tag == 32u) {
          set_has_collapsing_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collapsing_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.MarketSnapshotValues snapshot_values = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.RealTimeMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.RealTimeMarketData)
  return false;
#undef DO_
}

void RealTimeMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.RealTimeMarketData)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contract_id(), output);
  }

  // repeated .WebAPI_1.Quote quote = 2;
  for (unsigned int i = 0, n = this->quote_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quote(i), output);
  }

  // optional bool is_snapshot = 3;
  if (has_is_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_snapshot(), output);
  }

  // optional uint32 collapsing_level = 4;
  if (has_collapsing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->collapsing_level(), output);
  }

  // optional .WebAPI_1.MarketSnapshotValues snapshot_values = 5;
  if (has_snapshot_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->snapshot_values_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.RealTimeMarketData)
}

::google::protobuf::uint8* RealTimeMarketData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.RealTimeMarketData)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contract_id(), target);
  }

  // repeated .WebAPI_1.Quote quote = 2;
  for (unsigned int i = 0, n = this->quote_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->quote(i), false, target);
  }

  // optional bool is_snapshot = 3;
  if (has_is_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_snapshot(), target);
  }

  // optional uint32 collapsing_level = 4;
  if (has_collapsing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->collapsing_level(), target);
  }

  // optional .WebAPI_1.MarketSnapshotValues snapshot_values = 5;
  if (has_snapshot_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->snapshot_values_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.RealTimeMarketData)
  return target;
}

size_t RealTimeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.RealTimeMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }
  // repeated .WebAPI_1.Quote quote = 2;
  {
    unsigned int count = this->quote_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quote(i));
    }
  }

  // optional .WebAPI_1.MarketSnapshotValues snapshot_values = 5;
  if (has_snapshot_values()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snapshot_values_);
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional bool is_snapshot = 3;
    if (has_is_snapshot()) {
      total_size += 1 + 1;
    }

    // optional uint32 collapsing_level = 4;
    if (has_collapsing_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collapsing_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeMarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.RealTimeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const RealTimeMarketData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealTimeMarketData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.RealTimeMarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.RealTimeMarketData)
    MergeFrom(*source);
  }
}

void RealTimeMarketData::MergeFrom(const RealTimeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.RealTimeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quote_.MergeFrom(from.quote_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_snapshot_values()) {
      mutable_snapshot_values()->::WebAPI_1::MarketSnapshotValues::MergeFrom(from.snapshot_values());
    }
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
    if (from.has_is_snapshot()) {
      set_is_snapshot(from.is_snapshot());
    }
    if (from.has_collapsing_level()) {
      set_collapsing_level(from.collapsing_level());
    }
  }
}

void RealTimeMarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.RealTimeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeMarketData::CopyFrom(const RealTimeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.RealTimeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeMarketData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->quote())) return false;
  return true;
}

void RealTimeMarketData::Swap(RealTimeMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealTimeMarketData::InternalSwap(RealTimeMarketData* other) {
  quote_.UnsafeArenaSwap(&other->quote_);
  std::swap(snapshot_values_, other->snapshot_values_);
  std::swap(contract_id_, other->contract_id_);
  std::swap(is_snapshot_, other->is_snapshot_);
  std::swap(collapsing_level_, other->collapsing_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealTimeMarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[60];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealTimeMarketData

// required uint32 contract_id = 1;
bool RealTimeMarketData::has_contract_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RealTimeMarketData::set_has_contract_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RealTimeMarketData::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RealTimeMarketData::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 RealTimeMarketData::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RealTimeMarketData.contract_id)
  return contract_id_;
}
void RealTimeMarketData::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.RealTimeMarketData.contract_id)
}

// repeated .WebAPI_1.Quote quote = 2;
int RealTimeMarketData::quote_size() const {
  return quote_.size();
}
void RealTimeMarketData::clear_quote() {
  quote_.Clear();
}
const ::WebAPI_1::Quote& RealTimeMarketData::quote(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RealTimeMarketData.quote)
  return quote_.Get(index);
}
::WebAPI_1::Quote* RealTimeMarketData::mutable_quote(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.RealTimeMarketData.quote)
  return quote_.Mutable(index);
}
::WebAPI_1::Quote* RealTimeMarketData::add_quote() {
  // @@protoc_insertion_point(field_add:WebAPI_1.RealTimeMarketData.quote)
  return quote_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::Quote >*
RealTimeMarketData::mutable_quote() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.RealTimeMarketData.quote)
  return &quote_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::Quote >&
RealTimeMarketData::quote() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.RealTimeMarketData.quote)
  return quote_;
}

// optional bool is_snapshot = 3;
bool RealTimeMarketData::has_is_snapshot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RealTimeMarketData::set_has_is_snapshot() {
  _has_bits_[0] |= 0x00000004u;
}
void RealTimeMarketData::clear_has_is_snapshot() {
  _has_bits_[0] &= ~0x00000004u;
}
void RealTimeMarketData::clear_is_snapshot() {
  is_snapshot_ = false;
  clear_has_is_snapshot();
}
bool RealTimeMarketData::is_snapshot() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RealTimeMarketData.is_snapshot)
  return is_snapshot_;
}
void RealTimeMarketData::set_is_snapshot(bool value) {
  set_has_is_snapshot();
  is_snapshot_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.RealTimeMarketData.is_snapshot)
}

// optional uint32 collapsing_level = 4;
bool RealTimeMarketData::has_collapsing_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RealTimeMarketData::set_has_collapsing_level() {
  _has_bits_[0] |= 0x00000008u;
}
void RealTimeMarketData::clear_has_collapsing_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void RealTimeMarketData::clear_collapsing_level() {
  collapsing_level_ = 0u;
  clear_has_collapsing_level();
}
::google::protobuf::uint32 RealTimeMarketData::collapsing_level() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RealTimeMarketData.collapsing_level)
  return collapsing_level_;
}
void RealTimeMarketData::set_collapsing_level(::google::protobuf::uint32 value) {
  set_has_collapsing_level();
  collapsing_level_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.RealTimeMarketData.collapsing_level)
}

// optional .WebAPI_1.MarketSnapshotValues snapshot_values = 5;
bool RealTimeMarketData::has_snapshot_values() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RealTimeMarketData::set_has_snapshot_values() {
  _has_bits_[0] |= 0x00000001u;
}
void RealTimeMarketData::clear_has_snapshot_values() {
  _has_bits_[0] &= ~0x00000001u;
}
void RealTimeMarketData::clear_snapshot_values() {
  if (snapshot_values_ != NULL) snapshot_values_->::WebAPI_1::MarketSnapshotValues::Clear();
  clear_has_snapshot_values();
}
const ::WebAPI_1::MarketSnapshotValues& RealTimeMarketData::snapshot_values() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.RealTimeMarketData.snapshot_values)
  return snapshot_values_ != NULL ? *snapshot_values_
                         : *::WebAPI_1::MarketSnapshotValues::internal_default_instance();
}
::WebAPI_1::MarketSnapshotValues* RealTimeMarketData::mutable_snapshot_values() {
  set_has_snapshot_values();
  if (snapshot_values_ == NULL) {
    snapshot_values_ = new ::WebAPI_1::MarketSnapshotValues;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.RealTimeMarketData.snapshot_values)
  return snapshot_values_;
}
::WebAPI_1::MarketSnapshotValues* RealTimeMarketData::release_snapshot_values() {
  // @@protoc_insertion_point(field_release:WebAPI_1.RealTimeMarketData.snapshot_values)
  clear_has_snapshot_values();
  ::WebAPI_1::MarketSnapshotValues* temp = snapshot_values_;
  snapshot_values_ = NULL;
  return temp;
}
void RealTimeMarketData::set_allocated_snapshot_values(::WebAPI_1::MarketSnapshotValues* snapshot_values) {
  delete snapshot_values_;
  snapshot_values_ = snapshot_values;
  if (snapshot_values) {
    set_has_snapshot_values();
  } else {
    clear_has_snapshot_values();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.RealTimeMarketData.snapshot_values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quote::kTypeFieldNumber;
const int Quote::kQuoteUtcTimeFieldNumber;
const int Quote::kPriceFieldNumber;
const int Quote::kVolumeFieldNumber;
const int Quote::kSessionOhlcIndicatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quote::Quote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.Quote)
}
Quote::Quote(const Quote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      session_ohlc_indicator_(from.session_ohlc_indicator_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quote_utc_time_, &from.quote_utc_time_,
    reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&quote_utc_time_) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.Quote)
}

void Quote::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&quote_utc_time_, 0, reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&quote_utc_time_) + sizeof(volume_));
}

Quote::~Quote() {
  // @@protoc_insertion_point(destructor:WebAPI_1.Quote)
  SharedDtor();
}

void Quote::SharedDtor() {
}

void Quote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[61].descriptor;
}

const Quote& Quote::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

Quote* Quote::New(::google::protobuf::Arena* arena) const {
  Quote* n = new Quote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quote::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.Quote)
  session_ohlc_indicator_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&quote_utc_time_, 0, reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&quote_utc_time_) + sizeof(volume_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Quote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.Quote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 quote_utc_time = 2;
      case 2: {
        if (tag == 16u) {
          set_has_quote_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &quote_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 price = 3;
      case 3: {
        if (tag == 24u) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 volume = 4;
      case 4: {
        if (tag == 32u) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 session_ohlc_indicator = 5;
      case 5: {
        if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_session_ohlc_indicator())));
        } else if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session_ohlc_indicator())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.Quote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.Quote)
  return false;
#undef DO_
}

void Quote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.Quote)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional sint64 quote_utc_time = 2;
  if (has_quote_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->quote_utc_time(), output);
  }

  // required sint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->price(), output);
  }

  // optional uint64 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->volume(), output);
  }

  // repeated uint32 session_ohlc_indicator = 5;
  for (int i = 0; i < this->session_ohlc_indicator_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->session_ohlc_indicator(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.Quote)
}

::google::protobuf::uint8* Quote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.Quote)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional sint64 quote_utc_time = 2;
  if (has_quote_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->quote_utc_time(), target);
  }

  // required sint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->price(), target);
  }

  // optional uint64 volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->volume(), target);
  }

  // repeated uint32 session_ohlc_indicator = 5;
  for (int i = 0; i < this->session_ohlc_indicator_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->session_ohlc_indicator(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.Quote)
  return target;
}

size_t Quote::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.Quote)
  size_t total_size = 0;

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_price()) {
    // required sint32 price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->price());
  }

  return total_size;
}
size_t Quote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.Quote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required sint32 price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 session_ohlc_indicator = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->session_ohlc_indicator_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->session_ohlc_indicator(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->session_ohlc_indicator_size());
    total_size += data_size;
  }

  // optional sint64 quote_utc_time = 2;
  if (has_quote_utc_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->quote_utc_time());
  }

  // optional uint64 volume = 4;
  if (has_volume()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.Quote)
  GOOGLE_DCHECK_NE(&from, this);
  const Quote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.Quote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.Quote)
    MergeFrom(*source);
  }
}

void Quote::MergeFrom(const Quote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.Quote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_ohlc_indicator_.MergeFrom(from.session_ohlc_indicator_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_quote_utc_time()) {
      set_quote_utc_time(from.quote_utc_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
}

void Quote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.Quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quote::CopyFrom(const Quote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.Quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void Quote::Swap(Quote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quote::InternalSwap(Quote* other) {
  session_ohlc_indicator_.UnsafeArenaSwap(&other->session_ohlc_indicator_);
  std::swap(quote_utc_time_, other->quote_utc_time_);
  std::swap(type_, other->type_);
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[61];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quote

// required uint32 type = 1;
bool Quote::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Quote::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Quote::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Quote::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 Quote::type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Quote.type)
  return type_;
}
void Quote::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Quote.type)
}

// optional sint64 quote_utc_time = 2;
bool Quote::has_quote_utc_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Quote::set_has_quote_utc_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Quote::clear_has_quote_utc_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Quote::clear_quote_utc_time() {
  quote_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_quote_utc_time();
}
::google::protobuf::int64 Quote::quote_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Quote.quote_utc_time)
  return quote_utc_time_;
}
void Quote::set_quote_utc_time(::google::protobuf::int64 value) {
  set_has_quote_utc_time();
  quote_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Quote.quote_utc_time)
}

// required sint32 price = 3;
bool Quote::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Quote::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
void Quote::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void Quote::clear_price() {
  price_ = 0;
  clear_has_price();
}
::google::protobuf::int32 Quote::price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Quote.price)
  return price_;
}
void Quote::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Quote.price)
}

// optional uint64 volume = 4;
bool Quote::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Quote::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
void Quote::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
void Quote::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
::google::protobuf::uint64 Quote::volume() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Quote.volume)
  return volume_;
}
void Quote::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.Quote.volume)
}

// repeated uint32 session_ohlc_indicator = 5;
int Quote::session_ohlc_indicator_size() const {
  return session_ohlc_indicator_.size();
}
void Quote::clear_session_ohlc_indicator() {
  session_ohlc_indicator_.Clear();
}
::google::protobuf::uint32 Quote::session_ohlc_indicator(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.Quote.session_ohlc_indicator)
  return session_ohlc_indicator_.Get(index);
}
void Quote::set_session_ohlc_indicator(int index, ::google::protobuf::uint32 value) {
  session_ohlc_indicator_.Set(index, value);
  // @@protoc_insertion_point(field_set:WebAPI_1.Quote.session_ohlc_indicator)
}
void Quote::add_session_ohlc_indicator(::google::protobuf::uint32 value) {
  session_ohlc_indicator_.Add(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.Quote.session_ohlc_indicator)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Quote::session_ohlc_indicator() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.Quote.session_ohlc_indicator)
  return session_ohlc_indicator_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Quote::mutable_session_ohlc_indicator() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.Quote.session_ohlc_indicator)
  return &session_ohlc_indicator_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketSnapshotValues::kOpenPriceFieldNumber;
const int MarketSnapshotValues::kHighPriceFieldNumber;
const int MarketSnapshotValues::kLowPriceFieldNumber;
const int MarketSnapshotValues::kClosePriceFieldNumber;
const int MarketSnapshotValues::kYesterdaySettlementFieldNumber;
const int MarketSnapshotValues::kTotalVolumeFieldNumber;
const int MarketSnapshotValues::kYesterdayCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketSnapshotValues::MarketSnapshotValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.MarketSnapshotValues)
}
MarketSnapshotValues::MarketSnapshotValues(const MarketSnapshotValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_price_, &from.open_price_,
    reinterpret_cast<char*>(&yesterday_close_) -
    reinterpret_cast<char*>(&open_price_) + sizeof(yesterday_close_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.MarketSnapshotValues)
}

void MarketSnapshotValues::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&open_price_, 0, reinterpret_cast<char*>(&yesterday_close_) -
    reinterpret_cast<char*>(&open_price_) + sizeof(yesterday_close_));
}

MarketSnapshotValues::~MarketSnapshotValues() {
  // @@protoc_insertion_point(destructor:WebAPI_1.MarketSnapshotValues)
  SharedDtor();
}

void MarketSnapshotValues::SharedDtor() {
}

void MarketSnapshotValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketSnapshotValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[62].descriptor;
}

const MarketSnapshotValues& MarketSnapshotValues::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

MarketSnapshotValues* MarketSnapshotValues::New(::google::protobuf::Arena* arena) const {
  MarketSnapshotValues* n = new MarketSnapshotValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketSnapshotValues::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.MarketSnapshotValues)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&open_price_, 0, reinterpret_cast<char*>(&yesterday_close_) -
      reinterpret_cast<char*>(&open_price_) + sizeof(yesterday_close_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketSnapshotValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.MarketSnapshotValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 open_price = 1;
      case 1: {
        if (tag == 8u) {
          set_has_open_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &open_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 high_price = 2;
      case 2: {
        if (tag == 16u) {
          set_has_high_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &high_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 low_price = 3;
      case 3: {
        if (tag == 24u) {
          set_has_low_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &low_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 close_price = 4;
      case 4: {
        if (tag == 32u) {
          set_has_close_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &close_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 yesterday_settlement = 5;
      case 5: {
        if (tag == 40u) {
          set_has_yesterday_settlement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &yesterday_settlement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_volume = 6;
      case 6: {
        if (tag == 48u) {
          set_has_total_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 yesterday_close = 7;
      case 7: {
        if (tag == 56u) {
          set_has_yesterday_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &yesterday_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.MarketSnapshotValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.MarketSnapshotValues)
  return false;
#undef DO_
}

void MarketSnapshotValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.MarketSnapshotValues)
  // optional sint32 open_price = 1;
  if (has_open_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->open_price(), output);
  }

  // optional sint32 high_price = 2;
  if (has_high_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->high_price(), output);
  }

  // optional sint32 low_price = 3;
  if (has_low_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->low_price(), output);
  }

  // optional sint32 close_price = 4;
  if (has_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->close_price(), output);
  }

  // optional sint32 yesterday_settlement = 5;
  if (has_yesterday_settlement()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->yesterday_settlement(), output);
  }

  // optional uint32 total_volume = 6;
  if (has_total_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_volume(), output);
  }

  // optional sint32 yesterday_close = 7;
  if (has_yesterday_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->yesterday_close(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.MarketSnapshotValues)
}

::google::protobuf::uint8* MarketSnapshotValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.MarketSnapshotValues)
  // optional sint32 open_price = 1;
  if (has_open_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->open_price(), target);
  }

  // optional sint32 high_price = 2;
  if (has_high_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->high_price(), target);
  }

  // optional sint32 low_price = 3;
  if (has_low_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->low_price(), target);
  }

  // optional sint32 close_price = 4;
  if (has_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->close_price(), target);
  }

  // optional sint32 yesterday_settlement = 5;
  if (has_yesterday_settlement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->yesterday_settlement(), target);
  }

  // optional uint32 total_volume = 6;
  if (has_total_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_volume(), target);
  }

  // optional sint32 yesterday_close = 7;
  if (has_yesterday_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->yesterday_close(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.MarketSnapshotValues)
  return target;
}

size_t MarketSnapshotValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.MarketSnapshotValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional sint32 open_price = 1;
    if (has_open_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->open_price());
    }

    // optional sint32 high_price = 2;
    if (has_high_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->high_price());
    }

    // optional sint32 low_price = 3;
    if (has_low_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->low_price());
    }

    // optional sint32 close_price = 4;
    if (has_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->close_price());
    }

    // optional sint32 yesterday_settlement = 5;
    if (has_yesterday_settlement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->yesterday_settlement());
    }

    // optional uint32 total_volume = 6;
    if (has_total_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_volume());
    }

    // optional sint32 yesterday_close = 7;
    if (has_yesterday_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->yesterday_close());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketSnapshotValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.MarketSnapshotValues)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketSnapshotValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketSnapshotValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.MarketSnapshotValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.MarketSnapshotValues)
    MergeFrom(*source);
  }
}

void MarketSnapshotValues::MergeFrom(const MarketSnapshotValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.MarketSnapshotValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_open_price()) {
      set_open_price(from.open_price());
    }
    if (from.has_high_price()) {
      set_high_price(from.high_price());
    }
    if (from.has_low_price()) {
      set_low_price(from.low_price());
    }
    if (from.has_close_price()) {
      set_close_price(from.close_price());
    }
    if (from.has_yesterday_settlement()) {
      set_yesterday_settlement(from.yesterday_settlement());
    }
    if (from.has_total_volume()) {
      set_total_volume(from.total_volume());
    }
    if (from.has_yesterday_close()) {
      set_yesterday_close(from.yesterday_close());
    }
  }
}

void MarketSnapshotValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.MarketSnapshotValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketSnapshotValues::CopyFrom(const MarketSnapshotValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.MarketSnapshotValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSnapshotValues::IsInitialized() const {
  return true;
}

void MarketSnapshotValues::Swap(MarketSnapshotValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketSnapshotValues::InternalSwap(MarketSnapshotValues* other) {
  std::swap(open_price_, other->open_price_);
  std::swap(high_price_, other->high_price_);
  std::swap(low_price_, other->low_price_);
  std::swap(close_price_, other->close_price_);
  std::swap(yesterday_settlement_, other->yesterday_settlement_);
  std::swap(total_volume_, other->total_volume_);
  std::swap(yesterday_close_, other->yesterday_close_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarketSnapshotValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[62];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketSnapshotValues

// optional sint32 open_price = 1;
bool MarketSnapshotValues::has_open_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarketSnapshotValues::set_has_open_price() {
  _has_bits_[0] |= 0x00000001u;
}
void MarketSnapshotValues::clear_has_open_price() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarketSnapshotValues::clear_open_price() {
  open_price_ = 0;
  clear_has_open_price();
}
::google::protobuf::int32 MarketSnapshotValues::open_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketSnapshotValues.open_price)
  return open_price_;
}
void MarketSnapshotValues::set_open_price(::google::protobuf::int32 value) {
  set_has_open_price();
  open_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketSnapshotValues.open_price)
}

// optional sint32 high_price = 2;
bool MarketSnapshotValues::has_high_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarketSnapshotValues::set_has_high_price() {
  _has_bits_[0] |= 0x00000002u;
}
void MarketSnapshotValues::clear_has_high_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarketSnapshotValues::clear_high_price() {
  high_price_ = 0;
  clear_has_high_price();
}
::google::protobuf::int32 MarketSnapshotValues::high_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketSnapshotValues.high_price)
  return high_price_;
}
void MarketSnapshotValues::set_high_price(::google::protobuf::int32 value) {
  set_has_high_price();
  high_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketSnapshotValues.high_price)
}

// optional sint32 low_price = 3;
bool MarketSnapshotValues::has_low_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarketSnapshotValues::set_has_low_price() {
  _has_bits_[0] |= 0x00000004u;
}
void MarketSnapshotValues::clear_has_low_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarketSnapshotValues::clear_low_price() {
  low_price_ = 0;
  clear_has_low_price();
}
::google::protobuf::int32 MarketSnapshotValues::low_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketSnapshotValues.low_price)
  return low_price_;
}
void MarketSnapshotValues::set_low_price(::google::protobuf::int32 value) {
  set_has_low_price();
  low_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketSnapshotValues.low_price)
}

// optional sint32 close_price = 4;
bool MarketSnapshotValues::has_close_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarketSnapshotValues::set_has_close_price() {
  _has_bits_[0] |= 0x00000008u;
}
void MarketSnapshotValues::clear_has_close_price() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarketSnapshotValues::clear_close_price() {
  close_price_ = 0;
  clear_has_close_price();
}
::google::protobuf::int32 MarketSnapshotValues::close_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketSnapshotValues.close_price)
  return close_price_;
}
void MarketSnapshotValues::set_close_price(::google::protobuf::int32 value) {
  set_has_close_price();
  close_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketSnapshotValues.close_price)
}

// optional sint32 yesterday_settlement = 5;
bool MarketSnapshotValues::has_yesterday_settlement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MarketSnapshotValues::set_has_yesterday_settlement() {
  _has_bits_[0] |= 0x00000010u;
}
void MarketSnapshotValues::clear_has_yesterday_settlement() {
  _has_bits_[0] &= ~0x00000010u;
}
void MarketSnapshotValues::clear_yesterday_settlement() {
  yesterday_settlement_ = 0;
  clear_has_yesterday_settlement();
}
::google::protobuf::int32 MarketSnapshotValues::yesterday_settlement() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketSnapshotValues.yesterday_settlement)
  return yesterday_settlement_;
}
void MarketSnapshotValues::set_yesterday_settlement(::google::protobuf::int32 value) {
  set_has_yesterday_settlement();
  yesterday_settlement_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketSnapshotValues.yesterday_settlement)
}

// optional uint32 total_volume = 6;
bool MarketSnapshotValues::has_total_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MarketSnapshotValues::set_has_total_volume() {
  _has_bits_[0] |= 0x00000020u;
}
void MarketSnapshotValues::clear_has_total_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
void MarketSnapshotValues::clear_total_volume() {
  total_volume_ = 0u;
  clear_has_total_volume();
}
::google::protobuf::uint32 MarketSnapshotValues::total_volume() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketSnapshotValues.total_volume)
  return total_volume_;
}
void MarketSnapshotValues::set_total_volume(::google::protobuf::uint32 value) {
  set_has_total_volume();
  total_volume_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketSnapshotValues.total_volume)
}

// optional sint32 yesterday_close = 7;
bool MarketSnapshotValues::has_yesterday_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MarketSnapshotValues::set_has_yesterday_close() {
  _has_bits_[0] |= 0x00000040u;
}
void MarketSnapshotValues::clear_has_yesterday_close() {
  _has_bits_[0] &= ~0x00000040u;
}
void MarketSnapshotValues::clear_yesterday_close() {
  yesterday_close_ = 0;
  clear_has_yesterday_close();
}
::google::protobuf::int32 MarketSnapshotValues::yesterday_close() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.MarketSnapshotValues.yesterday_close)
  return yesterday_close_;
}
void MarketSnapshotValues::set_yesterday_close(::google::protobuf::int32 value) {
  set_has_yesterday_close();
  yesterday_close_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.MarketSnapshotValues.yesterday_close)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadUserAttributeRequest::kRequestIdFieldNumber;
const int ReadUserAttributeRequest::kAttributeNameFieldNumber;
const int ReadUserAttributeRequest::kIsRegexpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadUserAttributeRequest::ReadUserAttributeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ReadUserAttributeRequest)
}
ReadUserAttributeRequest::ReadUserAttributeRequest(const ReadUserAttributeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attribute_name_(from.attribute_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&is_regexp_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(is_regexp_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ReadUserAttributeRequest)
}

void ReadUserAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&is_regexp_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(is_regexp_));
}

ReadUserAttributeRequest::~ReadUserAttributeRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ReadUserAttributeRequest)
  SharedDtor();
}

void ReadUserAttributeRequest::SharedDtor() {
}

void ReadUserAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadUserAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[63].descriptor;
}

const ReadUserAttributeRequest& ReadUserAttributeRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ReadUserAttributeRequest* ReadUserAttributeRequest::New(::google::protobuf::Arena* arena) const {
  ReadUserAttributeRequest* n = new ReadUserAttributeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadUserAttributeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ReadUserAttributeRequest)
  attribute_name_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&is_regexp_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(is_regexp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReadUserAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ReadUserAttributeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string attribute_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attribute_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attribute_name(this->attribute_name_size() - 1).data(),
            this->attribute_name(this->attribute_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ReadUserAttributeRequest.attribute_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_regexp = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_regexp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_regexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ReadUserAttributeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ReadUserAttributeRequest)
  return false;
#undef DO_
}

void ReadUserAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ReadUserAttributeRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated string attribute_name = 2;
  for (int i = 0; i < this->attribute_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attribute_name(i).data(), this->attribute_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ReadUserAttributeRequest.attribute_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attribute_name(i), output);
  }

  // optional bool is_regexp = 3;
  if (has_is_regexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_regexp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ReadUserAttributeRequest)
}

::google::protobuf::uint8* ReadUserAttributeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ReadUserAttributeRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated string attribute_name = 2;
  for (int i = 0; i < this->attribute_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attribute_name(i).data(), this->attribute_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ReadUserAttributeRequest.attribute_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->attribute_name(i), target);
  }

  // optional bool is_regexp = 3;
  if (has_is_regexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_regexp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ReadUserAttributeRequest)
  return target;
}

size_t ReadUserAttributeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ReadUserAttributeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  // repeated string attribute_name = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attribute_name_size());
  for (int i = 0; i < this->attribute_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attribute_name(i));
  }

  // optional bool is_regexp = 3;
  if (has_is_regexp()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadUserAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ReadUserAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadUserAttributeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadUserAttributeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ReadUserAttributeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ReadUserAttributeRequest)
    MergeFrom(*source);
  }
}

void ReadUserAttributeRequest::MergeFrom(const ReadUserAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ReadUserAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attribute_name_.MergeFrom(from.attribute_name_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_is_regexp()) {
      set_is_regexp(from.is_regexp());
    }
  }
}

void ReadUserAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ReadUserAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadUserAttributeRequest::CopyFrom(const ReadUserAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ReadUserAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadUserAttributeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReadUserAttributeRequest::Swap(ReadUserAttributeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadUserAttributeRequest::InternalSwap(ReadUserAttributeRequest* other) {
  attribute_name_.UnsafeArenaSwap(&other->attribute_name_);
  std::swap(request_id_, other->request_id_);
  std::swap(is_regexp_, other->is_regexp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadUserAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[63];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadUserAttributeRequest

// required uint32 request_id = 1;
bool ReadUserAttributeRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadUserAttributeRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadUserAttributeRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadUserAttributeRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 ReadUserAttributeRequest::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ReadUserAttributeRequest.request_id)
  return request_id_;
}
void ReadUserAttributeRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ReadUserAttributeRequest.request_id)
}

// repeated string attribute_name = 2;
int ReadUserAttributeRequest::attribute_name_size() const {
  return attribute_name_.size();
}
void ReadUserAttributeRequest::clear_attribute_name() {
  attribute_name_.Clear();
}
const ::std::string& ReadUserAttributeRequest::attribute_name(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ReadUserAttributeRequest.attribute_name)
  return attribute_name_.Get(index);
}
::std::string* ReadUserAttributeRequest::mutable_attribute_name(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ReadUserAttributeRequest.attribute_name)
  return attribute_name_.Mutable(index);
}
void ReadUserAttributeRequest::set_attribute_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WebAPI_1.ReadUserAttributeRequest.attribute_name)
  attribute_name_.Mutable(index)->assign(value);
}
void ReadUserAttributeRequest::set_attribute_name(int index, const char* value) {
  attribute_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ReadUserAttributeRequest.attribute_name)
}
void ReadUserAttributeRequest::set_attribute_name(int index, const char* value, size_t size) {
  attribute_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ReadUserAttributeRequest.attribute_name)
}
::std::string* ReadUserAttributeRequest::add_attribute_name() {
  // @@protoc_insertion_point(field_add_mutable:WebAPI_1.ReadUserAttributeRequest.attribute_name)
  return attribute_name_.Add();
}
void ReadUserAttributeRequest::add_attribute_name(const ::std::string& value) {
  attribute_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WebAPI_1.ReadUserAttributeRequest.attribute_name)
}
void ReadUserAttributeRequest::add_attribute_name(const char* value) {
  attribute_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WebAPI_1.ReadUserAttributeRequest.attribute_name)
}
void ReadUserAttributeRequest::add_attribute_name(const char* value, size_t size) {
  attribute_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WebAPI_1.ReadUserAttributeRequest.attribute_name)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReadUserAttributeRequest::attribute_name() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ReadUserAttributeRequest.attribute_name)
  return attribute_name_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReadUserAttributeRequest::mutable_attribute_name() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ReadUserAttributeRequest.attribute_name)
  return &attribute_name_;
}

// optional bool is_regexp = 3;
bool ReadUserAttributeRequest::has_is_regexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReadUserAttributeRequest::set_has_is_regexp() {
  _has_bits_[0] |= 0x00000002u;
}
void ReadUserAttributeRequest::clear_has_is_regexp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReadUserAttributeRequest::clear_is_regexp() {
  is_regexp_ = false;
  clear_has_is_regexp();
}
bool ReadUserAttributeRequest::is_regexp() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ReadUserAttributeRequest.is_regexp)
  return is_regexp_;
}
void ReadUserAttributeRequest::set_is_regexp(bool value) {
  set_has_is_regexp();
  is_regexp_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ReadUserAttributeRequest.is_regexp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadUserAttributeResult::kRequestIdFieldNumber;
const int ReadUserAttributeResult::kResultCodeFieldNumber;
const int ReadUserAttributeResult::kUserAttributeFieldNumber;
const int ReadUserAttributeResult::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadUserAttributeResult::ReadUserAttributeResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ReadUserAttributeResult)
}
ReadUserAttributeResult::ReadUserAttributeResult(const ReadUserAttributeResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_attribute_(from.user_attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ReadUserAttributeResult)
}

void ReadUserAttributeResult::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(result_code_));
}

ReadUserAttributeResult::~ReadUserAttributeResult() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ReadUserAttributeResult)
  SharedDtor();
}

void ReadUserAttributeResult::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadUserAttributeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadUserAttributeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[64].descriptor;
}

const ReadUserAttributeResult& ReadUserAttributeResult::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ReadUserAttributeResult* ReadUserAttributeResult::New(::google::protobuf::Arena* arena) const {
  ReadUserAttributeResult* n = new ReadUserAttributeResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadUserAttributeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ReadUserAttributeResult)
  user_attribute_.Clear();
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(result_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReadUserAttributeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ReadUserAttributeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.UserAttribute user_attribute = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_attribute()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional string text_message = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ReadUserAttributeResult.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ReadUserAttributeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ReadUserAttributeResult)
  return false;
#undef DO_
}

void ReadUserAttributeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ReadUserAttributeResult)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 3;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_attribute(i), output);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ReadUserAttributeResult.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ReadUserAttributeResult)
}

::google::protobuf::uint8* ReadUserAttributeResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ReadUserAttributeResult)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 3;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->user_attribute(i), false, target);
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ReadUserAttributeResult.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ReadUserAttributeResult)
  return target;
}

size_t ReadUserAttributeResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.ReadUserAttributeResult)
  size_t total_size = 0;

  if (has_request_id()) {
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  if (has_result_code()) {
    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  return total_size;
}
size_t ReadUserAttributeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ReadUserAttributeResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());

    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.UserAttribute user_attribute = 3;
  {
    unsigned int count = this->user_attribute_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_attribute(i));
    }
  }

  // optional string text_message = 4;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadUserAttributeResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ReadUserAttributeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadUserAttributeResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadUserAttributeResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ReadUserAttributeResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ReadUserAttributeResult)
    MergeFrom(*source);
  }
}

void ReadUserAttributeResult::MergeFrom(const ReadUserAttributeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ReadUserAttributeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_attribute_.MergeFrom(from.user_attribute_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
}

void ReadUserAttributeResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ReadUserAttributeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadUserAttributeResult::CopyFrom(const ReadUserAttributeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ReadUserAttributeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadUserAttributeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user_attribute())) return false;
  return true;
}

void ReadUserAttributeResult::Swap(ReadUserAttributeResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadUserAttributeResult::InternalSwap(ReadUserAttributeResult* other) {
  user_attribute_.UnsafeArenaSwap(&other->user_attribute_);
  text_message_.Swap(&other->text_message_);
  std::swap(request_id_, other->request_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadUserAttributeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[64];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadUserAttributeResult

// required uint32 request_id = 1;
bool ReadUserAttributeResult::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReadUserAttributeResult::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReadUserAttributeResult::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReadUserAttributeResult::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 ReadUserAttributeResult::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ReadUserAttributeResult.request_id)
  return request_id_;
}
void ReadUserAttributeResult::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ReadUserAttributeResult.request_id)
}

// required uint32 result_code = 2;
bool ReadUserAttributeResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReadUserAttributeResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void ReadUserAttributeResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReadUserAttributeResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 ReadUserAttributeResult::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ReadUserAttributeResult.result_code)
  return result_code_;
}
void ReadUserAttributeResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ReadUserAttributeResult.result_code)
}

// repeated .WebAPI_1.UserAttribute user_attribute = 3;
int ReadUserAttributeResult::user_attribute_size() const {
  return user_attribute_.size();
}
void ReadUserAttributeResult::clear_user_attribute() {
  user_attribute_.Clear();
}
const ::WebAPI_1::UserAttribute& ReadUserAttributeResult::user_attribute(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ReadUserAttributeResult.user_attribute)
  return user_attribute_.Get(index);
}
::WebAPI_1::UserAttribute* ReadUserAttributeResult::mutable_user_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ReadUserAttributeResult.user_attribute)
  return user_attribute_.Mutable(index);
}
::WebAPI_1::UserAttribute* ReadUserAttributeResult::add_user_attribute() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ReadUserAttributeResult.user_attribute)
  return user_attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >*
ReadUserAttributeResult::mutable_user_attribute() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ReadUserAttributeResult.user_attribute)
  return &user_attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >&
ReadUserAttributeResult::user_attribute() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ReadUserAttributeResult.user_attribute)
  return user_attribute_;
}

// optional string text_message = 4;
bool ReadUserAttributeResult::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadUserAttributeResult::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadUserAttributeResult::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadUserAttributeResult::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& ReadUserAttributeResult::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ReadUserAttributeResult.text_message)
  return text_message_.GetNoArena();
}
void ReadUserAttributeResult::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ReadUserAttributeResult.text_message)
}
void ReadUserAttributeResult::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ReadUserAttributeResult.text_message)
}
void ReadUserAttributeResult::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ReadUserAttributeResult.text_message)
}
::std::string* ReadUserAttributeResult::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ReadUserAttributeResult.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadUserAttributeResult::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ReadUserAttributeResult.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadUserAttributeResult::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ReadUserAttributeResult.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyUserAttributeRequest::kRequestIdFieldNumber;
const int ModifyUserAttributeRequest::kUserAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyUserAttributeRequest::ModifyUserAttributeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ModifyUserAttributeRequest)
}
ModifyUserAttributeRequest::ModifyUserAttributeRequest(const ModifyUserAttributeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_attribute_(from.user_attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ModifyUserAttributeRequest)
}

void ModifyUserAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
}

ModifyUserAttributeRequest::~ModifyUserAttributeRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ModifyUserAttributeRequest)
  SharedDtor();
}

void ModifyUserAttributeRequest::SharedDtor() {
}

void ModifyUserAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyUserAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[65].descriptor;
}

const ModifyUserAttributeRequest& ModifyUserAttributeRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ModifyUserAttributeRequest* ModifyUserAttributeRequest::New(::google::protobuf::Arena* arena) const {
  ModifyUserAttributeRequest* n = new ModifyUserAttributeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyUserAttributeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ModifyUserAttributeRequest)
  user_attribute_.Clear();
  request_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyUserAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ModifyUserAttributeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.UserAttribute user_attribute = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_attribute()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ModifyUserAttributeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ModifyUserAttributeRequest)
  return false;
#undef DO_
}

void ModifyUserAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ModifyUserAttributeRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 2;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_attribute(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ModifyUserAttributeRequest)
}

::google::protobuf::uint8* ModifyUserAttributeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ModifyUserAttributeRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated .WebAPI_1.UserAttribute user_attribute = 2;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->user_attribute(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ModifyUserAttributeRequest)
  return target;
}

size_t ModifyUserAttributeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ModifyUserAttributeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  // repeated .WebAPI_1.UserAttribute user_attribute = 2;
  {
    unsigned int count = this->user_attribute_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_attribute(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyUserAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ModifyUserAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyUserAttributeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyUserAttributeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ModifyUserAttributeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ModifyUserAttributeRequest)
    MergeFrom(*source);
  }
}

void ModifyUserAttributeRequest::MergeFrom(const ModifyUserAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ModifyUserAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_attribute_.MergeFrom(from.user_attribute_);
  if (from.has_request_id()) {
    set_request_id(from.request_id());
  }
}

void ModifyUserAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ModifyUserAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyUserAttributeRequest::CopyFrom(const ModifyUserAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ModifyUserAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyUserAttributeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user_attribute())) return false;
  return true;
}

void ModifyUserAttributeRequest::Swap(ModifyUserAttributeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyUserAttributeRequest::InternalSwap(ModifyUserAttributeRequest* other) {
  user_attribute_.UnsafeArenaSwap(&other->user_attribute_);
  std::swap(request_id_, other->request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyUserAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[65];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyUserAttributeRequest

// required uint32 request_id = 1;
bool ModifyUserAttributeRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifyUserAttributeRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifyUserAttributeRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyUserAttributeRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 ModifyUserAttributeRequest::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributeRequest.request_id)
  return request_id_;
}
void ModifyUserAttributeRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyUserAttributeRequest.request_id)
}

// repeated .WebAPI_1.UserAttribute user_attribute = 2;
int ModifyUserAttributeRequest::user_attribute_size() const {
  return user_attribute_.size();
}
void ModifyUserAttributeRequest::clear_user_attribute() {
  user_attribute_.Clear();
}
const ::WebAPI_1::UserAttribute& ModifyUserAttributeRequest::user_attribute(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributeRequest.user_attribute)
  return user_attribute_.Get(index);
}
::WebAPI_1::UserAttribute* ModifyUserAttributeRequest::mutable_user_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ModifyUserAttributeRequest.user_attribute)
  return user_attribute_.Mutable(index);
}
::WebAPI_1::UserAttribute* ModifyUserAttributeRequest::add_user_attribute() {
  // @@protoc_insertion_point(field_add:WebAPI_1.ModifyUserAttributeRequest.user_attribute)
  return user_attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >*
ModifyUserAttributeRequest::mutable_user_attribute() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.ModifyUserAttributeRequest.user_attribute)
  return &user_attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::UserAttribute >&
ModifyUserAttributeRequest::user_attribute() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.ModifyUserAttributeRequest.user_attribute)
  return user_attribute_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyUserAttributeResult::kRequestIdFieldNumber;
const int ModifyUserAttributeResult::kResultCodeFieldNumber;
const int ModifyUserAttributeResult::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyUserAttributeResult::ModifyUserAttributeResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.ModifyUserAttributeResult)
}
ModifyUserAttributeResult::ModifyUserAttributeResult(const ModifyUserAttributeResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.ModifyUserAttributeResult)
}

void ModifyUserAttributeResult::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(result_code_));
}

ModifyUserAttributeResult::~ModifyUserAttributeResult() {
  // @@protoc_insertion_point(destructor:WebAPI_1.ModifyUserAttributeResult)
  SharedDtor();
}

void ModifyUserAttributeResult::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModifyUserAttributeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyUserAttributeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[66].descriptor;
}

const ModifyUserAttributeResult& ModifyUserAttributeResult::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

ModifyUserAttributeResult* ModifyUserAttributeResult::New(::google::protobuf::Arena* arena) const {
  ModifyUserAttributeResult* n = new ModifyUserAttributeResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyUserAttributeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.ModifyUserAttributeResult)
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(result_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModifyUserAttributeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.ModifyUserAttributeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.ModifyUserAttributeResult.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.ModifyUserAttributeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.ModifyUserAttributeResult)
  return false;
#undef DO_
}

void ModifyUserAttributeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.ModifyUserAttributeResult)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional string text_message = 3;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyUserAttributeResult.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.ModifyUserAttributeResult)
}

::google::protobuf::uint8* ModifyUserAttributeResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.ModifyUserAttributeResult)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // optional string text_message = 3;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.ModifyUserAttributeResult.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.ModifyUserAttributeResult)
  return target;
}

size_t ModifyUserAttributeResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.ModifyUserAttributeResult)
  size_t total_size = 0;

  if (has_request_id()) {
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  if (has_result_code()) {
    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  return total_size;
}
size_t ModifyUserAttributeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.ModifyUserAttributeResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());

    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string text_message = 3;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyUserAttributeResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.ModifyUserAttributeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyUserAttributeResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyUserAttributeResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.ModifyUserAttributeResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.ModifyUserAttributeResult)
    MergeFrom(*source);
  }
}

void ModifyUserAttributeResult::MergeFrom(const ModifyUserAttributeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.ModifyUserAttributeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
}

void ModifyUserAttributeResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.ModifyUserAttributeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyUserAttributeResult::CopyFrom(const ModifyUserAttributeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.ModifyUserAttributeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyUserAttributeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void ModifyUserAttributeResult::Swap(ModifyUserAttributeResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyUserAttributeResult::InternalSwap(ModifyUserAttributeResult* other) {
  text_message_.Swap(&other->text_message_);
  std::swap(request_id_, other->request_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyUserAttributeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[66];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyUserAttributeResult

// required uint32 request_id = 1;
bool ModifyUserAttributeResult::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModifyUserAttributeResult::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ModifyUserAttributeResult::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModifyUserAttributeResult::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 ModifyUserAttributeResult::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributeResult.request_id)
  return request_id_;
}
void ModifyUserAttributeResult::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyUserAttributeResult.request_id)
}

// required uint32 result_code = 2;
bool ModifyUserAttributeResult::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModifyUserAttributeResult::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void ModifyUserAttributeResult::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModifyUserAttributeResult::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 ModifyUserAttributeResult::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributeResult.result_code)
  return result_code_;
}
void ModifyUserAttributeResult::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyUserAttributeResult.result_code)
}

// optional string text_message = 3;
bool ModifyUserAttributeResult::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifyUserAttributeResult::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifyUserAttributeResult::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyUserAttributeResult::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& ModifyUserAttributeResult::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.ModifyUserAttributeResult.text_message)
  return text_message_.GetNoArena();
}
void ModifyUserAttributeResult::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.ModifyUserAttributeResult.text_message)
}
void ModifyUserAttributeResult::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.ModifyUserAttributeResult.text_message)
}
void ModifyUserAttributeResult::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.ModifyUserAttributeResult.text_message)
}
::std::string* ModifyUserAttributeResult::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.ModifyUserAttributeResult.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModifyUserAttributeResult::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.ModifyUserAttributeResult.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyUserAttributeResult::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.ModifyUserAttributeResult.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeAndSalesParameters::kContractIdFieldNumber;
const int TimeAndSalesParameters::kLevelFieldNumber;
const int TimeAndSalesParameters::kFromUtcTimeFieldNumber;
const int TimeAndSalesParameters::kToUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeAndSalesParameters::TimeAndSalesParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TimeAndSalesParameters)
}
TimeAndSalesParameters::TimeAndSalesParameters(const TimeAndSalesParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&contract_id_, &from.contract_id_,
    reinterpret_cast<char*>(&to_utc_time_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(to_utc_time_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TimeAndSalesParameters)
}

void TimeAndSalesParameters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&contract_id_, 0, reinterpret_cast<char*>(&to_utc_time_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(to_utc_time_));
}

TimeAndSalesParameters::~TimeAndSalesParameters() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TimeAndSalesParameters)
  SharedDtor();
}

void TimeAndSalesParameters::SharedDtor() {
}

void TimeAndSalesParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeAndSalesParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[67].descriptor;
}

const TimeAndSalesParameters& TimeAndSalesParameters::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TimeAndSalesParameters* TimeAndSalesParameters::New(::google::protobuf::Arena* arena) const {
  TimeAndSalesParameters* n = new TimeAndSalesParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeAndSalesParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TimeAndSalesParameters)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&contract_id_, 0, reinterpret_cast<char*>(&to_utc_time_) -
      reinterpret_cast<char*>(&contract_id_) + sizeof(to_utc_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeAndSalesParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TimeAndSalesParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 contract_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 from_utc_time = 3;
      case 3: {
        if (tag == 24u) {
          set_has_from_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &from_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 to_utc_time = 4;
      case 4: {
        if (tag == 32u) {
          set_has_to_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &to_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TimeAndSalesParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TimeAndSalesParameters)
  return false;
#undef DO_
}

void TimeAndSalesParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TimeAndSalesParameters)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contract_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required sint64 from_utc_time = 3;
  if (has_from_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->from_utc_time(), output);
  }

  // optional sint64 to_utc_time = 4;
  if (has_to_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->to_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TimeAndSalesParameters)
}

::google::protobuf::uint8* TimeAndSalesParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TimeAndSalesParameters)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contract_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required sint64 from_utc_time = 3;
  if (has_from_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->from_utc_time(), target);
  }

  // optional sint64 to_utc_time = 4;
  if (has_to_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->to_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TimeAndSalesParameters)
  return target;
}

size_t TimeAndSalesParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.TimeAndSalesParameters)
  size_t total_size = 0;

  if (has_contract_id()) {
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  if (has_level()) {
    // required uint32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  if (has_from_utc_time()) {
    // required sint64 from_utc_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->from_utc_time());
  }

  return total_size;
}
size_t TimeAndSalesParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TimeAndSalesParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

    // required uint32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

    // required sint64 from_utc_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->from_utc_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sint64 to_utc_time = 4;
  if (has_to_utc_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->to_utc_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeAndSalesParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TimeAndSalesParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeAndSalesParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeAndSalesParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TimeAndSalesParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TimeAndSalesParameters)
    MergeFrom(*source);
  }
}

void TimeAndSalesParameters::MergeFrom(const TimeAndSalesParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TimeAndSalesParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_from_utc_time()) {
      set_from_utc_time(from.from_utc_time());
    }
    if (from.has_to_utc_time()) {
      set_to_utc_time(from.to_utc_time());
    }
  }
}

void TimeAndSalesParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TimeAndSalesParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeAndSalesParameters::CopyFrom(const TimeAndSalesParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TimeAndSalesParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeAndSalesParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TimeAndSalesParameters::Swap(TimeAndSalesParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeAndSalesParameters::InternalSwap(TimeAndSalesParameters* other) {
  std::swap(contract_id_, other->contract_id_);
  std::swap(level_, other->level_);
  std::swap(from_utc_time_, other->from_utc_time_);
  std::swap(to_utc_time_, other->to_utc_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeAndSalesParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[67];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeAndSalesParameters

// required uint32 contract_id = 1;
bool TimeAndSalesParameters::has_contract_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeAndSalesParameters::set_has_contract_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeAndSalesParameters::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeAndSalesParameters::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 TimeAndSalesParameters::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesParameters.contract_id)
  return contract_id_;
}
void TimeAndSalesParameters::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesParameters.contract_id)
}

// required uint32 level = 2;
bool TimeAndSalesParameters::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeAndSalesParameters::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeAndSalesParameters::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeAndSalesParameters::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 TimeAndSalesParameters::level() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesParameters.level)
  return level_;
}
void TimeAndSalesParameters::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesParameters.level)
}

// required sint64 from_utc_time = 3;
bool TimeAndSalesParameters::has_from_utc_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeAndSalesParameters::set_has_from_utc_time() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeAndSalesParameters::clear_has_from_utc_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeAndSalesParameters::clear_from_utc_time() {
  from_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_from_utc_time();
}
::google::protobuf::int64 TimeAndSalesParameters::from_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesParameters.from_utc_time)
  return from_utc_time_;
}
void TimeAndSalesParameters::set_from_utc_time(::google::protobuf::int64 value) {
  set_has_from_utc_time();
  from_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesParameters.from_utc_time)
}

// optional sint64 to_utc_time = 4;
bool TimeAndSalesParameters::has_to_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeAndSalesParameters::set_has_to_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeAndSalesParameters::clear_has_to_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeAndSalesParameters::clear_to_utc_time() {
  to_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_to_utc_time();
}
::google::protobuf::int64 TimeAndSalesParameters::to_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesParameters.to_utc_time)
  return to_utc_time_;
}
void TimeAndSalesParameters::set_to_utc_time(::google::protobuf::int64 value) {
  set_has_to_utc_time();
  to_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesParameters.to_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeAndSalesRequest::kRequestIdFieldNumber;
const int TimeAndSalesRequest::kTimeAndSalesParametersFieldNumber;
const int TimeAndSalesRequest::kRequestTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeAndSalesRequest::TimeAndSalesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TimeAndSalesRequest)
}
TimeAndSalesRequest::TimeAndSalesRequest(const TimeAndSalesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_and_sales_parameters()) {
    time_and_sales_parameters_ = new ::WebAPI_1::TimeAndSalesParameters(*from.time_and_sales_parameters_);
  } else {
    time_and_sales_parameters_ = NULL;
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&request_type_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(request_type_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TimeAndSalesRequest)
}

void TimeAndSalesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_and_sales_parameters_, 0, reinterpret_cast<char*>(&request_type_) -
    reinterpret_cast<char*>(&time_and_sales_parameters_) + sizeof(request_type_));
}

TimeAndSalesRequest::~TimeAndSalesRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TimeAndSalesRequest)
  SharedDtor();
}

void TimeAndSalesRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete time_and_sales_parameters_;
  }
}

void TimeAndSalesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeAndSalesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[68].descriptor;
}

const TimeAndSalesRequest& TimeAndSalesRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TimeAndSalesRequest* TimeAndSalesRequest::New(::google::protobuf::Arena* arena) const {
  TimeAndSalesRequest* n = new TimeAndSalesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeAndSalesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TimeAndSalesRequest)
  if (has_time_and_sales_parameters()) {
    GOOGLE_DCHECK(time_and_sales_parameters_ != NULL);
    time_and_sales_parameters_->::WebAPI_1::TimeAndSalesParameters::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&request_type_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(request_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeAndSalesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TimeAndSalesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.TimeAndSalesParameters time_and_sales_parameters = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_and_sales_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 request_type = 3;
      case 3: {
        if (tag == 24u) {
          set_has_request_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TimeAndSalesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TimeAndSalesRequest)
  return false;
#undef DO_
}

void TimeAndSalesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TimeAndSalesRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional .WebAPI_1.TimeAndSalesParameters time_and_sales_parameters = 2;
  if (has_time_and_sales_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_and_sales_parameters_, output);
  }

  // optional uint32 request_type = 3;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->request_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TimeAndSalesRequest)
}

::google::protobuf::uint8* TimeAndSalesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TimeAndSalesRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional .WebAPI_1.TimeAndSalesParameters time_and_sales_parameters = 2;
  if (has_time_and_sales_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_and_sales_parameters_, false, target);
  }

  // optional uint32 request_type = 3;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->request_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TimeAndSalesRequest)
  return target;
}

size_t TimeAndSalesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TimeAndSalesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  // optional .WebAPI_1.TimeAndSalesParameters time_and_sales_parameters = 2;
  if (has_time_and_sales_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_and_sales_parameters_);
  }

  // optional uint32 request_type = 3;
  if (has_request_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeAndSalesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TimeAndSalesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeAndSalesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeAndSalesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TimeAndSalesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TimeAndSalesRequest)
    MergeFrom(*source);
  }
}

void TimeAndSalesRequest::MergeFrom(const TimeAndSalesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TimeAndSalesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_time_and_sales_parameters()) {
      mutable_time_and_sales_parameters()->::WebAPI_1::TimeAndSalesParameters::MergeFrom(from.time_and_sales_parameters());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
  }
}

void TimeAndSalesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TimeAndSalesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeAndSalesRequest::CopyFrom(const TimeAndSalesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TimeAndSalesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeAndSalesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_time_and_sales_parameters()) {
    if (!this->time_and_sales_parameters_->IsInitialized()) return false;
  }
  return true;
}

void TimeAndSalesRequest::Swap(TimeAndSalesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeAndSalesRequest::InternalSwap(TimeAndSalesRequest* other) {
  std::swap(time_and_sales_parameters_, other->time_and_sales_parameters_);
  std::swap(request_id_, other->request_id_);
  std::swap(request_type_, other->request_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeAndSalesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[68];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeAndSalesRequest

// required uint32 request_id = 1;
bool TimeAndSalesRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeAndSalesRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeAndSalesRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeAndSalesRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 TimeAndSalesRequest::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesRequest.request_id)
  return request_id_;
}
void TimeAndSalesRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesRequest.request_id)
}

// optional .WebAPI_1.TimeAndSalesParameters time_and_sales_parameters = 2;
bool TimeAndSalesRequest::has_time_and_sales_parameters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeAndSalesRequest::set_has_time_and_sales_parameters() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeAndSalesRequest::clear_has_time_and_sales_parameters() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeAndSalesRequest::clear_time_and_sales_parameters() {
  if (time_and_sales_parameters_ != NULL) time_and_sales_parameters_->::WebAPI_1::TimeAndSalesParameters::Clear();
  clear_has_time_and_sales_parameters();
}
const ::WebAPI_1::TimeAndSalesParameters& TimeAndSalesRequest::time_and_sales_parameters() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesRequest.time_and_sales_parameters)
  return time_and_sales_parameters_ != NULL ? *time_and_sales_parameters_
                         : *::WebAPI_1::TimeAndSalesParameters::internal_default_instance();
}
::WebAPI_1::TimeAndSalesParameters* TimeAndSalesRequest::mutable_time_and_sales_parameters() {
  set_has_time_and_sales_parameters();
  if (time_and_sales_parameters_ == NULL) {
    time_and_sales_parameters_ = new ::WebAPI_1::TimeAndSalesParameters;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TimeAndSalesRequest.time_and_sales_parameters)
  return time_and_sales_parameters_;
}
::WebAPI_1::TimeAndSalesParameters* TimeAndSalesRequest::release_time_and_sales_parameters() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TimeAndSalesRequest.time_and_sales_parameters)
  clear_has_time_and_sales_parameters();
  ::WebAPI_1::TimeAndSalesParameters* temp = time_and_sales_parameters_;
  time_and_sales_parameters_ = NULL;
  return temp;
}
void TimeAndSalesRequest::set_allocated_time_and_sales_parameters(::WebAPI_1::TimeAndSalesParameters* time_and_sales_parameters) {
  delete time_and_sales_parameters_;
  time_and_sales_parameters_ = time_and_sales_parameters;
  if (time_and_sales_parameters) {
    set_has_time_and_sales_parameters();
  } else {
    clear_has_time_and_sales_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TimeAndSalesRequest.time_and_sales_parameters)
}

// optional uint32 request_type = 3;
bool TimeAndSalesRequest::has_request_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeAndSalesRequest::set_has_request_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeAndSalesRequest::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeAndSalesRequest::clear_request_type() {
  request_type_ = 0u;
  clear_has_request_type();
}
::google::protobuf::uint32 TimeAndSalesRequest::request_type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesRequest.request_type)
  return request_type_;
}
void TimeAndSalesRequest::set_request_type(::google::protobuf::uint32 value) {
  set_has_request_type();
  request_type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesRequest.request_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeAndSalesReport::kRequestIdFieldNumber;
const int TimeAndSalesReport::kResultCodeFieldNumber;
const int TimeAndSalesReport::kQuoteFieldNumber;
const int TimeAndSalesReport::kUpToUtcTimeFieldNumber;
const int TimeAndSalesReport::kIsReportCompleteFieldNumber;
const int TimeAndSalesReport::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeAndSalesReport::TimeAndSalesReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TimeAndSalesReport)
}
TimeAndSalesReport::TimeAndSalesReport(const TimeAndSalesReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      quote_(from.quote_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&is_report_complete_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(is_report_complete_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TimeAndSalesReport)
}

void TimeAndSalesReport::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&up_to_utc_time_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(up_to_utc_time_));
  is_report_complete_ = true;
}

TimeAndSalesReport::~TimeAndSalesReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TimeAndSalesReport)
  SharedDtor();
}

void TimeAndSalesReport::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimeAndSalesReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeAndSalesReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[69].descriptor;
}

const TimeAndSalesReport& TimeAndSalesReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TimeAndSalesReport* TimeAndSalesReport::New(::google::protobuf::Arena* arena) const {
  TimeAndSalesReport* n = new TimeAndSalesReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeAndSalesReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TimeAndSalesReport)
  quote_.Clear();
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&up_to_utc_time_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(up_to_utc_time_));
    is_report_complete_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeAndSalesReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TimeAndSalesReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.Quote quote = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_quote()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int64 up_to_utc_time = 4;
      case 4: {
        if (tag == 32u) {
          set_has_up_to_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &up_to_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_report_complete = 5 [default = true];
      case 5: {
        if (tag == 40u) {
          set_has_is_report_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_report_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TimeAndSalesReport.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TimeAndSalesReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TimeAndSalesReport)
  return false;
#undef DO_
}

void TimeAndSalesReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TimeAndSalesReport)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // repeated .WebAPI_1.Quote quote = 3;
  for (unsigned int i = 0, n = this->quote_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quote(i), output);
  }

  // optional int64 up_to_utc_time = 4;
  if (has_up_to_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->up_to_utc_time(), output);
  }

  // optional bool is_report_complete = 5 [default = true];
  if (has_is_report_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_report_complete(), output);
  }

  // optional string text_message = 6;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TimeAndSalesReport.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TimeAndSalesReport)
}

::google::protobuf::uint8* TimeAndSalesReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TimeAndSalesReport)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // repeated .WebAPI_1.Quote quote = 3;
  for (unsigned int i = 0, n = this->quote_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->quote(i), false, target);
  }

  // optional int64 up_to_utc_time = 4;
  if (has_up_to_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->up_to_utc_time(), target);
  }

  // optional bool is_report_complete = 5 [default = true];
  if (has_is_report_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_report_complete(), target);
  }

  // optional string text_message = 6;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TimeAndSalesReport.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TimeAndSalesReport)
  return target;
}

size_t TimeAndSalesReport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.TimeAndSalesReport)
  size_t total_size = 0;

  if (has_request_id()) {
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  if (has_result_code()) {
    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  return total_size;
}
size_t TimeAndSalesReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TimeAndSalesReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());

    // required uint32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.Quote quote = 3;
  {
    unsigned int count = this->quote_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quote(i));
    }
  }

  // optional string text_message = 6;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional int64 up_to_utc_time = 4;
    if (has_up_to_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->up_to_utc_time());
    }

    // optional bool is_report_complete = 5 [default = true];
    if (has_is_report_complete()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeAndSalesReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TimeAndSalesReport)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeAndSalesReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeAndSalesReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TimeAndSalesReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TimeAndSalesReport)
    MergeFrom(*source);
  }
}

void TimeAndSalesReport::MergeFrom(const TimeAndSalesReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TimeAndSalesReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quote_.MergeFrom(from.quote_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_up_to_utc_time()) {
      set_up_to_utc_time(from.up_to_utc_time());
    }
    if (from.has_is_report_complete()) {
      set_is_report_complete(from.is_report_complete());
    }
  }
}

void TimeAndSalesReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TimeAndSalesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeAndSalesReport::CopyFrom(const TimeAndSalesReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TimeAndSalesReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeAndSalesReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->quote())) return false;
  return true;
}

void TimeAndSalesReport::Swap(TimeAndSalesReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeAndSalesReport::InternalSwap(TimeAndSalesReport* other) {
  quote_.UnsafeArenaSwap(&other->quote_);
  text_message_.Swap(&other->text_message_);
  std::swap(request_id_, other->request_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(up_to_utc_time_, other->up_to_utc_time_);
  std::swap(is_report_complete_, other->is_report_complete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeAndSalesReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[69];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeAndSalesReport

// required uint32 request_id = 1;
bool TimeAndSalesReport::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeAndSalesReport::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeAndSalesReport::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeAndSalesReport::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 TimeAndSalesReport::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesReport.request_id)
  return request_id_;
}
void TimeAndSalesReport::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesReport.request_id)
}

// required uint32 result_code = 2;
bool TimeAndSalesReport::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeAndSalesReport::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeAndSalesReport::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeAndSalesReport::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 TimeAndSalesReport::result_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesReport.result_code)
  return result_code_;
}
void TimeAndSalesReport::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesReport.result_code)
}

// repeated .WebAPI_1.Quote quote = 3;
int TimeAndSalesReport::quote_size() const {
  return quote_.size();
}
void TimeAndSalesReport::clear_quote() {
  quote_.Clear();
}
const ::WebAPI_1::Quote& TimeAndSalesReport::quote(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesReport.quote)
  return quote_.Get(index);
}
::WebAPI_1::Quote* TimeAndSalesReport::mutable_quote(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TimeAndSalesReport.quote)
  return quote_.Mutable(index);
}
::WebAPI_1::Quote* TimeAndSalesReport::add_quote() {
  // @@protoc_insertion_point(field_add:WebAPI_1.TimeAndSalesReport.quote)
  return quote_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::Quote >*
TimeAndSalesReport::mutable_quote() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.TimeAndSalesReport.quote)
  return &quote_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::Quote >&
TimeAndSalesReport::quote() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.TimeAndSalesReport.quote)
  return quote_;
}

// optional int64 up_to_utc_time = 4;
bool TimeAndSalesReport::has_up_to_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeAndSalesReport::set_has_up_to_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeAndSalesReport::clear_has_up_to_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeAndSalesReport::clear_up_to_utc_time() {
  up_to_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_up_to_utc_time();
}
::google::protobuf::int64 TimeAndSalesReport::up_to_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesReport.up_to_utc_time)
  return up_to_utc_time_;
}
void TimeAndSalesReport::set_up_to_utc_time(::google::protobuf::int64 value) {
  set_has_up_to_utc_time();
  up_to_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesReport.up_to_utc_time)
}

// optional bool is_report_complete = 5 [default = true];
bool TimeAndSalesReport::has_is_report_complete() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimeAndSalesReport::set_has_is_report_complete() {
  _has_bits_[0] |= 0x00000010u;
}
void TimeAndSalesReport::clear_has_is_report_complete() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimeAndSalesReport::clear_is_report_complete() {
  is_report_complete_ = true;
  clear_has_is_report_complete();
}
bool TimeAndSalesReport::is_report_complete() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesReport.is_report_complete)
  return is_report_complete_;
}
void TimeAndSalesReport::set_is_report_complete(bool value) {
  set_has_is_report_complete();
  is_report_complete_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesReport.is_report_complete)
}

// optional string text_message = 6;
bool TimeAndSalesReport::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeAndSalesReport::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeAndSalesReport::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeAndSalesReport::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& TimeAndSalesReport::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeAndSalesReport.text_message)
  return text_message_.GetNoArena();
}
void TimeAndSalesReport::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeAndSalesReport.text_message)
}
void TimeAndSalesReport::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TimeAndSalesReport.text_message)
}
void TimeAndSalesReport::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TimeAndSalesReport.text_message)
}
::std::string* TimeAndSalesReport::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TimeAndSalesReport.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TimeAndSalesReport::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TimeAndSalesReport.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TimeAndSalesReport::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TimeAndSalesReport.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeBarParameters::kContractIdFieldNumber;
const int TimeBarParameters::kBarUnitFieldNumber;
const int TimeBarParameters::kUnitsNumberFieldNumber;
const int TimeBarParameters::kFromUtcTimeFieldNumber;
const int TimeBarParameters::kToUtcTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeBarParameters::TimeBarParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TimeBarParameters)
}
TimeBarParameters::TimeBarParameters(const TimeBarParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&contract_id_, &from.contract_id_,
    reinterpret_cast<char*>(&units_number_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(units_number_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TimeBarParameters)
}

void TimeBarParameters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&contract_id_, 0, reinterpret_cast<char*>(&units_number_) -
    reinterpret_cast<char*>(&contract_id_) + sizeof(units_number_));
}

TimeBarParameters::~TimeBarParameters() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TimeBarParameters)
  SharedDtor();
}

void TimeBarParameters::SharedDtor() {
}

void TimeBarParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeBarParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[70].descriptor;
}

const TimeBarParameters& TimeBarParameters::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TimeBarParameters* TimeBarParameters::New(::google::protobuf::Arena* arena) const {
  TimeBarParameters* n = new TimeBarParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeBarParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TimeBarParameters)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&contract_id_, 0, reinterpret_cast<char*>(&units_number_) -
      reinterpret_cast<char*>(&contract_id_) + sizeof(units_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeBarParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TimeBarParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 contract_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_contract_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contract_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bar_unit = 2;
      case 2: {
        if (tag == 16u) {
          set_has_bar_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bar_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 units_number = 3;
      case 3: {
        if (tag == 24u) {
          set_has_units_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &units_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint64 from_utc_time = 4;
      case 4: {
        if (tag == 32u) {
          set_has_from_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &from_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 to_utc_time = 5;
      case 5: {
        if (tag == 40u) {
          set_has_to_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &to_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TimeBarParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TimeBarParameters)
  return false;
#undef DO_
}

void TimeBarParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TimeBarParameters)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contract_id(), output);
  }

  // required uint32 bar_unit = 2;
  if (has_bar_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bar_unit(), output);
  }

  // optional uint32 units_number = 3;
  if (has_units_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->units_number(), output);
  }

  // required sint64 from_utc_time = 4;
  if (has_from_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->from_utc_time(), output);
  }

  // optional sint64 to_utc_time = 5;
  if (has_to_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->to_utc_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TimeBarParameters)
}

::google::protobuf::uint8* TimeBarParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TimeBarParameters)
  // required uint32 contract_id = 1;
  if (has_contract_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contract_id(), target);
  }

  // required uint32 bar_unit = 2;
  if (has_bar_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bar_unit(), target);
  }

  // optional uint32 units_number = 3;
  if (has_units_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->units_number(), target);
  }

  // required sint64 from_utc_time = 4;
  if (has_from_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->from_utc_time(), target);
  }

  // optional sint64 to_utc_time = 5;
  if (has_to_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->to_utc_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TimeBarParameters)
  return target;
}

size_t TimeBarParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.TimeBarParameters)
  size_t total_size = 0;

  if (has_contract_id()) {
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());
  }

  if (has_bar_unit()) {
    // required uint32 bar_unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bar_unit());
  }

  if (has_from_utc_time()) {
    // required sint64 from_utc_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->from_utc_time());
  }

  return total_size;
}
size_t TimeBarParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TimeBarParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 contract_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contract_id());

    // required uint32 bar_unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bar_unit());

    // required sint64 from_utc_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->from_utc_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional sint64 to_utc_time = 5;
    if (has_to_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->to_utc_time());
    }

    // optional uint32 units_number = 3;
    if (has_units_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->units_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeBarParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TimeBarParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeBarParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeBarParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TimeBarParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TimeBarParameters)
    MergeFrom(*source);
  }
}

void TimeBarParameters::MergeFrom(const TimeBarParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TimeBarParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_contract_id()) {
      set_contract_id(from.contract_id());
    }
    if (from.has_bar_unit()) {
      set_bar_unit(from.bar_unit());
    }
    if (from.has_from_utc_time()) {
      set_from_utc_time(from.from_utc_time());
    }
    if (from.has_to_utc_time()) {
      set_to_utc_time(from.to_utc_time());
    }
    if (from.has_units_number()) {
      set_units_number(from.units_number());
    }
  }
}

void TimeBarParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TimeBarParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBarParameters::CopyFrom(const TimeBarParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TimeBarParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBarParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TimeBarParameters::Swap(TimeBarParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeBarParameters::InternalSwap(TimeBarParameters* other) {
  std::swap(contract_id_, other->contract_id_);
  std::swap(bar_unit_, other->bar_unit_);
  std::swap(from_utc_time_, other->from_utc_time_);
  std::swap(to_utc_time_, other->to_utc_time_);
  std::swap(units_number_, other->units_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeBarParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[70];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeBarParameters

// required uint32 contract_id = 1;
bool TimeBarParameters::has_contract_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeBarParameters::set_has_contract_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeBarParameters::clear_has_contract_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeBarParameters::clear_contract_id() {
  contract_id_ = 0u;
  clear_has_contract_id();
}
::google::protobuf::uint32 TimeBarParameters::contract_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarParameters.contract_id)
  return contract_id_;
}
void TimeBarParameters::set_contract_id(::google::protobuf::uint32 value) {
  set_has_contract_id();
  contract_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarParameters.contract_id)
}

// required uint32 bar_unit = 2;
bool TimeBarParameters::has_bar_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeBarParameters::set_has_bar_unit() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeBarParameters::clear_has_bar_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeBarParameters::clear_bar_unit() {
  bar_unit_ = 0u;
  clear_has_bar_unit();
}
::google::protobuf::uint32 TimeBarParameters::bar_unit() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarParameters.bar_unit)
  return bar_unit_;
}
void TimeBarParameters::set_bar_unit(::google::protobuf::uint32 value) {
  set_has_bar_unit();
  bar_unit_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarParameters.bar_unit)
}

// optional uint32 units_number = 3;
bool TimeBarParameters::has_units_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimeBarParameters::set_has_units_number() {
  _has_bits_[0] |= 0x00000010u;
}
void TimeBarParameters::clear_has_units_number() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimeBarParameters::clear_units_number() {
  units_number_ = 0u;
  clear_has_units_number();
}
::google::protobuf::uint32 TimeBarParameters::units_number() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarParameters.units_number)
  return units_number_;
}
void TimeBarParameters::set_units_number(::google::protobuf::uint32 value) {
  set_has_units_number();
  units_number_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarParameters.units_number)
}

// required sint64 from_utc_time = 4;
bool TimeBarParameters::has_from_utc_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeBarParameters::set_has_from_utc_time() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeBarParameters::clear_has_from_utc_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeBarParameters::clear_from_utc_time() {
  from_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_from_utc_time();
}
::google::protobuf::int64 TimeBarParameters::from_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarParameters.from_utc_time)
  return from_utc_time_;
}
void TimeBarParameters::set_from_utc_time(::google::protobuf::int64 value) {
  set_has_from_utc_time();
  from_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarParameters.from_utc_time)
}

// optional sint64 to_utc_time = 5;
bool TimeBarParameters::has_to_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeBarParameters::set_has_to_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeBarParameters::clear_has_to_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeBarParameters::clear_to_utc_time() {
  to_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_to_utc_time();
}
::google::protobuf::int64 TimeBarParameters::to_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarParameters.to_utc_time)
  return to_utc_time_;
}
void TimeBarParameters::set_to_utc_time(::google::protobuf::int64 value) {
  set_has_to_utc_time();
  to_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarParameters.to_utc_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeBarRequest::kRequestIdFieldNumber;
const int TimeBarRequest::kTimeBarParametersFieldNumber;
const int TimeBarRequest::kRequestTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeBarRequest::TimeBarRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TimeBarRequest)
}
TimeBarRequest::TimeBarRequest(const TimeBarRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_bar_parameters()) {
    time_bar_parameters_ = new ::WebAPI_1::TimeBarParameters(*from.time_bar_parameters_);
  } else {
    time_bar_parameters_ = NULL;
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&request_type_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(request_type_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TimeBarRequest)
}

void TimeBarRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_bar_parameters_, 0, reinterpret_cast<char*>(&request_type_) -
    reinterpret_cast<char*>(&time_bar_parameters_) + sizeof(request_type_));
}

TimeBarRequest::~TimeBarRequest() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TimeBarRequest)
  SharedDtor();
}

void TimeBarRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete time_bar_parameters_;
  }
}

void TimeBarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeBarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[71].descriptor;
}

const TimeBarRequest& TimeBarRequest::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TimeBarRequest* TimeBarRequest::New(::google::protobuf::Arena* arena) const {
  TimeBarRequest* n = new TimeBarRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeBarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TimeBarRequest)
  if (has_time_bar_parameters()) {
    GOOGLE_DCHECK(time_bar_parameters_ != NULL);
    time_bar_parameters_->::WebAPI_1::TimeBarParameters::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&request_type_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(request_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeBarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TimeBarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WebAPI_1.TimeBarParameters time_bar_parameters = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_bar_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 request_type = 3;
      case 3: {
        if (tag == 24u) {
          set_has_request_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TimeBarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TimeBarRequest)
  return false;
#undef DO_
}

void TimeBarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TimeBarRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional .WebAPI_1.TimeBarParameters time_bar_parameters = 2;
  if (has_time_bar_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_bar_parameters_, output);
  }

  // optional uint32 request_type = 3;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->request_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TimeBarRequest)
}

::google::protobuf::uint8* TimeBarRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TimeBarRequest)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional .WebAPI_1.TimeBarParameters time_bar_parameters = 2;
  if (has_time_bar_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_bar_parameters_, false, target);
  }

  // optional uint32 request_type = 3;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->request_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TimeBarRequest)
  return target;
}

size_t TimeBarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TimeBarRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  // optional .WebAPI_1.TimeBarParameters time_bar_parameters = 2;
  if (has_time_bar_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_bar_parameters_);
  }

  // optional uint32 request_type = 3;
  if (has_request_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeBarRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TimeBarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeBarRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeBarRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TimeBarRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TimeBarRequest)
    MergeFrom(*source);
  }
}

void TimeBarRequest::MergeFrom(const TimeBarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TimeBarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_time_bar_parameters()) {
      mutable_time_bar_parameters()->::WebAPI_1::TimeBarParameters::MergeFrom(from.time_bar_parameters());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
  }
}

void TimeBarRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TimeBarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBarRequest::CopyFrom(const TimeBarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TimeBarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_time_bar_parameters()) {
    if (!this->time_bar_parameters_->IsInitialized()) return false;
  }
  return true;
}

void TimeBarRequest::Swap(TimeBarRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeBarRequest::InternalSwap(TimeBarRequest* other) {
  std::swap(time_bar_parameters_, other->time_bar_parameters_);
  std::swap(request_id_, other->request_id_);
  std::swap(request_type_, other->request_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeBarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[71];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeBarRequest

// required uint32 request_id = 1;
bool TimeBarRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeBarRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeBarRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeBarRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 TimeBarRequest::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarRequest.request_id)
  return request_id_;
}
void TimeBarRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarRequest.request_id)
}

// optional .WebAPI_1.TimeBarParameters time_bar_parameters = 2;
bool TimeBarRequest::has_time_bar_parameters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeBarRequest::set_has_time_bar_parameters() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeBarRequest::clear_has_time_bar_parameters() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeBarRequest::clear_time_bar_parameters() {
  if (time_bar_parameters_ != NULL) time_bar_parameters_->::WebAPI_1::TimeBarParameters::Clear();
  clear_has_time_bar_parameters();
}
const ::WebAPI_1::TimeBarParameters& TimeBarRequest::time_bar_parameters() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarRequest.time_bar_parameters)
  return time_bar_parameters_ != NULL ? *time_bar_parameters_
                         : *::WebAPI_1::TimeBarParameters::internal_default_instance();
}
::WebAPI_1::TimeBarParameters* TimeBarRequest::mutable_time_bar_parameters() {
  set_has_time_bar_parameters();
  if (time_bar_parameters_ == NULL) {
    time_bar_parameters_ = new ::WebAPI_1::TimeBarParameters;
  }
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TimeBarRequest.time_bar_parameters)
  return time_bar_parameters_;
}
::WebAPI_1::TimeBarParameters* TimeBarRequest::release_time_bar_parameters() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TimeBarRequest.time_bar_parameters)
  clear_has_time_bar_parameters();
  ::WebAPI_1::TimeBarParameters* temp = time_bar_parameters_;
  time_bar_parameters_ = NULL;
  return temp;
}
void TimeBarRequest::set_allocated_time_bar_parameters(::WebAPI_1::TimeBarParameters* time_bar_parameters) {
  delete time_bar_parameters_;
  time_bar_parameters_ = time_bar_parameters;
  if (time_bar_parameters) {
    set_has_time_bar_parameters();
  } else {
    clear_has_time_bar_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TimeBarRequest.time_bar_parameters)
}

// optional uint32 request_type = 3;
bool TimeBarRequest::has_request_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeBarRequest::set_has_request_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeBarRequest::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeBarRequest::clear_request_type() {
  request_type_ = 0u;
  clear_has_request_type();
}
::google::protobuf::uint32 TimeBarRequest::request_type() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarRequest.request_type)
  return request_type_;
}
void TimeBarRequest::set_request_type(::google::protobuf::uint32 value) {
  set_has_request_type();
  request_type_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarRequest.request_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeBar::kBarUtcTimeFieldNumber;
const int TimeBar::kOpenPriceFieldNumber;
const int TimeBar::kHighPriceFieldNumber;
const int TimeBar::kLowPriceFieldNumber;
const int TimeBar::kClosePriceFieldNumber;
const int TimeBar::kVolumeFieldNumber;
const int TimeBar::kTradeDateFieldNumber;
const int TimeBar::kCommodityVolumeFieldNumber;
const int TimeBar::kOpenInterestFieldNumber;
const int TimeBar::kCommodityOpenInterestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeBar::TimeBar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TimeBar)
}
TimeBar::TimeBar(const TimeBar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bar_utc_time_, &from.bar_utc_time_,
    reinterpret_cast<char*>(&commodity_open_interest_) -
    reinterpret_cast<char*>(&bar_utc_time_) + sizeof(commodity_open_interest_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TimeBar)
}

void TimeBar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bar_utc_time_, 0, reinterpret_cast<char*>(&commodity_open_interest_) -
    reinterpret_cast<char*>(&bar_utc_time_) + sizeof(commodity_open_interest_));
}

TimeBar::~TimeBar() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TimeBar)
  SharedDtor();
}

void TimeBar::SharedDtor() {
}

void TimeBar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeBar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[72].descriptor;
}

const TimeBar& TimeBar::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TimeBar* TimeBar::New(::google::protobuf::Arena* arena) const {
  TimeBar* n = new TimeBar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeBar::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TimeBar)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&bar_utc_time_, 0, reinterpret_cast<char*>(&commodity_volume_) -
      reinterpret_cast<char*>(&bar_utc_time_) + sizeof(commodity_volume_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&open_interest_, 0, reinterpret_cast<char*>(&commodity_open_interest_) -
      reinterpret_cast<char*>(&open_interest_) + sizeof(commodity_open_interest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TimeBar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 bar_utc_time = 1;
      case 1: {
        if (tag == 8u) {
          set_has_bar_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &bar_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 open_price = 2;
      case 2: {
        if (tag == 16u) {
          set_has_open_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &open_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 high_price = 3;
      case 3: {
        if (tag == 24u) {
          set_has_high_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &high_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 low_price = 4;
      case 4: {
        if (tag == 32u) {
          set_has_low_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &low_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 close_price = 5;
      case 5: {
        if (tag == 40u) {
          set_has_close_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &close_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 volume = 6;
      case 6: {
        if (tag == 48u) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 trade_date = 7;
      case 7: {
        if (tag == 56u) {
          set_has_trade_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &trade_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 commodity_volume = 8;
      case 8: {
        if (tag == 64u) {
          set_has_commodity_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commodity_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 open_interest = 9;
      case 9: {
        if (tag == 72u) {
          set_has_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 commodity_open_interest = 10;
      case 10: {
        if (tag == 80u) {
          set_has_commodity_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commodity_open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TimeBar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TimeBar)
  return false;
#undef DO_
}

void TimeBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TimeBar)
  // required sint64 bar_utc_time = 1;
  if (has_bar_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->bar_utc_time(), output);
  }

  // optional sint32 open_price = 2;
  if (has_open_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->open_price(), output);
  }

  // optional sint32 high_price = 3;
  if (has_high_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->high_price(), output);
  }

  // optional sint32 low_price = 4;
  if (has_low_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->low_price(), output);
  }

  // optional sint32 close_price = 5;
  if (has_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->close_price(), output);
  }

  // optional uint64 volume = 6;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->volume(), output);
  }

  // optional sint64 trade_date = 7;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->trade_date(), output);
  }

  // optional uint64 commodity_volume = 8;
  if (has_commodity_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->commodity_volume(), output);
  }

  // optional uint32 open_interest = 9;
  if (has_open_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->open_interest(), output);
  }

  // optional uint32 commodity_open_interest = 10;
  if (has_commodity_open_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->commodity_open_interest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TimeBar)
}

::google::protobuf::uint8* TimeBar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TimeBar)
  // required sint64 bar_utc_time = 1;
  if (has_bar_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->bar_utc_time(), target);
  }

  // optional sint32 open_price = 2;
  if (has_open_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->open_price(), target);
  }

  // optional sint32 high_price = 3;
  if (has_high_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->high_price(), target);
  }

  // optional sint32 low_price = 4;
  if (has_low_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->low_price(), target);
  }

  // optional sint32 close_price = 5;
  if (has_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->close_price(), target);
  }

  // optional uint64 volume = 6;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->volume(), target);
  }

  // optional sint64 trade_date = 7;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->trade_date(), target);
  }

  // optional uint64 commodity_volume = 8;
  if (has_commodity_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->commodity_volume(), target);
  }

  // optional uint32 open_interest = 9;
  if (has_open_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->open_interest(), target);
  }

  // optional uint32 commodity_open_interest = 10;
  if (has_commodity_open_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->commodity_open_interest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TimeBar)
  return target;
}

size_t TimeBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TimeBar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required sint64 bar_utc_time = 1;
  if (has_bar_utc_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->bar_utc_time());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional sint32 open_price = 2;
    if (has_open_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->open_price());
    }

    // optional sint32 high_price = 3;
    if (has_high_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->high_price());
    }

    // optional sint32 low_price = 4;
    if (has_low_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->low_price());
    }

    // optional sint32 close_price = 5;
    if (has_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->close_price());
    }

    // optional uint64 volume = 6;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume());
    }

    // optional sint64 trade_date = 7;
    if (has_trade_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->trade_date());
    }

    // optional uint64 commodity_volume = 8;
    if (has_commodity_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commodity_volume());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 open_interest = 9;
    if (has_open_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_interest());
    }

    // optional uint32 commodity_open_interest = 10;
    if (has_commodity_open_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commodity_open_interest());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeBar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TimeBar)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeBar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeBar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TimeBar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TimeBar)
    MergeFrom(*source);
  }
}

void TimeBar::MergeFrom(const TimeBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TimeBar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_bar_utc_time()) {
      set_bar_utc_time(from.bar_utc_time());
    }
    if (from.has_open_price()) {
      set_open_price(from.open_price());
    }
    if (from.has_high_price()) {
      set_high_price(from.high_price());
    }
    if (from.has_low_price()) {
      set_low_price(from.low_price());
    }
    if (from.has_close_price()) {
      set_close_price(from.close_price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
    if (from.has_commodity_volume()) {
      set_commodity_volume(from.commodity_volume());
    }
  }
  if (from._has_bits_[8 / 32] & 768u) {
    if (from.has_open_interest()) {
      set_open_interest(from.open_interest());
    }
    if (from.has_commodity_open_interest()) {
      set_commodity_open_interest(from.commodity_open_interest());
    }
  }
}

void TimeBar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TimeBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBar::CopyFrom(const TimeBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TimeBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TimeBar::Swap(TimeBar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeBar::InternalSwap(TimeBar* other) {
  std::swap(bar_utc_time_, other->bar_utc_time_);
  std::swap(open_price_, other->open_price_);
  std::swap(high_price_, other->high_price_);
  std::swap(low_price_, other->low_price_);
  std::swap(close_price_, other->close_price_);
  std::swap(volume_, other->volume_);
  std::swap(trade_date_, other->trade_date_);
  std::swap(commodity_volume_, other->commodity_volume_);
  std::swap(open_interest_, other->open_interest_);
  std::swap(commodity_open_interest_, other->commodity_open_interest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeBar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[72];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeBar

// required sint64 bar_utc_time = 1;
bool TimeBar::has_bar_utc_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeBar::set_has_bar_utc_time() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeBar::clear_has_bar_utc_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeBar::clear_bar_utc_time() {
  bar_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_bar_utc_time();
}
::google::protobuf::int64 TimeBar::bar_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.bar_utc_time)
  return bar_utc_time_;
}
void TimeBar::set_bar_utc_time(::google::protobuf::int64 value) {
  set_has_bar_utc_time();
  bar_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.bar_utc_time)
}

// optional sint32 open_price = 2;
bool TimeBar::has_open_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeBar::set_has_open_price() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeBar::clear_has_open_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeBar::clear_open_price() {
  open_price_ = 0;
  clear_has_open_price();
}
::google::protobuf::int32 TimeBar::open_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.open_price)
  return open_price_;
}
void TimeBar::set_open_price(::google::protobuf::int32 value) {
  set_has_open_price();
  open_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.open_price)
}

// optional sint32 high_price = 3;
bool TimeBar::has_high_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeBar::set_has_high_price() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeBar::clear_has_high_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeBar::clear_high_price() {
  high_price_ = 0;
  clear_has_high_price();
}
::google::protobuf::int32 TimeBar::high_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.high_price)
  return high_price_;
}
void TimeBar::set_high_price(::google::protobuf::int32 value) {
  set_has_high_price();
  high_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.high_price)
}

// optional sint32 low_price = 4;
bool TimeBar::has_low_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeBar::set_has_low_price() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeBar::clear_has_low_price() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeBar::clear_low_price() {
  low_price_ = 0;
  clear_has_low_price();
}
::google::protobuf::int32 TimeBar::low_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.low_price)
  return low_price_;
}
void TimeBar::set_low_price(::google::protobuf::int32 value) {
  set_has_low_price();
  low_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.low_price)
}

// optional sint32 close_price = 5;
bool TimeBar::has_close_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimeBar::set_has_close_price() {
  _has_bits_[0] |= 0x00000010u;
}
void TimeBar::clear_has_close_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimeBar::clear_close_price() {
  close_price_ = 0;
  clear_has_close_price();
}
::google::protobuf::int32 TimeBar::close_price() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.close_price)
  return close_price_;
}
void TimeBar::set_close_price(::google::protobuf::int32 value) {
  set_has_close_price();
  close_price_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.close_price)
}

// optional uint64 volume = 6;
bool TimeBar::has_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TimeBar::set_has_volume() {
  _has_bits_[0] |= 0x00000020u;
}
void TimeBar::clear_has_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
void TimeBar::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
::google::protobuf::uint64 TimeBar::volume() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.volume)
  return volume_;
}
void TimeBar::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.volume)
}

// optional sint64 trade_date = 7;
bool TimeBar::has_trade_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TimeBar::set_has_trade_date() {
  _has_bits_[0] |= 0x00000040u;
}
void TimeBar::clear_has_trade_date() {
  _has_bits_[0] &= ~0x00000040u;
}
void TimeBar::clear_trade_date() {
  trade_date_ = GOOGLE_LONGLONG(0);
  clear_has_trade_date();
}
::google::protobuf::int64 TimeBar::trade_date() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.trade_date)
  return trade_date_;
}
void TimeBar::set_trade_date(::google::protobuf::int64 value) {
  set_has_trade_date();
  trade_date_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.trade_date)
}

// optional uint64 commodity_volume = 8;
bool TimeBar::has_commodity_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TimeBar::set_has_commodity_volume() {
  _has_bits_[0] |= 0x00000080u;
}
void TimeBar::clear_has_commodity_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
void TimeBar::clear_commodity_volume() {
  commodity_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_commodity_volume();
}
::google::protobuf::uint64 TimeBar::commodity_volume() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.commodity_volume)
  return commodity_volume_;
}
void TimeBar::set_commodity_volume(::google::protobuf::uint64 value) {
  set_has_commodity_volume();
  commodity_volume_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.commodity_volume)
}

// optional uint32 open_interest = 9;
bool TimeBar::has_open_interest() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TimeBar::set_has_open_interest() {
  _has_bits_[0] |= 0x00000100u;
}
void TimeBar::clear_has_open_interest() {
  _has_bits_[0] &= ~0x00000100u;
}
void TimeBar::clear_open_interest() {
  open_interest_ = 0u;
  clear_has_open_interest();
}
::google::protobuf::uint32 TimeBar::open_interest() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.open_interest)
  return open_interest_;
}
void TimeBar::set_open_interest(::google::protobuf::uint32 value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.open_interest)
}

// optional uint32 commodity_open_interest = 10;
bool TimeBar::has_commodity_open_interest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TimeBar::set_has_commodity_open_interest() {
  _has_bits_[0] |= 0x00000200u;
}
void TimeBar::clear_has_commodity_open_interest() {
  _has_bits_[0] &= ~0x00000200u;
}
void TimeBar::clear_commodity_open_interest() {
  commodity_open_interest_ = 0u;
  clear_has_commodity_open_interest();
}
::google::protobuf::uint32 TimeBar::commodity_open_interest() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBar.commodity_open_interest)
  return commodity_open_interest_;
}
void TimeBar::set_commodity_open_interest(::google::protobuf::uint32 value) {
  set_has_commodity_open_interest();
  commodity_open_interest_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBar.commodity_open_interest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeBarReport::kRequestIdFieldNumber;
const int TimeBarReport::kStatusCodeFieldNumber;
const int TimeBarReport::kTimeBarFieldNumber;
const int TimeBarReport::kUpToUtcTimeFieldNumber;
const int TimeBarReport::kIsReportCompleteFieldNumber;
const int TimeBarReport::kTextMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeBarReport::TimeBarReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_webapi_5f1_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WebAPI_1.TimeBarReport)
}
TimeBarReport::TimeBarReport(const TimeBarReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      time_bar_(from.time_bar_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_message()) {
    text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&is_report_complete_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(is_report_complete_));
  // @@protoc_insertion_point(copy_constructor:WebAPI_1.TimeBarReport)
}

void TimeBarReport::SharedCtor() {
  _cached_size_ = 0;
  text_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&up_to_utc_time_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(up_to_utc_time_));
  is_report_complete_ = true;
}

TimeBarReport::~TimeBarReport() {
  // @@protoc_insertion_point(destructor:WebAPI_1.TimeBarReport)
  SharedDtor();
}

void TimeBarReport::SharedDtor() {
  text_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimeBarReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeBarReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[73].descriptor;
}

const TimeBarReport& TimeBarReport::default_instance() {
  protobuf_InitDefaults_webapi_5f1_2eproto();
  return *internal_default_instance();
}

TimeBarReport* TimeBarReport::New(::google::protobuf::Arena* arena) const {
  TimeBarReport* n = new TimeBarReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeBarReport::Clear() {
// @@protoc_insertion_point(message_clear_start:WebAPI_1.TimeBarReport)
  time_bar_.Clear();
  if (has_text_message()) {
    GOOGLE_DCHECK(!text_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&up_to_utc_time_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(up_to_utc_time_));
    is_report_complete_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeBarReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WebAPI_1.TimeBarReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 status_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WebAPI_1.TimeBar time_bar = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_bar()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int64 up_to_utc_time = 4;
      case 4: {
        if (tag == 32u) {
          set_has_up_to_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &up_to_utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_report_complete = 5 [default = true];
      case 5: {
        if (tag == 40u) {
          set_has_is_report_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_report_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_message = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_message().data(), this->text_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WebAPI_1.TimeBarReport.text_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WebAPI_1.TimeBarReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WebAPI_1.TimeBarReport)
  return false;
#undef DO_
}

void TimeBarReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WebAPI_1.TimeBarReport)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 status_code = 2;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_code(), output);
  }

  // repeated .WebAPI_1.TimeBar time_bar = 3;
  for (unsigned int i = 0, n = this->time_bar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->time_bar(i), output);
  }

  // optional int64 up_to_utc_time = 4;
  if (has_up_to_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->up_to_utc_time(), output);
  }

  // optional bool is_report_complete = 5 [default = true];
  if (has_is_report_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_report_complete(), output);
  }

  // optional string text_message = 6;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TimeBarReport.text_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WebAPI_1.TimeBarReport)
}

::google::protobuf::uint8* TimeBarReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WebAPI_1.TimeBarReport)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required uint32 status_code = 2;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_code(), target);
  }

  // repeated .WebAPI_1.TimeBar time_bar = 3;
  for (unsigned int i = 0, n = this->time_bar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->time_bar(i), false, target);
  }

  // optional int64 up_to_utc_time = 4;
  if (has_up_to_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->up_to_utc_time(), target);
  }

  // optional bool is_report_complete = 5 [default = true];
  if (has_is_report_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_report_complete(), target);
  }

  // optional string text_message = 6;
  if (has_text_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_message().data(), this->text_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WebAPI_1.TimeBarReport.text_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WebAPI_1.TimeBarReport)
  return target;
}

size_t TimeBarReport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:WebAPI_1.TimeBarReport)
  size_t total_size = 0;

  if (has_request_id()) {
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  if (has_status_code()) {
    // required uint32 status_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());
  }

  return total_size;
}
size_t TimeBarReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WebAPI_1.TimeBarReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());

    // required uint32 status_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .WebAPI_1.TimeBar time_bar = 3;
  {
    unsigned int count = this->time_bar_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_bar(i));
    }
  }

  // optional string text_message = 6;
  if (has_text_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_message());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional int64 up_to_utc_time = 4;
    if (has_up_to_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->up_to_utc_time());
    }

    // optional bool is_report_complete = 5 [default = true];
    if (has_is_report_complete()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeBarReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WebAPI_1.TimeBarReport)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeBarReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeBarReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WebAPI_1.TimeBarReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WebAPI_1.TimeBarReport)
    MergeFrom(*source);
  }
}

void TimeBarReport::MergeFrom(const TimeBarReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WebAPI_1.TimeBarReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_bar_.MergeFrom(from.time_bar_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_text_message()) {
      set_has_text_message();
      text_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_message_);
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_up_to_utc_time()) {
      set_up_to_utc_time(from.up_to_utc_time());
    }
    if (from.has_is_report_complete()) {
      set_is_report_complete(from.is_report_complete());
    }
  }
}

void TimeBarReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WebAPI_1.TimeBarReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBarReport::CopyFrom(const TimeBarReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WebAPI_1.TimeBarReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBarReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->time_bar())) return false;
  return true;
}

void TimeBarReport::Swap(TimeBarReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeBarReport::InternalSwap(TimeBarReport* other) {
  time_bar_.UnsafeArenaSwap(&other->time_bar_);
  text_message_.Swap(&other->text_message_);
  std::swap(request_id_, other->request_id_);
  std::swap(status_code_, other->status_code_);
  std::swap(up_to_utc_time_, other->up_to_utc_time_);
  std::swap(is_report_complete_, other->is_report_complete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeBarReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[73];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeBarReport

// required uint32 request_id = 1;
bool TimeBarReport::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeBarReport::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeBarReport::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeBarReport::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 TimeBarReport::request_id() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarReport.request_id)
  return request_id_;
}
void TimeBarReport::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarReport.request_id)
}

// required uint32 status_code = 2;
bool TimeBarReport::has_status_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeBarReport::set_has_status_code() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeBarReport::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeBarReport::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
::google::protobuf::uint32 TimeBarReport::status_code() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarReport.status_code)
  return status_code_;
}
void TimeBarReport::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarReport.status_code)
}

// repeated .WebAPI_1.TimeBar time_bar = 3;
int TimeBarReport::time_bar_size() const {
  return time_bar_.size();
}
void TimeBarReport::clear_time_bar() {
  time_bar_.Clear();
}
const ::WebAPI_1::TimeBar& TimeBarReport::time_bar(int index) const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarReport.time_bar)
  return time_bar_.Get(index);
}
::WebAPI_1::TimeBar* TimeBarReport::mutable_time_bar(int index) {
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TimeBarReport.time_bar)
  return time_bar_.Mutable(index);
}
::WebAPI_1::TimeBar* TimeBarReport::add_time_bar() {
  // @@protoc_insertion_point(field_add:WebAPI_1.TimeBarReport.time_bar)
  return time_bar_.Add();
}
::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeBar >*
TimeBarReport::mutable_time_bar() {
  // @@protoc_insertion_point(field_mutable_list:WebAPI_1.TimeBarReport.time_bar)
  return &time_bar_;
}
const ::google::protobuf::RepeatedPtrField< ::WebAPI_1::TimeBar >&
TimeBarReport::time_bar() const {
  // @@protoc_insertion_point(field_list:WebAPI_1.TimeBarReport.time_bar)
  return time_bar_;
}

// optional int64 up_to_utc_time = 4;
bool TimeBarReport::has_up_to_utc_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeBarReport::set_has_up_to_utc_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeBarReport::clear_has_up_to_utc_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeBarReport::clear_up_to_utc_time() {
  up_to_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_up_to_utc_time();
}
::google::protobuf::int64 TimeBarReport::up_to_utc_time() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarReport.up_to_utc_time)
  return up_to_utc_time_;
}
void TimeBarReport::set_up_to_utc_time(::google::protobuf::int64 value) {
  set_has_up_to_utc_time();
  up_to_utc_time_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarReport.up_to_utc_time)
}

// optional bool is_report_complete = 5 [default = true];
bool TimeBarReport::has_is_report_complete() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimeBarReport::set_has_is_report_complete() {
  _has_bits_[0] |= 0x00000010u;
}
void TimeBarReport::clear_has_is_report_complete() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimeBarReport::clear_is_report_complete() {
  is_report_complete_ = true;
  clear_has_is_report_complete();
}
bool TimeBarReport::is_report_complete() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarReport.is_report_complete)
  return is_report_complete_;
}
void TimeBarReport::set_is_report_complete(bool value) {
  set_has_is_report_complete();
  is_report_complete_ = value;
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarReport.is_report_complete)
}

// optional string text_message = 6;
bool TimeBarReport::has_text_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeBarReport::set_has_text_message() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeBarReport::clear_has_text_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeBarReport::clear_text_message() {
  text_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_message();
}
const ::std::string& TimeBarReport::text_message() const {
  // @@protoc_insertion_point(field_get:WebAPI_1.TimeBarReport.text_message)
  return text_message_.GetNoArena();
}
void TimeBarReport::set_text_message(const ::std::string& value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WebAPI_1.TimeBarReport.text_message)
}
void TimeBarReport::set_text_message(const char* value) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WebAPI_1.TimeBarReport.text_message)
}
void TimeBarReport::set_text_message(const char* value, size_t size) {
  set_has_text_message();
  text_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WebAPI_1.TimeBarReport.text_message)
}
::std::string* TimeBarReport::mutable_text_message() {
  set_has_text_message();
  // @@protoc_insertion_point(field_mutable:WebAPI_1.TimeBarReport.text_message)
  return text_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TimeBarReport::release_text_message() {
  // @@protoc_insertion_point(field_release:WebAPI_1.TimeBarReport.text_message)
  clear_has_text_message();
  return text_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TimeBarReport::set_allocated_text_message(::std::string* text_message) {
  if (text_message != NULL) {
    set_has_text_message();
  } else {
    clear_has_text_message();
  }
  text_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_message);
  // @@protoc_insertion_point(field_set_allocated:WebAPI_1.TimeBarReport.text_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace WebAPI_1

// @@protoc_insertion_point(global_scope)
